{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap b9777d392091b60d9f07","webpack:///./src/core/model_base_mixin.js","webpack:///./src/kmeans/kmeans_training_mixin.js","webpack:///./src/gmm/gmm_base_mixin.js","webpack:///./src/core/multiclass_mixin.js","webpack:///./src/training_set/index.js","webpack:///./src/training_set/phrase.js","webpack:///./src/train.js","webpack:///./src/common/euclidean.js","webpack:///./src/core/em_training_mixin.js","webpack:///./src/gmm/gmm_training_mixin.js","webpack:///./src/common/gaussian_distribution.js","webpack:///./src/common/matrix.js","webpack:///./src/core/multiclass_training_mixin.js","webpack:///./src/predict.js","webpack:///./src/core/prediction_mixin.js","webpack:///./src/common/circular_buffer.js","webpack:///./src/gmm/gmm_prediction_mixin.js","webpack:///./src/common/validation.js","webpack:///./src/core/multiclass_prediction_mixin.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_ref","inputDimension","outputDimension","_objectWithoutProperties","bimodal","dimension","params","keys","includes","map","key","reduce","a","b","clusters","trainingConfiguration","__WEBPACK_IMPORTED_MODULE_0__core_model_base_mixin__","Error","trainingConfig","assign","initialization","relativeDistanceThreshold","minIterations","maxIterations","model","kMeansTrainingPrototype","train","trainingSet","empty","centers","Array","from","fill","initializeClustersRandom","initializeClustersForgy","initClustersWithFirstPhrase","trainingNbIterations","previousCenters","updateCenters","meanClusterDistance","maxRelativeCenterVariation","k","__WEBPACK_IMPORTED_MODULE_1__common_euclidean__","Math","max","phrase","getPhrase","indices","step","floor","length","offset","t","random","pointsPerCluster","ppc","clustIdx","forEach","_","x","getFrame","numFramesPerCluster","frame","minDistance","clusterMembership","distance","gmmBasePrototype","gmmBimodalPrototype","likelihood","observation","gaussians","beta","componentLikelihood","mixtureComponent","mixtureCoeffs","components","regression","inputObservation","tmpOutputValues","results","outputValues","outputCovariance","covarianceMode","d2","parameters","__WEBPACK_IMPORTED_MODULE_0__model_base_mixin__","ModelBase","MulticlassBasePrototype","size","models","label","remove","trainingSetPrototype","phrases","phraseIndex","toString","callback","push","undefined","__WEBPACK_IMPORTED_MODULE_0__phrase__","columnNames","removeClass","filter","_extends","clear","getPhrasesOfClass","ts","TrainingSet","labels","ll","concat","mean","sum","totalLength","standardDeviation","stddev","sqrt","minmax","min","Infinity","create","__webpack_exports__","phrasePrototype","inputData","outputData","index","dim","slice","pushInput","trim","pushOutput","clearInput","clearOutput","__WEBPACK_IMPORTED_MODULE_1__kmeans_kmeans_training_mixin__","configuration","convergenceCriteria","__WEBPACK_IMPORTED_MODULE_6__core_multiclass_training_mixin__","__WEBPACK_IMPORTED_MODULE_5__core_multiclass_mixin__","MulticlassModelbase","trainGMM","regularization","__WEBPACK_IMPORTED_MODULE_4__gmm_gmm_training_mixin__","__WEBPACK_IMPORTED_MODULE_2__core_em_training_mixin__","__WEBPACK_IMPORTED_MODULE_3__gmm_gmm_base_mixin__","v1","v2","x1","percentChange","trainerPrototype","initTraining","logLikelihood","iterations","previousLogLikelihood","converged","updateTraining","pctChg","abs","Number","isNaN","terminateTraining","iteration","logProb","previousLogProb","absolute","relative","gmmTrainerPrototype","allocate","initParametersToDefault","initMeansWithKMeans","initCovariances","addCovarianceOffset","updateInverseCovariances","__WEBPACK_IMPORTED_MODULE_2__common_gaussian_distribution__","dataStddev","normCoeffs","currentRegularization","std","covariance","regularize","kmeansParams","gmeans","factor","d1","updateInverseCovariance","e","phraseIndices","E","tbase","normConst","log","pix","value","normalizeMixtureCoeffs","proto","baseGaussianPrototype","bimodalGaussianPrototype","data","covarianceDeterminant","covarianceDeterminantInput","dist","inverseCovariance","allocateBimodal","inputLikelihood","euclideanDistance","tmp","exp","PI","covMatrix","__WEBPACK_IMPORTED_MODULE_0__matrix__","inv","pinv","determinant","matrix","updateInverseCovarianceBimodal","toEllipse","dimension1","dimension2","gaussianEllipse","y","width","height","angle","trace","eigenVal1","eigenVal2","atan","fromEllipse","tantheta","tan","inverseCovarianceInput","prediction","f","covMatrixInput","invInput","updateOutputCovariance","covarianceGS","covarianceSG","tmptmptmp","product","covarianceMod","Matrix","matrixPrototype","transpose","out","ncols","nrows","j","mat","gaussJordanInverse","transp","prod","dst","newMat","swapLines","ii","swapColumns","nc","trainingFunction","classes","labs","likelihoodWindow","__WEBPACK_IMPORTED_MODULE_5__core_multiclass_prediction_mixin__","__WEBPACK_IMPORTED_MODULE_4__core_multiclass_mixin__","GMMPredictor","reset","__WEBPACK_IMPORTED_MODULE_3__gmm_gmm_prediction_mixin__","__WEBPACK_IMPORTED_MODULE_1__core_prediction_mixin__","__WEBPACK_IMPORTED_MODULE_2__gmm_gmm_base_mixin__","instantLikelihood","predictionBasePrototype","likelihoodBuffer","__WEBPACK_IMPORTED_MODULE_1__common_circular_buffer__","capacity","lw","predict","updateResults","bufSize","buffer","circularBufferPrototype","full","idx","values","__WEBPACK_IMPORTED_MODULE_1__core_model_base_mixin__","__WEBPACK_IMPORTED_MODULE_0__common_validation__","gmmParameterSpec","required","check","specification","attr","spec","parameter","constructor","checkSpec","transform","multiClassRegressionEstimator","MulticlassPredictionBasePrototype","MulticlassPredictionBimodalPrototype","instantLikelihoods","smoothedLikelihoods","smoothedLogLikelihoods","smoothedNormalizedLikelihoods","likeliest","resetBimodal","sort","normInstant","normSmoothed","maxLogLikelihood","lab","[object Object]","instantNormalizedLikelihoods","updateRegressionResults"],"mappings":"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","file":"mars.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"mars\"] = factory();\n\telse\n\t\troot[\"mars\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b9777d392091b60d9f07","/**\n * Create the skeleton of a model\n *\n * @function\n * @param       {Number} inputDimension  input dimension\n * @param       {Number} outputDimension output dimension\n * @param       {Object} parameters      additional parameters to be copied\n * @constructor\n */\nexport default function ModelBase({\n  inputDimension,\n  outputDimension,\n  ...parameters\n}) {\n  const p = parameters;\n  delete p.bimodal;\n  delete p.inputDimension;\n  delete p.outputDimension;\n  delete p.dimension;\n  return /** @lends ModelBase */{\n    params: {\n      ...p,\n      get bimodal() {\n        return outputDimension > 0;\n      },\n      get inputDimension() {\n        return inputDimension;\n      },\n      get outputDimension() {\n        return outputDimension;\n      },\n      get dimension() {\n        return inputDimension + outputDimension;\n      },\n    },\n  };\n}\n\n/**\n * Check if an object is a base model (check for attribute existence)\n * @param  {Object}  o Source object\n * @return {Boolean}\n */\nexport function isBaseModel(o) {\n  if (!Object.keys(o).includes('params')) return false;\n  const keys = ['bimodal', 'inputDimension', 'outputDimension', 'dimension'];\n  return keys.map(key => Object.keys(o.params).includes(key))\n    .reduce((a, b) => a && b, true);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/model_base_mixin.js","import { isBaseModel } from '../core/model_base_mixin';\nimport euclidean from '../common/euclidean';\n\nconst kMeansTrainingPrototype = {\n  train(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) {\n      throw new Error('The training set is empty');\n    }\n\n    this.params.centers = Array.from(\n      Array(this.params.clusters),\n      () => new Array(this.params.dimension).fill(0),\n    );\n\n    // TODO: improve initialization =>\n    // https://www.slideshare.net/djempol/kmeans-initialization-15041920\n    //\n    if (this.trainingConfig.initialization === 'random') {\n      this.initializeClustersRandom(trainingSet);\n    } else if (this.trainingConfig.initialization === 'forgy') {\n      this.initializeClustersForgy(trainingSet);\n    } else if (this.trainingConfig.initialization === 'data') {\n      this.initClustersWithFirstPhrase(trainingSet);\n    } else {\n      throw new Error('Unknown K-Means initialization, must be `random`, `forgy` or `data`');\n    }\n\n    for (\n      let trainingNbIterations = 0;\n      trainingNbIterations < this.trainingConfig.maxIterations;\n      trainingNbIterations += 1\n    ) {\n      const previousCenters = this.params.centers;\n\n      this.updateCenters(previousCenters, trainingSet);\n\n      let meanClusterDistance = 0;\n      let maxRelativeCenterVariation = 0;\n      for (let k = 0; k < this.params.clusters; k += 1) {\n        for (let l = 0; l < this.params.clusters; l += 1) {\n          if (k !== l) {\n            meanClusterDistance += euclidean(\n              this.params.centers[k],\n              this.params.centers[l],\n            );\n          }\n        }\n        maxRelativeCenterVariation = Math.max(\n          euclidean(\n            previousCenters[k],\n            this.params.centers[k],\n          ),\n          maxRelativeCenterVariation,\n        );\n      }\n      meanClusterDistance /= this.params.clusters * (this.params.clusters - 1);\n      maxRelativeCenterVariation /= this.params.clusters;\n      maxRelativeCenterVariation /= meanClusterDistance;\n      if (maxRelativeCenterVariation < this.trainingConfig.relativeDistanceThreshold) break;\n    }\n    return this.params;\n  },\n\n  initClustersWithFirstPhrase(trainingSet) {\n    const phrase = trainingSet.getPhrase(trainingSet.indices()[0]);\n    const step = Math.floor(phrase.length / this.params.clusters);\n\n    let offset = 0;\n    for (let c = 0; c < this.params.clusters; c += 1) {\n      this.params.centers[c] = new Array(this.params.dimension).fill(0);\n      for (let t = 0; t < step; t += 1) {\n        for (let d = 0; d < this.params.dimension; d += 1) {\n          this.params.centers[c][d] += phrase.get(offset + t, d) / step;\n        }\n      }\n      offset += step;\n    }\n  },\n\n  initializeClustersRandom(trainingSet) {\n    const phrase = trainingSet.getPhrase(trainingSet.indices()[0]);\n    const indices = Array.from(\n      Array(phrase.length),\n      () => Math.floor(Math.random() * this.params.clusters),\n    );\n    const pointsPerCluster = indices.reduce(\n      (ppc, i) => {\n        const p = ppc;\n        p[i] += 1;\n        return p;\n      },\n      Array(this.params.clusters).fill(0),\n    );\n    for (let i = 0; i < indices.length; i += 1) {\n      const clustIdx = indices[i];\n      for (let d = 0; d < this.params.dimension; d += 1) {\n        this.params.centers[clustIdx][d] += phrase.get(i, d);\n      }\n    }\n    this.params.centers.forEach((_, c) => {\n      this.params.centers[c] = this.params.centers[c]\n        .map(x => x / pointsPerCluster[c]);\n    });\n  },\n\n  initializeClustersForgy(trainingSet) {\n    const phrase = trainingSet.getPhrase(trainingSet.indices()[0]);\n    const indices = Array.from(\n      Array(this.params.clusters),\n      () => Math.floor(Math.random() * phrase.length),\n    );\n    this.params.centers = indices.map(i => phrase.getFrame(i));\n  },\n\n  updateCenters(previousCenters, trainingSet) {\n    this.params.centers = Array.from(Array(this.params.clusters), () =>\n      new Array(this.params.dimension).fill(0));\n    const numFramesPerCluster = Array(this.params.clusters).fill(0);\n    trainingSet.forEach((phrase) => {\n      for (let t = 0; t < phrase.length; t += 1) {\n        const frame = phrase.getFrame(t);\n        let minDistance = euclidean(frame, previousCenters[0]);\n        let clusterMembership = 0;\n        for (let k = 1; k < this.params.clusters; k += 1) {\n          const distance = euclidean(\n            frame,\n            previousCenters[k],\n            this.params.dimension,\n          );\n          if (distance < minDistance) {\n            clusterMembership = k;\n            minDistance = distance;\n          }\n        }\n        numFramesPerCluster[clusterMembership] += 1;\n        for (let d = 0; d < this.params.dimension; d += 1) {\n          this.params.centers[clusterMembership][d] += phrase.get(t, d);\n        }\n      }\n    });\n    for (let k = 0; k < this.params.clusters; k += 1) {\n      if (numFramesPerCluster[k] > 0) {\n        for (let d = 0; d < this.params.dimension; d += 1) {\n          this.params.centers[k][d] /= numFramesPerCluster[k];\n        }\n      }\n    }\n  },\n};\n\nexport default function withKMeansTraining(\n  o,\n  clusters,\n  trainingConfiguration = {},\n) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  const trainingConfig = Object.assign({\n    initialization: 'random',\n    relativeDistanceThreshold: 1e-3,\n    minIterations: 5,\n    maxIterations: 100,\n  }, trainingConfiguration);\n  const model = Object.assign(o, kMeansTrainingPrototype, {\n    trainingConfig,\n  });\n  model.params.clusters = clusters;\n  return model;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/kmeans/kmeans_training_mixin.js","import { isBaseModel } from '../core/model_base_mixin';\n\n/**\n * GMM Base prototype\n * @type {Object}\n * @ignore\n */\nconst gmmBasePrototype = /** @lends withGMMBase */ {\n  /**\n   * Compute the likelihood of an observation given the GMM's parameters\n   * @param  {Array<Number>} observation Observation vector\n   * @return {Number}\n   */\n  likelihood(observation) {\n    let likelihood = 0;\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.beta[c] = this.componentLikelihood(observation, c);\n      likelihood += this.beta[c];\n    }\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.beta[c] /= likelihood;\n    }\n\n    return likelihood;\n  },\n\n  /**\n   * Compute the likleihood of an observation for a single component\n   * @param  {Array<Number>} observation Observation vector\n   * @param  {Number} mixtureComponent Component index\n   * @return {Number}\n   * @private\n   */\n  componentLikelihood(observation, mixtureComponent) {\n    if (mixtureComponent >= this.params.gaussians) {\n      throw new Error('The index of the Gaussian Mixture Component is out of bounds');\n    }\n    return this.params.mixtureCoeffs[mixtureComponent] *\n        this.params.components[mixtureComponent].likelihood(observation);\n  },\n};\n\n/**\n * Bimodal (regression) GMM Prototype\n * @type {Object}\n * @ignore\n */\nconst gmmBimodalPrototype = /** @lends withGMMBase */ {\n  /**\n   * Estimate the output values corresponding to the input observation, by\n   * regression given the GMM's parameters. This method is called Gaussian\n   * Mixture Regression (GMR).\n   *\n   * @param  {Array<Number>} inputObservation Observation on the input modality\n   * @return {Array<Number>} Output values (length = outputDimension)\n   */\n  regression(inputObservation) {\n    this.results.outputValues = Array(this.params.outputDimension).fill(0);\n    this.results.outputCovariance = Array(this.params.covarianceMode === 'full' ? this.params.outputDimension ** 2 : this.params.outputDimension).fill(0);\n    let tmpOutputValues;\n\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      tmpOutputValues = this.params.components[c].regression(inputObservation);\n      for (let d = 0; d < this.params.outputDimension; d += 1) {\n        this.results.outputValues[d] += this.beta[c] * tmpOutputValues[d];\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.outputDimension; d2 += 1) {\n            this.results.outputCovariance[(d * this.params.outputDimension) + d2] +=\n              (this.beta[c] ** 2) *\n              this.params.components[c].outputCovariance[(d * this.params.outputDimension) + d2];\n          }\n        } else {\n          this.results.outputCovariance[d] +=\n            (this.beta[c] ** 2) * this.params.components[c].outputCovariance[d];\n        }\n      }\n    }\n    return this.results.outputValues;\n  },\n};\n\n/**\n * Add basic GMM capabilities to a single-class model. This enables the\n * computation of the likelihoods and regression operations common to\n * training and prediction\n *\n * @see withGMMTraining\n * @see withGMMPrediction\n *\n * @param  {ModelBase} o Source Model\n * @return {GMMBaseModel}\n *\n * @throws {Error} is o is not a ModelBase\n */\nexport default function withGMMBase(o) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  return Object.assign(\n    o,\n    gmmBasePrototype,\n    o.params.bimodal ? gmmBimodalPrototype : {},\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/gmm/gmm_base_mixin.js","import ModelBase from './model_base_mixin';\n\n/**\n * Multiclass Models Mixin\n * @type {Object}\n * @ignore\n */\nconst MulticlassBasePrototype = /** @lends MulticlassModelBase */{\n  /**\n   * Get the number of classes in the model\n   * @return {number} number of classes\n   */\n  size() {\n    return this.models.size;\n  },\n\n  /**\n   * Check if a class with the given label exists\n   * @param  {string} label Class label\n   * @return {boolean}\n   */\n  includes(label) {\n    return Object.keys(this.models).includes(label);\n  },\n\n  /**\n   * Remove a class by label\n   * @param  {string} label Class label\n   */\n  remove(label) {\n    if (this.includes(label)) {\n      delete this.models[label];\n    }\n  },\n};\n\n/**\n * Create an abstract Multiclass Model\n * @param       {number]} inputDimension  input dimension\n * @param       {number]} outputDimension output dimension\n * @param       {Object} parameters       additional parameters to copy\n * @function\n */\nexport default function MulticlassModelBase({\n  inputDimension,\n  outputDimension,\n  ...parameters\n}) {\n  return Object.assign(\n    ModelBase({ inputDimension, outputDimension, ...parameters }),\n    MulticlassBasePrototype,\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/multiclass_mixin.js","import Phrase from './phrase';\n\n/**\n * Training Set Prototype\n * @ignore\n */\nconst trainingSetPrototype = /** @lends TrainingSet */ {\n  /**\n   * Get the training set size (number of phrases)\n   * @return {number}\n   */\n  size() {\n    return Object.keys(this.phrases).length;\n  },\n\n  /**\n   * Checks if the training set is empty\n   * @return {boolean}\n   */\n  empty() {\n    return this.length === 0;\n  },\n\n  /**\n   * Get a reference to a phrase by index\n   * @param  {number} phraseIndex phrase index\n   * @return {Phrase}\n   */\n  getPhrase(phraseIndex) {\n    if (Object.keys(this.phrases).includes(phraseIndex.toString())) {\n      return this.phrases[phraseIndex.toString()];\n    }\n    return null;\n  },\n\n  /**\n   * Iterate over all phrases in the training set. The callback function\n   * should take 3 arguments: the phrase, its index in the training set,\n   * and the phrases structure.\n   *\n   * @param  {Function} callback Callback function\n   */\n  forEach(callback) {\n    Object.keys(this.phrases).forEach((phraseIndex) => {\n      callback(this.phrases[phraseIndex], phraseIndex, this.phrases);\n    });\n  },\n\n  /**\n   * Add a phrase to the training set and return it.\n   * @param  {number} phraseIndex        phrase index\n   * @param  {string} [label=undefined]  phrase label (its index if undefined)\n   * @param  {Phrase} [phrase=undefined] Phrase data. If unspecified, an empty\n   * phrase is created.\n   * @return {Phrase}\n   */\n  push(phraseIndex, label = undefined, phrase = undefined) {\n    const p = (phrase !== undefined) ? phrase : Phrase({\n      inputDimension: this.inputDimension,\n      outputDimension: this.outputDimension,\n      columnNames: this.columnNames,\n      label: (label !== undefined) ? label : phraseIndex.toString(),\n    });\n    this.phrases[phraseIndex] = p;\n    return p;\n  },\n\n  /**\n   * Remove a phrase\n   * @param  {number} phraseIndex phrase index\n   */\n  remove(phraseIndex) {\n    delete this.phrases[phraseIndex];\n  },\n\n  /**\n   * Remove all phrases with a given label\n   * @param  {string} label class label\n   */\n  removeClass(label) {\n    this.phrases = Object.keys(this.phrases)\n      .filter(i => this.phrases[i].label !== label)\n      .map(i => ({ i: this.phrases[i] }))\n      .reduce((x, p) => ({ ...x, ...p }), {});\n  },\n\n  /**\n   * Clear the training set (delete all phrases)\n   */\n  clear() {\n    this.phrases = {};\n  },\n\n  /**\n   * Get the sub-training set composed of all phrases of a given class\n   * @param  {string} label class label\n   * @return {TrainingSet}\n   */\n  getPhrasesOfClass(label) {\n    const ts = TrainingSet(this); // eslint-disable-line no-use-before-define\n    ts.phrases = Object.keys(this.phrases)\n      .filter(i => this.phrases[i].label === label)\n      .map(i => ({ i: this.phrases[i] }))\n      .reduce((x, p) => ({ ...x, ...p }), {});\n    return ts;\n  },\n\n  /**\n   * Get the list of unique labels in the training set\n   * @return {Array<string>}\n   */\n  labels() {\n    return Object.keys(this.phrases)\n      .map(i => this.phrases[i].label)\n      .reduce((ll, x) => (ll.includes(x) ? ll : ll.concat([x])), []);\n  },\n\n  /**\n   * Get the list of phrase indices\n   * @return {Array<number>}\n   */\n  indices() {\n    return Object.keys(this.phrases);\n  },\n\n  /**\n   * Get the mean of the training set over all phrases\n   * @return {Array<number>} mean (same dimension as the training set)\n   */\n  mean() {\n    const sum = Array(this.dimension).fill(0);\n    let totalLength = 0;\n    Object.keys(this.phrases).forEach((i) => {\n      for (let d = 0; d < this.dimension; d += 1) {\n        for (let t = 0; t < this.phrases[i].length; t += 1) {\n          sum[d] += this.phrases[i].get(t, d);\n        }\n      }\n      totalLength += this.phrases[i].length;\n    });\n\n    return sum.map(x => x / totalLength);\n  },\n\n  /**\n   * Get the standard deviation of the training set over all phrases\n   * @return {Array<number>} standard deviation (same dimension as the training set)\n   */\n  standardDeviation() {\n    const stddev = Array(this.dimension).fill(0);\n    const mean = this.mean();\n    let totalLength = 0;\n    Object.keys(this.phrases).forEach((i) => {\n      for (let d = 0; d < this.dimension; d += 1) {\n        for (let t = 0; t < this.phrases[i].length; t += 1) {\n          stddev[d] += (this.phrases[i].get(t, d) - mean[d]) ** 2;\n        }\n      }\n      totalLength += this.phrases[i].length;\n    });\n\n    return stddev.map(x => Math.sqrt(x / totalLength));\n  },\n\n  /**\n   * Get the min and max of the training set over all phrases\n   * @return {Array<{ min: number, max: number }>} min/max (same dimension as the training set)\n   */\n  minmax() {\n    const minmax = Array.from(\n      Array(this.dimension),\n      () => ({ min: +Infinity, max: -Infinity }),\n    );\n    Object.keys(this.phrases).forEach((i) => {\n      for (let d = 0; d < this.dimension; d += 1) {\n        for (let t = 0; t < this.phrases[i].length; t += 1) {\n          minmax[d].min += Math.min(minmax[d].min, this.phrases[i].get(t, d));\n          minmax[d].max += Math.max(minmax[d].max, this.phrases[i].get(t, d));\n        }\n      }\n    });\n    return minmax;\n  },\n};\n\n/**\n * Create a Training set, composed of a set of indexed data phrases\n * @param {Object} [params]                   Training set parameters\n * @param {Number} [params.inputDimension=1]  Dimension of the input modality\n * @param {Number} [params.outputDimension=0] Dimension of the output modality\n * (optional)\n * @param {Array<String>} [params.columnNames=null] Data column names, e.g.\n * \\['accX', 'accY', 'accZ'\\] (optional)\n * @return {TrainingSet}\n * @function\n *\n * @property {Boolean} bimodal Specifies if the training set is bimodal\n * @property {Number}  inputDimension Dimension of the input modality\n * @property {Number}  outputDimension Dimension of the output modality\n * @property {Number}  dimension Total dimension\n * @property {Array<String>} columnNames Columns names\n */\nexport default function TrainingSet({\n  inputDimension = 1,\n  outputDimension = 0,\n  columnNames = null,\n} = {}) {\n  const dimension = inputDimension + outputDimension;\n  return Object.assign(\n    Object.create(trainingSetPrototype),\n    {\n      bimodal: outputDimension > 0,\n      inputDimension,\n      outputDimension,\n      dimension,\n      columnNames: columnNames || Array(dimension).fill(''),\n      phrases: {},\n    },\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/training_set/index.js","/**\n * Data Phrase Prototype\n * @ignore\n */\nconst phrasePrototype = /** @lends Phrase */ {\n  /**\n   * Get the value at a given index and dimension\n   * @param  {Number} index index\n   * @param  {Number} dim   dimension\n   * @return {Number}\n   */\n  get(index, dim) {\n    if (typeof index !== 'number' || Math.floor(index) !== index) {\n      throw new Error('The index must be an integer');\n    }\n    if (dim >= this.dimension) {\n      throw new Error('Phrase: dimension out of bounds');\n    }\n    if (this.bimodal) {\n      if (dim < this.inputDimension) {\n        if (index >= this.inputData.length) {\n          throw new Error('Phrase: index out of bounds');\n        }\n        return this.inputData[index][dim];\n      }\n      if (index >= this.outputData.length) {\n        throw new Error('Phrase: index out of bounds');\n      }\n      return this.outputData[index][dim - this.inputDimension];\n    }\n    if (index >= this.length) {\n      throw new Error('Phrase: index out of bounds');\n    }\n    if (!this.inputData[index]) {\n      throw new Error('WTF?');\n    }\n    return this.inputData[index][dim];\n  },\n\n  /**\n   * Get the data frame at a given index\n   * @param  {Number} index index\n   * @return {Array<number>}\n   * @throws {Error} if the index is out of bounds\n   */\n  getFrame(index) {\n    if (index >= this.length) {\n      throw new Error('Phrase: index out of bounds');\n    }\n    if (this.bimodal) {\n      return this.inputData[index].concat(this.outputData[index]);\n    }\n    return this.inputData[index];\n  },\n\n  /**\n   * Push an observation vector to the phrase\n   * @param  {Array<number>} observation observation data\n   * @throws {Error} if the observation's dimension does not match the\n   * dimension of the training set\n   */\n  push(observation) {\n    // console.log('push:', observation);\n    if (observation.length !== this.dimension) {\n      throw new Error('Observation has wrong dimension');\n    }\n\n    if (this.bimodal) {\n      this.inputData.push(observation.slice(0, this.inputDimension));\n      this.outputData.push(observation.slice(this.inputDimension, this.dimension));\n    } else {\n      this.inputData.push(observation);\n    }\n\n    this.length += 1;\n  },\n\n  /**\n   * Push an observation to the input modality only\n   * @param  {Array<number>} observation observation data\n   * @throws {Error} if the phrase is not bimodal\n   * @throws {Error} if the observation's dimension does not match the\n   * input dimension of the training set\n   */\n  pushInput(observation) {\n    if (!this.bimodal) {\n      throw new Error('this phrase is unimodal, use `push`');\n    }\n    if (observation.size() !== this.inputDimension) {\n      throw new Error('Observation has wrong dimension');\n    }\n\n    this.inputData.push(observation);\n    this.trim();\n  },\n\n  /**\n   * Push an observation to the output modality only\n   * @param  {Array<number>} observation observation data\n   * @throws {Error} if the phrase is not bimodal\n   * @throws {Error} if the observation's dimension does not match the\n   * output dimension of the training set\n   */\n  pushOutput(observation) {\n    if (!this.bimodal) {\n      throw new Error('this phrase is unimodal, use `push`');\n    }\n    if (observation.size() !== this.outputDimension) {\n      throw new Error('Observation has wrong dimension');\n    }\n\n    this.outputData.push(observation);\n    this.trim();\n  },\n\n  /**\n   * Clear the phrase's data\n   */\n  clear() {\n    this.length = 0;\n    this.inputData = [];\n    this.outputData = [];\n  },\n\n  /**\n   * Clear the phrase's input data\n   */\n  clearInput() {\n    this.inputData = [];\n    this.trim();\n  },\n\n  /**\n   * Clear the phrase's output data\n   */\n  clearOutput() {\n    this.outputData = [];\n    this.trim();\n  },\n\n  /**\n   * Compute the mean of the phrase (across time)\n   * @return {Array<number>} The mean vector (same dimension as the\n   * training set)\n   */\n  mean() {\n    const mean = Array(this.dimension).fill(0);\n    for (let d = 0; d < this.dimension; d += 1) {\n      for (let t = 0; t < this.length; t += 1) {\n        mean[d] += this.get(t, d);\n      }\n      mean[d] /= this.length;\n    }\n    return mean;\n  },\n\n  /**\n   * Compute the standard deviation of the phrase (across time)\n   * @return {Array<number>} The standard deviation vector (same dimension as\n   * the training set)\n   */\n  standardDeviation() {\n    const stddev = Array(this.dimension).fill(0);\n    const mean = this.mean();\n    for (let d = 0; d < this.dimension; d += 1) {\n      for (let t = 0; t < this.length; t += 1) {\n        stddev[d] += (this.get(t, d) - mean[d]) * (this.get(t, d) - mean[d]);\n      }\n      stddev[d] /= this.length;\n      stddev[d] = Math.sqrt(stddev[d]);\n    }\n    return stddev;\n  },\n\n  /**\n   * Compute the minimum and maximum of the phrase (across time)\n   * @return {Array<{ min: number, max: number }>} The min/max vector (same\n   * dimension as the training set)\n   */\n  minmax() {\n    const minmax = Array.from(\n      Array(this.dimension),\n      () => ({ min: +Infinity, max: -Infinity }),\n    );\n    for (let d = 0; d < this.dimension; d += 1) {\n      for (let t = 0; t < this.length; t += 1) {\n        minmax[d].min = Math.min(this.get(t, d), minmax[d].min);\n        minmax[d].max = Math.max(this.get(t, d), minmax[d].max);\n      }\n    }\n    return minmax;\n  },\n\n  /**\n   * Trim the phrase length to the minimum of the input and output lengths\n   * @private\n   */\n  trim() {\n    if (this.bimodal) {\n      this.length = Math.min(this.inputData.length, this.outputData.length);\n    }\n  },\n};\n\n/**\n * Create a data phrase, potentially bimodal. Phrases are data structures for\n * temporal data (e.g. gestures), used to constitute training sets.\n *\n * @param {Object} [params]                   Phrase parameters\n * @param {Number} [params.inputDimension=1]  Dimension of the input modality\n * @param {Number} [params.outputDimension=0] Dimension of the output modality\n * (optional)\n * @param {Array<String>} [params.columnNames=null] Data column names, e.g.\n * \\['accX', 'accY', 'accZ'\\] (optional)\n * @param {String} [params.label='']          Phrase label\n * @return {Phrase}\n * @function\n *\n * @property {Boolean} bimodal Specifies if the phrase is bimodal\n * @property {Number} inputDimension Dimension of the input modality\n * @property {Number} outputDimension Dimension of the output modality\n * @property {Number} dimension Total dimension\n * @property {Number} length Phrase length (number of frames)\n * @property {String} label Phrase label\n * @property {Array<String>} columnNames Columns names\n */\nexport default function Phrase({\n  inputDimension = 1,\n  outputDimension = 0,\n  columnNames = null,\n  label = '',\n} = {}) {\n  const dimension = inputDimension + outputDimension;\n  return Object.assign(\n    Object.create(phrasePrototype),\n    {\n      bimodal: outputDimension > 0,\n      inputDimension,\n      outputDimension,\n      dimension,\n      length: 0,\n      label,\n      inputData: [],\n      outputData: [],\n      columnNames: columnNames || Array(dimension).fill(''),\n    },\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/training_set/phrase.js","import ModelBase from './core/model_base_mixin';\nimport withKMeansTraining from './kmeans/kmeans_training_mixin';\nimport withEMTraining from './core/em_training_mixin';\nimport withGMMBase from './gmm/gmm_base_mixin';\nimport withGMMTraining from './gmm/gmm_training_mixin';\nimport MulticlassModelbase from './core/multiclass_mixin';\nimport withMulticlassTraining from './core/multiclass_training_mixin';\n\n/**\n * @typedef {Object} GMMParameters\n * @property {Boolean} bimodal Specifies if the model is bimodal\n * @property {Number} inputDimension Dimension of the input modality\n * @property {Number} outputDimension Dimension of the output modality\n * @property {Number} dimension Total dimension\n * @property {Number} gaussians Number of gaussian components in the mixture\n * @property {String} covarianceMode Covariance mode ('full' or 'diagonal')\n * @property {Array<Number>} mixtureCoeffs mixture coefficients ('weight' of\n * each gaussian component)\n * @property {Array<GaussianDistribution>} components Gaussian components\n */\n\n/**\n * Train a K-Means model.\n *\n * @todo K-Means details\n *\n * @param  {TrainingSet} trainingSet           training set\n * @param  {number} clusters                   Number of clusters\n * @param  {Object} [trainingConfig=undefined] Training configuration\n * @return {Object}                            K-Means parameters\n */\nexport function trainKmeans(\n  trainingSet,\n  clusters,\n  trainingConfig = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const model = withKMeansTraining(\n    ModelBase({\n      inputDimension,\n      outputDimension,\n    }),\n    clusters,\n    trainingConfig,\n  );\n  return model.train(trainingSet);\n}\n\n/**\n * Train a single-class GMM Model.\n *\n * @todo GMM details\n *\n * @param  {TrainingSet} trainingSet                training set\n * @param  {Object} configuration                   Training configuration\n * @param  {Object} [convergenceCriteria=undefined] Convergence criteria of the\n * EM algorithm\n * @return {GMMParameters} Parameters of the trained GMM\n */\nexport function trainGMM(\n  trainingSet,\n  configuration,\n  convergenceCriteria = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const { gaussians, regularization, covarianceMode } = configuration;\n  const model = withGMMTraining(\n    withEMTraining(\n      withGMMBase(ModelBase({\n        inputDimension,\n        outputDimension,\n        ...configuration,\n      })),\n      convergenceCriteria,\n    ),\n    gaussians,\n    regularization,\n    covarianceMode,\n  );\n  return model.train(trainingSet);\n}\n\n/**\n * Train a multi-class GMM Model.\n *\n * @todo GMM details\n *\n * @param  {TrainingSet} trainingSet                training set\n * @param  {Object} configuration                   Training configuration\n * @param  {Object} [convergenceCriteria=undefined] Convergence criteria of the\n * EM algorithm\n * @return {Object} Parameters of the trained GMM\n */\nexport function trainMulticlassGMM(\n  trainingSet,\n  configuration,\n  convergenceCriteria = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const model = withMulticlassTraining(\n    MulticlassModelbase({ inputDimension, outputDimension, ...configuration }),\n    ts => trainGMM(ts, configuration, convergenceCriteria),\n  );\n  return model.train(trainingSet);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/train.js","/**\n * Compute the euclidean distance between to vectors\n * @param  {Array} v1\n * @param  {Array} v2\n * @return {number}\n */\nexport default function euclidean(v1, v2) {\n  return Math.sqrt(v1\n    .map((x1, i) => (x1 - v2[i]) ** 2)\n    .reduce((a, x) => (a + x), 0));\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/euclidean.js","const trainerPrototype = /** @lends withEMTraining */ {\n  /**\n   * Train the model from the given training set, using the\n   * Expectation-Maximisation algorithm.\n   *\n   * @param  {TrainingSet} trainingSet Training Set\n   * @return {Object} Parameters of the trained model\n   */\n  train(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) {\n      throw new Error('The training set is empty');\n    }\n\n    this.initTraining(trainingSet);\n\n    let logLikelihood = -Infinity;\n    let iterations = 0;\n    let previousLogLikelihood = logLikelihood;\n\n    while (!this.converged(iterations, logLikelihood, previousLogLikelihood)) {\n      previousLogLikelihood = logLikelihood;\n      logLikelihood = this.updateTraining(trainingSet);\n\n      const pctChg =\n        100 * Math.abs((logLikelihood - previousLogLikelihood) / previousLogLikelihood);\n      if (Number.isNaN(pctChg) && iterations > 1) {\n        throw new Error('An error occured during training');\n      }\n\n      iterations += 1;\n    }\n\n    this.terminateTraining();\n    return this.params;\n  },\n\n  /**\n   * Return `true` if the training has converged according to the criteria\n   * specified at the creation\n   *\n   * @param  {number} iteration       Current iteration\n   * @param  {number} logProb         Current log-likelihood of the training set\n   * @param  {number} previousLogProb Previous log-likelihood of the training\n   * set\n   * @return {boolean}\n   *\n   * @private\n   */\n  converged(iteration, logProb, previousLogProb) {\n    if (iteration >= this.convergenceCriteria.maxIterations) return true;\n    if (this.convergenceCriteria.maxIterations >= this.convergenceCriteria.minIterations) {\n      return iteration >= this.convergenceCriteria.maxIterations;\n    }\n    if (iteration < this.convergenceCriteria.minIterations) return false;\n    const percentChange = 100 * Math.abs((logProb - previousLogProb) / logProb);\n    return percentChange <= this.convergenceCriteria.percentChange;\n  },\n};\n\n/**\n * Add ABSTRACT training capabilities to a model for which the training process\n * use the Expectation-Maximisation (EM) algorithm. This is used in particular\n * for training GMMs and HMMs.\n *\n * The final instance needs to implement `initTraining`, `updateTraining` and\n * `terminateTraining` methods. `updateTraining` will be called until the\n * convergence criteria are met. Convergence depends on\n * - A minimum number of iterations\n * - A maximum number of iterations\n * - A threshold on the relative change of the log-likelihood of the training\n * data between successive iterations.\n *\n * @todo details\n *\n * @param  {Object} [o]                   Source object\n * @param  {Object} [convergenceCriteria] Set of convergence criteria\n * @param  {number} [convergenceCriteria.percentChange=1e-3] Threshold in % of\n * the relative change of the log-likelihood, under which the training stops.\n * @param  {number} [convergenceCriteria.minIterations=5]    minimum number of iterations\n * @param  {number} [convergenceCriteria.maxIterations=100]  maximum number of iterations\n * @return {Object}\n */\nexport default function withEMTraining(\n  o,\n  convergenceCriteria = {\n    percentChange: 1e-3,\n    minIterations: 5,\n    maxIterations: 100,\n  },\n) {\n  return Object.assign(o, trainerPrototype, { convergenceCriteria });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/em_training_mixin.js","import ModelBase from '../core/model_base_mixin';\nimport withKMeansTraining from '../kmeans/kmeans_training_mixin';\nimport GaussianDistribution from '../common/gaussian_distribution';\n\n/**\n * GMM Training Prototype\n * @type {Object}\n * @ignore\n */\nconst gmmTrainerPrototype = /** @lends withGMMTraining */ {\n  /**\n   * Initialize the EM Training process\n   * @param  {TrainingSet} trainingSet Training set\n   */\n  initTraining(trainingSet) {\n    this.allocate();\n    this.initParametersToDefault(trainingSet.standardDeviation());\n    this.initMeansWithKMeans(trainingSet);\n    this.initCovariances(trainingSet);\n    this.addCovarianceOffset();\n    this.updateInverseCovariances();\n  },\n\n  /**\n   * Allocate the training variables\n   * @private\n   */\n  allocate() {\n    this.params.components = Array.from(\n      Array(this.params.gaussians),\n      () => new GaussianDistribution(\n        this.params.inputDimension,\n        this.params.outputDimension,\n        this.params.covarianceMode,\n      ),\n    );\n    this.params.mixtureCoeffs = Array(this.params.gaussians).fill(0);\n  },\n\n  /**\n   * Initialize the model parameters to their default values\n   * @param  {Array<Number>} dataStddev Standard deviation of the training data\n   * @private\n   */\n  initParametersToDefault(dataStddev) {\n    let normCoeffs = 0;\n    this.currentRegularization = dataStddev.map(std => Math.max(\n      this.params.regularization.absolute,\n      this.params.regularization.relative * std,\n    ));\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      if (this.params.covarianceMode === 'full') {\n        this.params.components[c].covariance = Array(this.params.dimension ** 2)\n          .fill(this.params.regularization.absolute / 2);\n      } else {\n        this.params.components[c].covariance = Array(this.params.dimension).fill(0);\n      }\n      this.params.components[c].regularize(this.currentRegularization);\n      this.params.mixtureCoeffs[c] = 1 / this.params.gaussians;\n      normCoeffs += this.params.mixtureCoeffs[c];\n    }\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.params.mixtureCoeffs[c] /= normCoeffs;\n    }\n  },\n\n  /**\n   * Initialize the means of the model using a K-Means algorithm\n   *\n   * @see withKMeansTraining\n   *\n   * @param  {TrainingSet} trainingSet training set\n   * @private\n   */\n  initMeansWithKMeans(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) return;\n    const kmeans = withKMeansTraining(\n      ModelBase({\n        inputDimension: this.params.inputDimension,\n        outputDimension: this.params.outputDimension,\n      }),\n      this.params.gaussians,\n      { initialization: 'random' },\n    );\n    const kmeansParams = kmeans.train(trainingSet);\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.params.components[c].mean = kmeansParams.centers[c];\n    }\n  },\n\n  /**\n   * Initialize the covariances of the model from the training set\n   *\n   * @param  {TrainingSet} trainingSet training set\n   * @private\n   */\n  initCovariances(trainingSet) {\n    // TODO: simplify with covariance symmetricity\n    // TODO: If Kmeans, covariances from cluster members\n    if (!trainingSet || trainingSet.empty()) return;\n\n    for (let n = 0; n < this.params.gaussians; n += 1) {\n      this.params.components[n].covariance = Array((this.params.covarianceMode === 'full') ? this.params.dimension ** 2 : this.params.dimension).fill(0);\n    }\n\n    const gmeans = Array(this.params.gaussians * this.params.dimension).fill(0);\n    const factor = Array(this.params.gaussians).fill(0);\n    trainingSet.forEach((phrase) => {\n      const step = Math.floor(phrase.length / this.params.gaussians);\n      let offset = 0;\n      for (let n = 0; n < this.params.gaussians; n += 1) {\n        for (let t = 0; t < step; t += 1) {\n          for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n            gmeans[(n * this.params.dimension) + d1] += phrase.get(offset + t, d1);\n            if (this.params.covarianceMode === 'full') {\n              for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n                this.params.components[n]\n                  .covariance[(d1 * this.params.dimension) + d2] +=\n                  phrase.get(offset + t, d1) * phrase.get(offset + t, d2);\n              }\n            } else {\n              this.params.components[n].covariance[d1] +=\n                phrase.get(offset + t, d1) ** 2;\n            }\n          }\n        }\n        offset += step;\n        factor[n] += step;\n      }\n    });\n\n    for (let n = 0; n < this.params.gaussians; n += 1) {\n      for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n        gmeans[(n * this.params.dimension) + d1] /= factor[n];\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n            this.params.components[n].covariance[(d1 * this.params.dimension) + d2] /= factor[n];\n          }\n        } else {\n          this.params.components[n].covariance[d1] /= factor[n];\n        }\n      }\n    }\n\n    for (let n = 0; n < this.params.gaussians; n += 1) {\n      for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n            this.params.components[n].covariance[(d1 * this.params.dimension) + d2] -=\n              gmeans[(n * this.params.dimension) + d1] *\n              gmeans[(n * this.params.dimension) + d2];\n          }\n        } else {\n          this.params.components[n].covariance[d1] -=\n            gmeans[(n * this.params.dimension) + d1] ** 2;\n        }\n      }\n    }\n  },\n\n  /**\n   * Regularize the covariances\n   * @private\n   */\n  addCovarianceOffset() {\n    this.params.components.forEach((c) => {\n      c.regularize(this.currentRegularization);\n    });\n  },\n\n  /**\n   * Update the inverse covariance of each Gaussian component\n   * @private\n   */\n  updateInverseCovariances() {\n    this.params.components.forEach((c) => {\n      c.updateInverseCovariance();\n    });\n    try {\n      this.params.components.forEach((c) => {\n        c.updateInverseCovariance();\n      });\n    } catch (e) {\n      throw new Error('Matrix inversion error: varianceoffset must be too small');\n    }\n  },\n\n  /**\n   * Update the EM Training process (1 EM iteration).\n   * @param  TrainingSet trainingSet training set\n   */\n  updateTraining(trainingSet) {\n    let logProb = 0;\n    let totalLength = 0;\n    trainingSet.forEach((phrase) => {\n      totalLength += phrase.length;\n    });\n    const phraseIndices = Object.keys(trainingSet.phrases);\n\n    const p = Array.from(\n      Array(this.params.gaussians),\n      () => new Array(totalLength).fill(0),\n    );\n    const E = Array(this.params.gaussians).fill(0);\n    let tbase = 0;\n\n    trainingSet.forEach((phrase) => {\n      for (let t = 0; t < phrase.length; t += 1) {\n        let normConst = 0;\n        for (let c = 0; c < this.params.gaussians; c += 1) {\n          p[c][tbase + t] = this.componentLikelihood(phrase.getFrame(t), c);\n\n          if (p[c][tbase + t] === 0 ||\n            Number.isNaN(p[c][tbase + t]) ||\n            p[c][tbase + t] === +Infinity) {\n            p[c][tbase + t] = 1e-100;\n          }\n          normConst += p[c][tbase + t];\n        }\n        for (let c = 0; c < this.params.gaussians; c += 1) {\n          p[c][tbase + t] /= normConst;\n          E[c] += p[c][tbase + t];\n        }\n        logProb += Math.log(normConst);\n      }\n      tbase += phrase.length;\n    });\n\n    // Estimate Mixture coefficients\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.params.mixtureCoeffs[c] = E[c] / totalLength;\n    }\n\n    // Estimate means\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      for (let d = 0; d < this.params.dimension; d += 1) {\n        this.params.components[c].mean[d] = 0;\n        tbase = 0;\n        for (let pix = 0; pix < phraseIndices.length; pix += 1) {\n          const phrase = trainingSet.phrases[phraseIndices[pix]];\n          for (let t = 0; t < phrase.length; t += 1) {\n            this.params.components[c].mean[d] +=\n              p[c][tbase + t] * phrase.get(t, d);\n          }\n          tbase += phrase.length;\n        }\n        this.params.components[c].mean[d] /= E[c];\n      }\n    }\n\n    // estimate covariances\n    if (this.params.covarianceMode === 'full') {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n          for (let d2 = d1; d2 < this.params.dimension; d2 += 1) {\n            this.params.components[c].covariance[(d1 * this.params.dimension) + d2] = 0;\n            tbase = 0;\n            for (let pix = 0; pix < phraseIndices.length; pix += 1) {\n              const phrase = trainingSet.phrases[phraseIndices[pix]];\n              for (let t = 0; t < phrase.length; t += 1) {\n                this.params.components[c].covariance[(d1 * this.params.dimension) + d2] +=\n                  p[c][tbase + t] *\n                  (phrase.get(t, d1) - this.params.components[c].mean[d1]) *\n                  (phrase.get(t, d2) - this.params.components[c].mean[d2]);\n              }\n              tbase += phrase.length;\n            }\n            this.params.components[c].covariance[(d1 * this.params.dimension) + d2] /= E[c];\n            if (d1 !== d2) {\n              this.params.components[c].covariance[(d2 * this.params.dimension) + d1] =\n                this.params.components[c].covariance[(d1 * this.params.dimension) + d2];\n            }\n          }\n        }\n      }\n    } else {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n          this.params.components[c].covariance[d1] = 0;\n          tbase = 0;\n          for (let pix = 0; pix < phraseIndices.length; pix += 1) {\n            const phrase = trainingSet.phrases[phraseIndices[pix]];\n            for (let t = 0; t < phrase.length; t += 1) {\n              const value = (phrase.get(t, d1) - this.params.components[c].mean[d1]);\n              this.params.components[c].covariance[d1] +=\n                    p[c][tbase + t] * value * value;\n            }\n            tbase += phrase.length;\n          }\n          this.params.components[c].covariance[d1] /= E[c];\n        }\n      }\n    }\n\n    this.addCovarianceOffset();\n    this.updateInverseCovariances();\n\n    return logProb;\n  },\n\n  /**\n   * Normalize the mixing coefficients of the Gaussian mixture\n   */\n  normalizeMixtureCoeffs() {\n    let normConst = 0;\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      normConst += this.params.mixtureCoeffs[c];\n    }\n    if (normConst > 0) {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.params.mixtureCoeffs[c] /= normConst;\n      }\n    } else {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.params.mixtureCoeffs[c] = 1 / this.params.gaussians;\n      }\n    }\n  },\n\n  /**\n   * Terminate the EM Training process\n   */\n  terminateTraining() {},\n};\n\n/**\n * Add GMM Training capabilities to a GMM Model\n * @param  {GMMBase} o               Source GMM Model\n * @param  {Number} [gaussians=1]    Number of Gaussian components\n * @param  {Object} [regularization] Regularization parameters\n * @param  {Number} [regularization.absolute=1e-3] Absolute regularization\n * @param  {Number} [regularization.relative=1e-2] Relative Regularization\n (relative to the training set's variance along each dimension)\n * @param  {String} [covarianceMode='full'] Covariance mode ('full' or diagonal)\n * @return {BMMBase}\n */\nexport default function withGMMTraining(\n  o,\n  gaussians = 1,\n  regularization = { absolute: 1e-3, relative: 1e-2 },\n  covarianceMode = 'full',\n) {\n  if (!Object.keys(o).includes('params')) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  return Object.assign(\n    o,\n    gmmTrainerPrototype,\n    {\n      params: {\n        ...o.params,\n        gaussians,\n        regularization,\n        covarianceMode,\n      },\n    },\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/gmm/gmm_training_mixin.js","import Matrix from './matrix';\n\n/**\n * Gaussian Distribution Prototype\n *\n * @type {Object}\n * @property {boolean} bimodal           Specifies if the distribution is\n * bimodal (for regression use)\n * @property {number}  inputDimension    input dimension\n * @property {number}  outputDimension   output dimension\n * @property {number}  dimension         Total dimension\n * @property {Array}   mean              Distribution mean\n * @property {Array}   covariance        Distribution covariance\n * @property {Array}   inverseCovariance Inverse covariance\n *\n * @ignore\n */\nconst baseGaussianPrototype = /** @lends GaussianDistribution */ {\n  /**\n   * Allocate the distribution\n   * @private\n   */\n  allocate() {\n    this.mean = new Array(this.dimension).fill(0);\n    if (this.covarianceMode === 'full') {\n      this.covariance = new Array(this.dimension ** 2).fill(0);\n      this.inverseCovariance = new Array(this.dimension ** 2).fill(0);\n    } else {\n      this.covariance = new Array(this.dimension).fill(0);\n      this.inverseCovariance = new Array(this.dimension).fill(0);\n    }\n    if (this.bimodal) {\n      this.allocateBimodal();\n    }\n  },\n\n  /**\n   * @brief Estimate the likelihood of an observation vector.\n   *\n   * If the distribution is bimodal an the observation is a vector of the size\n   * of the input modality, the likelihood is computed only on the\n   * distribution for the input modality\n   *\n   * @param  {array} observation data observation\n   * @return {number}\n   */\n  likelihood(observation) {\n    if (this.covarianceDeterminant === 0) {\n      throw new Error('Covariance Matrix is not invertible');\n    }\n    if (this.bimodal && observation.length === this.inputDimension) {\n      return this.inputLikelihood(observation);\n    }\n    if (observation.length !== this.dimension) {\n      throw new Error(`GaussianDistribution: observation has wrong dimension. Expected \\`${this.dimension}\\`, got \\`${observation.length}\\``);\n    }\n\n    let euclideanDistance = 0;\n    if (this.covarianceMode === 'full') {\n      for (let l = 0; l < this.dimension; l += 1) {\n        let tmp = 0;\n        for (let k = 0; k < this.dimension; k += 1) {\n          tmp += this.inverseCovariance[(l * this.dimension) + k] *\n            (observation[k] - this.mean[k]);\n        }\n        euclideanDistance += (observation[l] - this.mean[l]) * tmp;\n      }\n    } else {\n      for (let l = 0; l < this.dimension; l += 1) {\n        euclideanDistance += this.inverseCovariance[l] *\n          (observation[l] - this.mean[l]) *\n          (observation[l] - this.mean[l]);\n      }\n    }\n\n    let p = Math.exp(-0.5 * euclideanDistance) /\n      Math.sqrt(this.covarianceDeterminant * ((2 * Math.PI) ** this.dimension));\n\n    if (p < 1e-180 || Number.isNaN(p) || Math.abs(p) === +Infinity) {\n      p = 1e-180;\n    }\n\n    return p;\n  },\n\n  /**\n   * Regularize the distribution, given a regularization vector of the same\n   * dimension. Regularization adds the vector to the variance of the\n   * distribution.\n   *\n   * @param  {Array} regularization regularization vector\n   */\n  regularize(regularization) {\n    if (this.covarianceMode === 'full') {\n      for (let d = 0; d < this.dimension; d += 1) {\n        this.covariance[(d * this.dimension) + d] += regularization[d];\n      }\n    } else {\n      for (let d = 0; d < this.dimension; d += 1) {\n        this.covariance[d] += regularization[d];\n      }\n    }\n  },\n\n  /**\n   * Update the inverse covariance of the distribution\n   * @private\n   */\n  updateInverseCovariance() {\n    if (this.covarianceMode === 'full') {\n      const covMatrix = Matrix(this.dimension, this.dimension);\n\n      covMatrix.data = this.covariance.slice();\n      const inv = covMatrix.pinv();\n      this.covarianceDeterminant = inv.determinant;\n      this.inverseCovariance = inv.matrix.data;\n    } else { // DIAGONAL COVARIANCE\n      this.covarianceDeterminant = 1;\n      for (let d = 0; d < this.dimension; d += 1) {\n        if (this.covariance[d] <= 0) {\n          throw new Error('Non-invertible matrix');\n        }\n        this.inverseCovariance[d] = 1 / this.covariance[d];\n        this.covarianceDeterminant *= this.covariance[d];\n      }\n    }\n    if (this.bimodal) {\n      this.updateInverseCovarianceBimodal();\n    }\n  },\n\n  /**\n   * Convert to an ellipse allong two dimensions\n   *\n   * @param  {number} dimension1 first dimension\n   * @param  {number} dimension2 second dimension\n   * @return {Ellipse}\n   */\n  toEllipse(dimension1, dimension2) {\n    if (dimension1 >= this.dimension || dimension2 >= this.dimension) {\n      throw new Error('dimensions out of range');\n    }\n\n    const gaussianEllipse = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      angle: 0,\n    };\n    gaussianEllipse.x = this.mean[dimension1];\n    gaussianEllipse.y = this.mean[dimension2];\n\n    // Represent 2D covariance with square matrix\n    // |a b|\n    // |b c|\n    let a;\n    let b;\n    let c;\n    if (this.covarianceMode === 'full') {\n      a = this.covariance[(dimension1 * this.dimension) + dimension1];\n      b = this.covariance[(dimension1 * this.dimension) + dimension2];\n      c = this.covariance[(dimension2 * this.dimension) + dimension2];\n    } else {\n      a = this.covariance[dimension1];\n      b = 0;\n      c = this.covariance[dimension2];\n    }\n\n    // Compute Eigen Values to get width, height and angle\n    const trace = a + c;\n    const determinant = (a * c) - (b * b);\n    const eigenVal1 = 0.5 * (trace + Math.sqrt((trace ** 2) - (4 * determinant)));\n    const eigenVal2 = 0.5 * (trace - Math.sqrt((trace ** 2) - (4 * determinant)));\n    gaussianEllipse.width = Math.sqrt(5.991 * eigenVal1);\n    gaussianEllipse.height = Math.sqrt(5.991 * eigenVal2);\n    gaussianEllipse.angle = Math.atan(b / (eigenVal1 - c));\n    if (Number.isNaN(gaussianEllipse.angle)) {\n      gaussianEllipse.angle = Math.PI / 2;\n    }\n\n    return gaussianEllipse;\n  },\n\n  /**\n   * Modify the distribution along two dimensions given the equivalent values\n   * as an Ellipse representation.\n   *\n   * @param  {Ellipse} gaussianEllipse The Ellipse corresponding to the 2D\n   * covariance along the two target dimensions\n   * @param  {number} dimension1      first dimension\n   * @param  {number} dimension2      second dimension\n   */\n  fromEllipse(gaussianEllipse, dimension1, dimension2) {\n    if (dimension1 >= this.dimension || dimension2 >= this.dimension) {\n      throw new Error('dimensions out of range');\n    }\n\n    this.mean[dimension1] = gaussianEllipse.x;\n    this.mean[dimension2] = gaussianEllipse.y;\n\n    const eigenVal1 = (gaussianEllipse.width * gaussianEllipse.width) / 5.991;\n    const eigenVal2 = (gaussianEllipse.height * gaussianEllipse.height) / 5.991;\n    const tantheta = Math.tan(gaussianEllipse.angle);\n    const b = ((eigenVal1 - eigenVal2) * tantheta) / ((tantheta ** 2) + 1);\n    const c = eigenVal1 - (b / tantheta);\n    const a = eigenVal2 + (b / tantheta);\n\n    if (this.covarianceMode === 'full') {\n      this.covariance[(dimension1 * this.dimension) + dimension1] = a;\n      this.covariance[(dimension1 * this.dimension) + dimension2] = b;\n      this.covariance[(dimension2 * this.dimension) + dimension1] = b;\n      this.covariance[(dimension2 * this.dimension) + dimension2] = c;\n    } else {\n      this.covariance[dimension1] = a;\n      this.covariance[dimension2] = c;\n    }\n    this.updateInverseCovariance();\n  },\n};\n\n/**\n * Bimodal Gaussian Distribution Prototype, for Regression purposes\n *\n * @type {Object}\n * @property {boolean} bimodal           Specifies if the distribution is\n * bimodal (for regression use)\n * @property {number}  inputDimension    input dimension\n * @property {number}  outputDimension   output dimension\n * @property {number}  dimension         Total dimension\n * @property {Array}   mean              Distribution mean\n * @property {Array}   covariance        Distribution covariance\n * @property {Array}   inverseCovariance Inverse covariance\n * @property {Array}   inverseCovarianceInput Inverse covariance of the input\n * modality\n *\n * @ignore\n */\nconst bimodalGaussianPrototype = /** @lends GaussianDistribution */ {\n  /**\n   * Allocate the distribution\n   * @private\n   */\n  allocateBimodal() {\n    if (this.covarianceMode === 'full') {\n      this.inverseCovarianceInput = new Array(this.inputDimension ** 2).fill(0);\n    } else {\n      this.inverseCovarianceInput = new Array(this.inputDimension).fill(0);\n    }\n  },\n\n  /**\n   * Estimate the likleihood of an observation for the input modality only.\n   * Called by `likelihood` when relevant.\n   * @param  {Array} inputObservation observation (input modality only)\n   * @return {number}\n   * @private\n   */\n  inputLikelihood(inputObservation) {\n    if (this.covarianceDeterminantInput === 0) {\n      throw new Error('Covariance Matrix of input modality is not invertible');\n    }\n\n    let euclideanDistance = 0;\n    if (this.covarianceMode === 'full') {\n      for (let l = 0; l < this.inputDimension; l += 1) {\n        let tmp = 0;\n        for (let k = 0; k < this.inputDimension; k += 1) {\n          tmp += this.inverseCovarianceInput[(l * this.inputDimension) + k] *\n            (inputObservation[k] - this.mean[k]);\n        }\n        euclideanDistance += (inputObservation[l] - this.mean[l]) * tmp;\n      }\n    } else {\n      for (let l = 0; l < this.inputDimension; l += 1) {\n        euclideanDistance += this.inverseCovariance[l] *\n          (inputObservation[l] - this.mean[l]) *\n          (inputObservation[l] - this.mean[l]);\n      }\n    }\n\n    let p = Math.exp(-0.5 * euclideanDistance) /\n               Math.sqrt(this.covarianceDeterminantInput *\n                    ((2 * Math.PI) ** this.inputDimension));\n\n    if (p < 1e-180 || Number.isNaN(p) || Math.abs(p) === +Infinity) p = 1e-180;\n\n    return p;\n  },\n\n  /**\n   * Estimate the output values associated with an input observation by\n   * regression, given the distribution parameters.\n   *\n   * @todo Clarify the maths here.\n   *\n   * @param  {Array} inputObservation observation (input modality only)\n   * @return {Array} Output values\n   */\n  regression(inputObservation) {\n    const outputDimension = this.dimension - this.inputDimension;\n    const prediction = Array(outputDimension).fill(0);\n\n    if (this.covarianceMode === 'full') {\n      for (let d = 0; d < outputDimension; d += 1) {\n        prediction[d] = this.mean[this.inputDimension + d];\n        for (let e = 0; e < this.inputDimension; e += 1) {\n          let tmp = 0;\n          for (let f = 0; f < this.inputDimension; f += 1) {\n            tmp += this.inverseCovarianceInput[(e * this.inputDimension) + f] *\n              (inputObservation[f] - this.mean[f]);\n          }\n          prediction[d] += tmp *\n            this.covariance[((d + this.inputDimension) * this.dimension) + e];\n        }\n      }\n    } else {\n      for (let d = 0; d < outputDimension; d += 1) {\n        prediction[d] = this.mean[this.inputDimension + d];\n      }\n    }\n    return prediction;\n  },\n\n  /**\n   * Update the inverse covariance\n   * @private\n   */\n  updateInverseCovarianceBimodal() {\n    if (this.covarianceMode === 'full') {\n      const covMatrixInput = Matrix(this.inputDimension, this.inputDimension);\n      for (let d1 = 0; d1 < this.inputDimension; d1 += 1) {\n        for (let d2 = 0; d2 < this.inputDimension; d2 += 1) {\n          covMatrixInput.data[(d1 * this.inputDimension) + d2] =\n            this.covariance[(d1 * this.dimension) + d2];\n        }\n      }\n      const invInput = covMatrixInput.pinv();\n      this.covarianceDeterminantInput = invInput.determinant;\n      this.inverseCovarianceInput = invInput.matrix.data;\n    } else { // DIAGONAL COVARIANCE\n      this.covarianceDeterminantInput = 1;\n      for (let d = 0; d < this.inputDimension; d += 1) {\n        if (this.covariance[d] <= 0) {\n          throw new Error('Non-invertible matrix');\n        }\n        this.inverseCovarianceInput[d] = 1 / this.covariance[d];\n        this.covarianceDeterminantInput *= this.covariance[d];\n      }\n    }\n    this.updateOutputCovariance();\n  },\n\n  /**\n   * Update the output covariance\n   * @private\n   */\n  updateOutputCovariance() {\n    if (this.covarianceMode === 'diagonal') {\n      this.outputCovariance = this.covariance.slice(0, this.inputDimension);\n      return;\n    }\n\n    // CASE: FULL COVARIANCE\n    const covMatrixInput = Matrix(this.inputDimension, this.inputDimension);\n    for (let d1 = 0; d1 < this.inputDimension; d1 += 1) {\n      for (let d2 = 0; d2 < this.inputDimension; d2 += 1) {\n        covMatrixInput.data[(d1 * this.inputDimension) + d2] =\n          this.covariance[(d1 * this.dimension) + d2];\n      }\n    }\n    const inv = covMatrixInput.pinv();\n    const covarianceGS = Matrix(this.inputDimension, this.outputDimension);\n    for (let d1 = 0; d1 < this.inputDimension; d1 += 1) {\n      for (let d2 = 0; d2 < this.outputDimension; d2 += 1) {\n        covarianceGS.data[(d1 * this.outputDimension) + d2] =\n          this.covariance[(d1 * this.dimension) + this.inputDimension + d2];\n      }\n    }\n    const covarianceSG = Matrix(this.outputDimension, this.inputDimension);\n    for (let d1 = 0; d1 < this.outputDimension; d1 += 1) {\n      for (let d2 = 0; d2 < this.inputDimension; d2 += 1) {\n        covarianceSG.data[(d1 * this.inputDimension) + d2] =\n          this.covariance[((this.inputDimension + d1) * this.dimension) + d2];\n      }\n    }\n    const tmptmptmp = inv.matrix.product(covarianceGS);\n    const covarianceMod = covarianceSG.product(tmptmptmp);\n    this.outputCovariance = Array(this.outputDimension ** 2).fill(0);\n    for (let d1 = 0; d1 < this.outputDimension; d1 += 1) {\n      for (let d2 = 0; d2 < this.outputDimension; d2 += 1) {\n        this.outputCovariance[(d1 * this.outputDimension) + d2] =\n          this.covariance[((this.inputDimension + d1) * this.dimension) +\n            this.inputDimension + d2] -\n            covarianceMod.data[(d1 * this.outputDimension) + d2];\n      }\n    }\n  },\n};\n\n/**\n * Multivariate Gaussian Distribution factory function.\n * Full covariance, optionally multimodal with support for regression.\n *\n * @function\n * @param {Number} [inputDimension=1]      Dimension of the input modality\n * @param {Number} [outputDimension=0]     Dimension of the output\n * modality (positive for regression, otherwise 0 for recognition).\n * @param {String} [covarianceMode='full'] covariance mode (full vs\n * diagonal)\n * @return {baseGaussianPrototype|bimodalGaussianPrototype}\n *\n * @property {boolean} bimodal           Specifies if the distribution is\n * bimodal (for regression use)\n * @property {number}  inputDimension    input dimension\n * @property {number}  outputDimension   output dimension\n * @property {number}  dimension         Total dimension\n * @property {Array}   mean              Distribution mean\n * @property {Array}   covariance        Distribution covariance\n * @property {Array}   inverseCovariance Inverse covariance\n */\nexport default function GaussianDistribution(\n  inputDimension = 1,\n  outputDimension = 0,\n  covarianceMode = 'full',\n) {\n  const bimodal = outputDimension > 0;\n  const dimension = inputDimension + outputDimension;\n  const proto = bimodal ?\n    Object.assign({}, baseGaussianPrototype, bimodalGaussianPrototype) :\n    baseGaussianPrototype;\n  const data = Object.assign(\n    {\n      bimodal,\n      dimension,\n      inputDimension,\n      outputDimension,\n      covarianceMode,\n      covarianceDeterminant: 0,\n    },\n    bimodal ? { covarianceDeterminantInput: 0 } : {},\n  );\n  const dist = Object.assign(\n    Object.create(proto),\n    data,\n  );\n  dist.allocate();\n  return dist;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/gaussian_distribution.js","/* eslint-disable no-use-before-define */\nconst kEpsilonPseudoInverse = 1.0e-9;\n\n/**\n * Matrix Prototype\n * @type {Object}\n * @property {Array} data Matrix data\n * @property {Number} ncols Number of columns\n * @property {Number} nrows Number of rows\n *\n * @ignore\n */\nconst matrixPrototype = /** @lends Matrix */ {\n  /**\n   * Compute the Sum of the matrix\n   * @return {Number} Sum of all elements in the matrix\n   */\n  sum() {\n    return this.data.reduce((a, b) => a + b, 0);\n  },\n\n  /**\n   * Compute the transpose matrix\n   * @return {Matrix}\n   */\n  transpose() {\n    const out = Matrix(this.ncols, this.nrows);\n    for (let i = 0; i < this.ncols; i += 1) {\n      for (let j = 0; j < this.nrows; j += 1) {\n        out.data[(i * this.nrows) + j] = this.data[(j * this.ncols) + i];\n      }\n    }\n    return out;\n  },\n\n  /**\n   * Compute the product of matrices\n   * @param  {Matrix} mat Second matrix\n   * @return {Matrix}     Product of the current matrix by `mat`\n   */\n  product(mat) {\n    if (this.ncols !== mat.nrows) {\n      throw new Error('Wrong dimensions for matrix product');\n    }\n    const out = Matrix(this.nrows, mat.ncols);\n    for (let i = 0; i < this.nrows; i += 1) {\n      for (let j = 0; j < mat.ncols; j += 1) {\n        out.data[(i * mat.ncols) + j] = 0;\n        for (let k = 0; k < this.ncols; k += 1) {\n          out.data[(i * mat.ncols) + j] +=\n            this.data[(i * this.ncols) + k] * mat.data[(k * mat.ncols) + j];\n        }\n      }\n    }\n    return out;\n  },\n\n  /**\n   * Compute the Pseudo-Inverse of a Matrix\n   * @param  {Number} determinant Determinant (computed with the inversion)\n   * @return {Matrix}             Pseudo-inverse of the matrix\n   */\n  pinv() {\n    if (this.nrows === this.ncols) {\n      return this.gaussJordanInverse();\n    }\n\n    const transp = this.transpose();\n    if (this.nrows >= this.ncols) {\n      const prod = transp.product(this);\n      const { determinant, matrix: dst } = prod.gaussJordanInverse();\n      return { determinant, matrix: dst.product(transp) };\n    }\n    const prod = this.product(transp);\n    const { determinant, matrix: dst } = prod.gaussJordanInverse();\n    return { determinant, matrix: transp.product(dst) };\n  },\n\n  /**\n   * Compute the Gauss-Jordan Inverse of a Square Matrix\n   * !!! Determinant (computed with the inversion\n   * @private\n   */\n  gaussJordanInverse() {\n    if (this.nrows !== this.ncols) {\n      throw new Error('Gauss-Jordan inversion: Cannot invert Non-square matrix');\n    }\n    let determinant = 1;\n    const mat = Matrix(this.nrows, this.ncols * 2);\n    const newMat = Matrix(this.nrows, this.ncols * 2);\n    const n = this.nrows;\n\n    // Create matrix\n    for (let i = 0; i < n; i += 1) {\n      for (let j = 0; j < n; j += 1) {\n        mat.data[(i * 2 * n) + j] = this.data[(i * n) + j];\n      }\n      mat.data[(i * 2 * n) + n + i] = 1;\n    }\n\n    for (let k = 0; k < n; k += 1) {\n      let i = k;\n      while (Math.abs(mat.data[(i * 2 * n) + k]) < kEpsilonPseudoInverse) {\n        i += 1;\n        if (i === n) {\n          throw new Error('Non-invertible matrix');\n        }\n      }\n      determinant *= mat.data[(i * 2 * n) + k];\n\n      // if found > Exchange lines\n      if (i !== k) {\n        mat.swapLines(i, k);\n      }\n\n      newMat.data = mat.data.slice();\n\n      for (let j = 0; j < 2 * n; j += 1) {\n        newMat.data[(k * 2 * n) + j] /= mat.data[(k * 2 * n) + k];\n      }\n      for (let ii = 0; ii < n; ii += 1) {\n        if (ii !== k) {\n          for (let j = 0; j < 2 * n; j += 1) {\n            newMat.data[(ii * 2 * n) + j] -=\n                mat.data[(ii * 2 * n) + k] *\n                newMat.data[(k * 2 * n) + j];\n          }\n        }\n      }\n      mat.data = newMat.data.slice();\n    }\n\n    const dst = Matrix(this.nrows, this.ncols);\n    for (let i = 0; i < n; i += 1) {\n      for (let j = 0; j < n; j += 1) {\n        dst.data[(i * n) + j] = mat.data[(i * 2 * n) + n + j];\n      }\n    }\n    return { determinant, matrix: dst };\n  },\n\n  /**\n   * Swap 2 lines of the matrix\n   * @param  {[type]} i index of the first line\n   * @param  {[type]} j index of the second line\n   * @private\n   */\n  swapLines(i, j) {\n    for (let k = 0; k < this.ncols; k += 1) {\n      const tmp = this.data[(i * this.ncols) + k];\n      this.data[(i * this.ncols) + k] = this.data[(j * this.ncols) + k];\n      this.data[(j * this.ncols) + k] = tmp;\n    }\n  },\n\n  /**\n   * Swap 2 columns of the matrix\n   * @param  {[type]} i index of the first column\n   * @param  {[type]} j index of the second column\n   * @private\n   */\n  swapColumns(i, j) {\n    for (let k = 0; k < this.nrows; k += 1) {\n      const tmp = this.data[(k * this.ncols) + i];\n      this.data[(k * this.ncols) + i] = this.data[(k * this.ncols) + j];\n      this.data[(k * this.ncols) + j] = tmp;\n    }\n  },\n};\n\n/**\n * Create a matrix\n *\n * @function\n * @param       {Number} [nrows=0]  Number of rows\n * @param       {Number} [ncols=-1] Number of columns\n * @return {matrixPrototype}\n *\n * @property {Array} data Matrix data\n * @property {Number} ncols Number of columns\n * @property {Number} nrows Number of rows\n */\nexport default function Matrix(nrows = 0, ncols = -1) {\n  const nc = ncols < 0 ? nrows : ncols;\n  return Object.assign(\n    Object.create(matrixPrototype), //\n    {\n      nrows,\n      ncols: nc,\n      data: Array(nrows * nc).fill(0),\n    },\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/matrix.js","/**\n * Add multiclass training capabilities to a model. It takes as argument\n * the training function called to train each class of the training set.\n *\n * @param  {MulticlassModelBase} o Source model\n * @param  {Function}  trainingFunction Training function for a single class\n * @return {MulticlassModelBase}\n */\nexport default function withMulticlassTraining(\n  o,\n  trainingFunction,\n) {\n  return Object.assign(\n    o,\n    /** @lends withMulticlassTraining */ {\n      /**\n       * Train the model, optionally specifying a set of classes to train\n       *\n       * @param  {TrainingSet} trainingSet   Training data set\n       * @param  {undefined|Array<String>} [labels=undefined] Labels\n       * corresponding to the classes to be trained (all if unspecified)\n       * @return {Object} the parameters of the trained model\n       *\n       * @throws {Error} if the training set is empty\n       * @throws {Error} if one of the specified class does not exist\n       */\n      train(trainingSet, labels = undefined) {\n        if (!trainingSet || trainingSet.empty()) {\n          throw new Error('The training set is empty');\n        }\n        if (labels) {\n          labels.forEach((l) => {\n            if (!this.includes(l)) {\n              throw new Error(`Class labeled ${l} does not exist`);\n            }\n          });\n        }\n\n        this.params.classes = {};\n        const labs = labels || trainingSet.labels();\n        labs.forEach((label) => {\n          const ts = trainingSet.getPhrasesOfClass(label);\n          // console.log(ts);\n          this.params.classes[label] = trainingFunction(ts);\n        });\n        return this.params;\n      },\n    },\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/multiclass_training_mixin.js","import ModelBase from './core/model_base_mixin';\nimport withAbtractPrediction from './core/prediction_mixin';\nimport withGMMBase from './gmm/gmm_base_mixin';\nimport withGMMPrediction from './gmm/gmm_prediction_mixin';\nimport MulticlassModelbase from './core/multiclass_mixin';\nimport withMulticlassPrediction from './core/multiclass_prediction_mixin';\n\n/**\n * Create a GMM Predictor from a full set of parameters (generated by trainGMM).\n * @param       {Object} params                       Model parameters\n * @param       {number} [likelihoodWindow=undefined] Likelihoow window size\n * @function\n */\nexport function GMMPredictor(\n  params,\n  likelihoodWindow = undefined,\n) {\n  const model = withGMMPrediction(withAbtractPrediction(\n    withGMMBase(ModelBase(params)),\n    likelihoodWindow,\n  ));\n  model.reset();\n  return model;\n}\n\n/**\n * Create a Multiclass GMM Predictor from a full set of parameters\n * (generated by trainMulticlassGMM).\n * @param       {Object} params                       Model parameters\n * @param       {number} [likelihoodWindow=undefined] Likelihoow window size\n * @function\n */\nexport function multiclassGMMPredictor(\n  params,\n  likelihoodWindow = undefined,\n) {\n  const model = withMulticlassPrediction(MulticlassModelbase(params));\n  model.models = {};\n  Object.keys(params.classes).forEach((label) => {\n    model.models[label] = GMMPredictor(params.classes[label], likelihoodWindow);\n  });\n  model.reset();\n  return model;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/predict.js","import { isBaseModel } from './model_base_mixin';\nimport CircularBuffer from '../common/circular_buffer';\n\n/**\n * Prototype for models with prediction capabilities\n * @param  {Boolean} bimodal Specifies whether the model is bimodal\n * @return {Object}\n * @ignore\n */\nconst predictionBasePrototype = bimodal => (/** @lends withAbtractPrediction */{\n  /**\n   * Likelihood Buffer\n   * @type {CircularBuffer}\n   * @private\n   */\n  likelihoodBuffer: CircularBuffer(1),\n\n  /**\n   * Likelihood Window (used to smooth the log-likelihoods over several frames)\n   * @return {Number}\n   */\n  get likelihoodWindow() {\n    return this.likelihoodBuffer.capacity;\n  },\n\n  /**\n   * Likelihood Window (used to smooth the log-likelihoods over several frames)\n   * @param {Number} [lw] Size (in frames) of the likelihood smoothing window\n   */\n  set likelihoodWindow(lw) {\n    this.likelihoodBuffer = CircularBuffer(lw);\n  },\n\n  /**\n   * Reset the prediction process\n   */\n  reset() {\n    this.likelihoodBuffer.clear();\n  },\n\n  /**\n   * Update the predictions with a new observation\n   * @param  {Array<Number>} observation Observation vector\n   * @return {Object} Prediction results\n   *\n   * @todo document results data structure\n   */\n  predict(observation) {\n    const likelihood = this.likelihood(observation);\n    if (bimodal) {\n      this.regression(observation);\n    }\n    this.updateResults(likelihood);\n    return this.results;\n  },\n\n  /**\n   * Update the prediction results\n   * @param  {Number} instantLikelihood Instantaneous likelihood\n   * @private\n   */\n  updateResults(instantLikelihood) {\n    this.results.instantLikelihood = instantLikelihood;\n    this.likelihoodBuffer.push(Math.log(instantLikelihood));\n    this.results.logLikelihood = 0;\n    const bufSize = this.likelihoodBuffer.length;\n    for (let i = 0; i < bufSize; i += 1) {\n      this.results.logLikelihood += this.likelihoodBuffer.get(i);\n    }\n    this.results.logLikelihood /= bufSize;\n  },\n});\n\n/**\n * Add ABSTRACT prediction capabilities to an existing model\n * @param  {Modelbase} o                 Source model\n * @param  {Number} [likelihoodWindow=1] Size of the likelihood smoothing window\n * @return {Modelbase}\n */\nexport default function withAbtractPrediction(o, likelihoodWindow = 1) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  const results = Object.assign(\n    { instantLikelihood: 0, logLikelihood: 0 },\n    o.params.bimodal ? { outputValues: [], outputCovariance: [] } : {},\n  );\n  return Object.assign(\n    o,\n    predictionBasePrototype(o.params.bimodal),\n    { results, likelihoodBuffer: CircularBuffer(likelihoodWindow) },\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/prediction_mixin.js","/**\n * Circular Buffer prototype\n *\n * @property {number}  capacity Buffer capacity\n * @property {number}  length Current buffer length\n * @property {boolean} full Specifies if the buffer is full\n *\n * @ignore\n */\nconst circularBufferPrototype = /** @lends CircularBuffer */ {\n  /**\n   * Clear the buffer contents\n   */\n  clear() {\n    this.length = 0;\n    this.index = 0;\n    this.full = false;\n    this.buffer = [];\n  },\n\n  /**\n   * Push a value to the buffer\n   * @param  {*} value data value (any type)\n   */\n  push(value) {\n    if (this.full) {\n      this.buffer[this.index] = value;\n      this.index = (this.index + 1) % this.capacity;\n    } else {\n      this.buffer.push(value);\n      this.length += 1;\n      this.full = (this.length === this.capacity);\n    }\n  },\n\n  /**\n   * Get the value at a given index\n   * @param  {number} idx data index\n   * @return {anything}   value at index\n   */\n  get(idx) {\n    return this.buffer[(idx + this.index) % this.capacity];\n  },\n\n  /**\n   * Fill the buffer with a constant value\n   * @param  {*} value data value (any type)\n   */\n  fill(value) {\n    this.length = this.capacity;\n    this.index = 0;\n    this.full = true;\n    this.buffer = Array(this.capacity).fill(value);\n  },\n\n  /**\n   * Iterate over the buffer's data\n   * @param  {Function} callback Callback function\n   * (@see Array.prototype.forEach).\n   */\n  forEach(callback) {\n    for (let i = 0; i < this.length; i += 1) {\n      callback(this.buffer[(i + this.index) % this.capacity], i);\n    }\n  },\n\n  /**\n   * Get an array of the buffer current values (ordered)\n   * @return {Array} Buffer contents\n   */\n  values() {\n    return this.buffer.slice(this.index)\n      .concat(this.buffer.slice(0, this.index));\n  },\n};\n\n/**\n * Circular Buffer Data Structure (any data type)\n * @param  {number} capacity Buffer capacity\n * @return {circularBufferPrototype}\n * @function\n *\n * @property {number}  capacity Buffer capacity\n * @property {number}  length Current buffer length\n * @property {boolean} full Specifies if the buffer is full\n */\nexport default function CircularBuffer(capacity) {\n  const buffer = Object.create(circularBufferPrototype);\n  buffer.capacity = capacity;\n  buffer.clear();\n  return buffer;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/circular_buffer.js","import validateParameters from '../common/validation';\nimport { isBaseModel } from '../core/model_base_mixin';\n\nconst gmmParameterSpec = gaussians => ({\n  gaussians: {\n    required: true,\n    check: { min: 1 },\n  },\n  regularization: {\n    required: true,\n    check: ({ absolute, relative }) =>\n      (absolute && relative && absolute > 0 && relative > 0),\n  },\n  covarianceMode: {\n    required: true,\n    check: ['full', 'diagonal'],\n  },\n  mixtureCoeffs: {\n    required: true,\n    check: m => m.length === gaussians,\n  },\n  components: {\n    required: true,\n    check: c => c.length === gaussians,\n  },\n});\n\n/**\n * Add GMM prediction capabilities to a single-class model. Mostly, this checks\n * the validity of the model parameters\n *\n * @todo validate gaussian components\n *\n * @param  {GMMBaseModel} o Source Model\n * @return {GMMBaseModel}\n *\n * @throws {Error} is o is not a ModelBase\n */\nexport default function withGMMPrediction(o) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  validateParameters('GMM', gmmParameterSpec(o.params.gaussians), o.params);\n  return Object.assign(\n    o,\n    { beta: new Array(o.params.gaussians).fill(0) },\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/gmm/gmm_prediction_mixin.js","/**\n * Check if the specification is respected for a given parameter and value,\n * and clip if relevant.\n *\n * @ignore\n *\n * @param  {String}        model      Stream Operator Name (for logging)\n * @param  {String}        parameter     Attribute name\n * @param  {Specification} specification Attribute specification\n * @param  {*}             value         Attribute value\n * @return {*}                           Type-checked parameter value\n */\nfunction checkSpec(model, parameter, specification, value) {\n  if (!specification) return;\n  if (specification.constructor === Array && !specification.includes(value)) {\n    throw new Error(`Attribute '${parameter}' (value: '${value}') is not allowed for model '${model}' (options: [${specification}]).`);\n  } else if (specification.constructor === Object) {\n    if (Object.keys(specification).includes('min') && value < specification.min) {\n      throw new Error(`Attribute '${parameter}' (value: ${value}) is inferior to the minimum required value of ${specification.min} for model '${model}'.`);\n    }\n    if (Object.keys(specification).includes('max') && value > specification.max) {\n      throw new Error(`Attribute '${parameter}' (value: ${value}) is superior to the maximum required value of ${specification.min} for model '${model}'.`);\n    }\n  } else if (typeof specification === 'function') {\n    if (!specification(value)) {\n      throw new Error(`Attribute '${parameter}' (value: ${value}) is incompatible with model '${model}'.`);\n    }\n  }\n}\n\n/**\n * Check the parameters of a model and return the parameters of the\n * output stream.\n *\n * The specification should be a structure of the form:\n * ```\n * const streamSpecification = {\n *   <parameter name>: {\n *     required: <boolean>,\n *     check: <null || Array || { min: <minimum value>, max: <maximum value>} || Function >,\n *     transform: Function,\n *   },\n * };\n * ```\n *\n * @param  {String} model      Name of the model for logging\n * @param  {Object} specification I/O Stream Specification\n * @param  {Object} values        Attributes of the input stream\n * @return {Object}               Attributes of the output stream\n *\n * @example\n * import setupStreamAttributes from 'stream';\n *\n * const specification = {\n *   type: {\n *     required: false,\n *     check: null,\n *     transform: x => x || null,\n *   },\n *   format: {\n *     required: true,\n *     check: ['scalar', 'vector'],\n *     transform: x => x,\n *   },\n *   size: {\n *     required: true,\n *     check: { min: 1 },\n *     transform: x => 2 * x,\n *   },\n *   stuff: {\n *     required: true,\n *     check: x => Math.log2(x) === Math.floor(Math.log2(x)),\n *     transform: x => Math.log2(x),\n *   },\n * };\n *\n * const values = {\n *   type: 'anything',\n *   format: 'vector',\n *   size: 3,\n *   stuff: 8,\n *   another: 'one',\n * };\n *\n * setupStreamAttributes('module name', specification, values);\n * // Returns:\n * // {\n * //   type: 'anything',\n * //   format: 'vector',\n * //   size: 6,\n * //   stuff: 3,\n * //   another: 'one',\n * // }\n */\nexport default function validateParameters(model, specification, values) {\n  const parameters = Object.assign({}, values);\n  Object.keys(specification).forEach((attr) => {\n    const spec = specification[attr];\n\n    // Check for required parameters\n    if (spec.required && !Object.keys(values).includes(attr)) {\n      throw new Error(`Stream parameter '${attr}' is required for model '${model}'.`);\n    }\n\n    // Check the validity of the input parameters\n    checkSpec(model, attr, spec.check, values[attr]);\n\n    parameters[attr] = spec.transform ?\n      spec.transform(values[attr]) :\n      values[attr];\n  });\n  return parameters;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/validation.js","import { isBaseModel } from './model_base_mixin';\n\n/**\n * Multiclass prediction mixin\n * @type {Object}\n * @ignore\n */\nconst MulticlassPredictionBasePrototype =\n/** @lends withMulticlassPrediction */\n{\n  reset() {\n    Object.values(this.models).forEach(m => m.reset());\n    this.results = {\n      labels: [],\n      instantLikelihoods: [],\n      smoothedLikelihoods: [],\n      smoothedLogLikelihoods: [],\n      smoothedNormalizedLikelihoods: [],\n      likeliest: null,\n      classes: {},\n    };\n    if (this.params.bimodal) {\n      this.resetBimodal();\n    }\n  },\n\n  predict(observation) {\n    Object.values(this.models).forEach(m => m.predict(observation));\n    this.updateResults();\n  },\n\n  updateResults() {\n    const labs = Object.keys(this.models).sort();\n    this.results.labels = labs;\n    let normInstant = 0;\n    let normSmoothed = 0;\n    let maxLogLikelihood = -Infinity;\n    this.results.classes = labs\n      .map((lab, i) => {\n        this.results.instantLikelihoods[i] =\n          this.models[lab].results.instantLikelihood;\n        this.results.smoothedLogLikelihoods[i] =\n          this.models[lab].results.logLikelihood;\n        this.results.smoothedLikelihoods[i] =\n          Math.exp(this.results.smoothedLogLikelihoods[i]);\n        normInstant += this.results.instantLikelihoods[i];\n        normSmoothed += this.results.smoothedLikelihoods[i];\n        if (this.results.smoothedLogLikelihoods[i] > maxLogLikelihood) {\n          maxLogLikelihood = this.results.smoothedLogLikelihoods[i];\n          this.results.likeliest = lab;\n        }\n        return { [lab]: this.models[lab].results };\n      })\n      .reduce((o, x) => ({ ...o, ...x }), {});\n    this.results.smoothedNormalizedLikelihoods =\n      this.results.smoothedLikelihoods.map(x => x / normSmoothed);\n    this.results.instantNormalizedLikelihoods =\n      this.results.instantLikelihoods.map(x => x / normInstant);\n    if (this.params.bimodal) {\n      this.updateRegressionResults();\n    }\n  },\n};\n\nconst MulticlassPredictionBimodalPrototype = {\n  resetBimodal() {\n    this.results.outputValues = [];\n    this.results.outputCovariance = [];\n  },\n\n  updateRegressionResults() {\n    if (this.params.multiClassRegressionEstimator === 'likeliest') {\n      this.results.outputValues =\n        this.models[this.results.likeliest].results.outputValues;\n      this.results.outputCovariance =\n        this.models[this.results.likeliest].results.outputCovariance;\n    } else if (this.params.multiClassRegressionEstimator === 'mixture') {\n      this.results.outputValues = Array(this.outputDimension).fill(0);\n      this.results.outputCovariance = Array(this.outputDimension ** (this.configuration.covarianceMode === 'full' ? 2 : 1)).fill(0);\n      this.results.labels.forEach((lab) => {\n        this.results.outputValues.map((x, i) => x + (\n          this.results.smoothedNormalizedLikelihoods[i] *\n          this.models[lab].results.outputValues[i]\n        ));\n        this.results.outputCovariance.map((x, i) => x + (\n          this.results.smoothedNormalizedLikelihoods[i] *\n          this.models[lab].results.outputCovariance[i]\n        ));\n      });\n    } else {\n      throw new Error('Unknown regression estimator, use `likeliest` or `mixture`');\n    }\n  },\n};\n\n/**\n * Add multiclass prediction capabilities to a multiclass model\n * @param  {MulticlassModelBase} o Source model\n * @param  {String} [multiClassRegressionEstimator='likeliest'] Type of\n * regression estimator:\n * - `likeliest` selects the output values from the likeliest class\n * - `mixture` computes the output values as the weighted sum of the\n * contributions of each class, weighed by their normalized likelihood\n * @return {MulticlassPredictionBasePrototype}\n * @function\n */\nexport default function withMulticlassPrediction(o, multiClassRegressionEstimator = 'likeliest') {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  const m = Object.assign(\n    o,\n    MulticlassPredictionBasePrototype,\n    o.params.bimodal ? MulticlassPredictionBimodalPrototype : {},\n  );\n  m.params.multiClassRegressionEstimator = multiClassRegressionEstimator;\n  return m;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/multiclass_prediction_mixin.js"],"sourceRoot":""}