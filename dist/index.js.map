{"version":3,"file":"index.js","sources":["../src/training_set/phrase.js","../src/training_set/index.js","../src/core/model_base_mixin.js","../src/common/euclidean.js","../src/kmeans/kmeans_training_mixin.js","../src/kmeans/index.js","../src/common/matrix.js","../src/common/gaussian_distribution.js","../src/core/em_training_mixin.js","../src/gmm/gmm_base_mixin.js","../src/gmm/gmm_training_mixin.js","../src/core/multiclass_mixin.js","../src/core/multiclass_training_mixin.js","../src/common/circular_buffer.js","../src/core/prediction_mixin.js","../src/common/validation.js","../src/gmm/gmm_prediction_mixin.js","../src/core/multiclass_prediction_mixin.js","../src/gmm/index.js","../src/hmm/hmm_base_mixin.js","../src/hmm/hmm_training_mixin.js","../src/hmm/hmm_prediction_mixin.js","../src/hmm/hierarchical_hmm_prediction_mixin.js","../src/hmm/index.js"],"sourcesContent":["/**\n * Data Phrase Prototype\n * @ignore\n */\nconst phrasePrototype = /** @lends Phrase */ {\n  /**\n   * Get the value at a given index and dimension\n   * @param  {Number} index index\n   * @param  {Number} dim   dimension\n   * @return {Number}\n   */\n  get(index, dim) {\n    if (typeof index !== 'number' || Math.floor(index) !== index) {\n      throw new Error('The index must be an integer');\n    }\n    if (dim >= this.dimension) {\n      throw new Error('Phrase: dimension out of bounds');\n    }\n    if (this.bimodal) {\n      if (dim < this.inputDimension) {\n        if (index >= this.inputData.length) {\n          throw new Error('Phrase: index out of bounds');\n        }\n        return this.inputData[index][dim];\n      }\n      if (index >= this.outputData.length) {\n        throw new Error('Phrase: index out of bounds');\n      }\n      return this.outputData[index][dim - this.inputDimension];\n    }\n    if (index >= this.length) {\n      throw new Error('Phrase: index out of bounds');\n    }\n    if (!this.inputData[index]) {\n      throw new Error('WTF?');\n    }\n    return this.inputData[index][dim];\n  },\n\n  /**\n   * Get the data frame at a given index\n   * @param  {Number} index index\n   * @return {Array<number>}\n   * @throws {Error} if the index is out of bounds\n   */\n  getFrame(index) {\n    if (index >= this.length) {\n      throw new Error('Phrase: index out of bounds');\n    }\n    if (this.bimodal) {\n      return this.inputData[index].concat(this.outputData[index]);\n    }\n    return this.inputData[index];\n  },\n\n  /**\n   * Push an observation vector to the phrase\n   * @param  {Array<number>} observation observation data\n   * @throws {Error} if the observation's dimension does not match the\n   * dimension of the training set\n   */\n  push(observation) {\n    // console.log('push:', observation);\n    if (observation.length !== this.dimension) {\n      throw new Error('Observation has wrong dimension');\n    }\n\n    if (this.bimodal) {\n      this.inputData.push(observation.slice(0, this.inputDimension));\n      this.outputData.push(observation.slice(this.inputDimension, this.dimension));\n    } else {\n      this.inputData.push(observation);\n    }\n\n    this.length += 1;\n  },\n\n  /**\n   * Push an observation to the input modality only\n   * @param  {Array<number>} observation observation data\n   * @throws {Error} if the phrase is not bimodal\n   * @throws {Error} if the observation's dimension does not match the\n   * input dimension of the training set\n   */\n  pushInput(observation) {\n    if (!this.bimodal) {\n      throw new Error('this phrase is unimodal, use `push`');\n    }\n    if (observation.size() !== this.inputDimension) {\n      throw new Error('Observation has wrong dimension');\n    }\n\n    this.inputData.push(observation);\n    this.trim();\n  },\n\n  /**\n   * Push an observation to the output modality only\n   * @param  {Array<number>} observation observation data\n   * @throws {Error} if the phrase is not bimodal\n   * @throws {Error} if the observation's dimension does not match the\n   * output dimension of the training set\n   */\n  pushOutput(observation) {\n    if (!this.bimodal) {\n      throw new Error('this phrase is unimodal, use `push`');\n    }\n    if (observation.size() !== this.outputDimension) {\n      throw new Error('Observation has wrong dimension');\n    }\n\n    this.outputData.push(observation);\n    this.trim();\n  },\n\n  /**\n   * Clear the phrase's data\n   */\n  clear() {\n    this.length = 0;\n    this.inputData = [];\n    this.outputData = [];\n  },\n\n  /**\n   * Clear the phrase's input data\n   */\n  clearInput() {\n    this.inputData = [];\n    this.trim();\n  },\n\n  /**\n   * Clear the phrase's output data\n   */\n  clearOutput() {\n    this.outputData = [];\n    this.trim();\n  },\n\n  /**\n   * Compute the mean of the phrase (across time)\n   * @return {Array<number>} The mean vector (same dimension as the\n   * training set)\n   */\n  mean() {\n    const mean = Array(this.dimension).fill(0);\n    for (let d = 0; d < this.dimension; d += 1) {\n      for (let t = 0; t < this.length; t += 1) {\n        mean[d] += this.get(t, d);\n      }\n      mean[d] /= this.length;\n    }\n    return mean;\n  },\n\n  /**\n   * Compute the standard deviation of the phrase (across time)\n   * @return {Array<number>} The standard deviation vector (same dimension as\n   * the training set)\n   */\n  standardDeviation() {\n    const stddev = Array(this.dimension).fill(0);\n    const mean = this.mean();\n    for (let d = 0; d < this.dimension; d += 1) {\n      for (let t = 0; t < this.length; t += 1) {\n        stddev[d] += (this.get(t, d) - mean[d]) * (this.get(t, d) - mean[d]);\n      }\n      stddev[d] /= this.length;\n      stddev[d] = Math.sqrt(stddev[d]);\n    }\n    return stddev;\n  },\n\n  /**\n   * Compute the minimum and maximum of the phrase (across time)\n   * @return {Array<{ min: number, max: number }>} The min/max vector (same\n   * dimension as the training set)\n   */\n  minmax() {\n    const minmax = Array.from(\n      Array(this.dimension),\n      () => ({ min: +Infinity, max: -Infinity }),\n    );\n    for (let d = 0; d < this.dimension; d += 1) {\n      for (let t = 0; t < this.length; t += 1) {\n        minmax[d].min = Math.min(this.get(t, d), minmax[d].min);\n        minmax[d].max = Math.max(this.get(t, d), minmax[d].max);\n      }\n    }\n    return minmax;\n  },\n\n  /**\n   * Trim the phrase length to the minimum of the input and output lengths\n   * @private\n   */\n  trim() {\n    if (this.bimodal) {\n      this.length = Math.min(this.inputData.length, this.outputData.length);\n    }\n  },\n};\n\n/**\n * Create a data phrase, potentially bimodal. Phrases are data structures for\n * temporal data (e.g. gestures), used to constitute training sets.\n *\n * @param {Object} [params]                   Phrase parameters\n * @param {Number} [params.inputDimension=1]  Dimension of the input modality\n * @param {Number} [params.outputDimension=0] Dimension of the output modality\n * (optional)\n * @param {Array<String>} [params.columnNames=null] Data column names, e.g.\n * \\['accX', 'accY', 'accZ'\\] (optional)\n * @param {String} [params.label='']          Phrase label\n * @return {Phrase}\n * @function\n *\n * @property {Boolean} bimodal Specifies if the phrase is bimodal\n * @property {Number} inputDimension Dimension of the input modality\n * @property {Number} outputDimension Dimension of the output modality\n * @property {Number} dimension Total dimension\n * @property {Number} length Phrase length (number of frames)\n * @property {String} label Phrase label\n * @property {Array<String>} columnNames Columns names\n */\nexport default function Phrase({\n  inputDimension = 1,\n  outputDimension = 0,\n  columnNames = null,\n  label = '',\n} = {}) {\n  const dimension = inputDimension + outputDimension;\n  return Object.assign(\n    Object.create(phrasePrototype),\n    {\n      bimodal: outputDimension > 0,\n      inputDimension,\n      outputDimension,\n      dimension,\n      length: 0,\n      label,\n      inputData: [],\n      outputData: [],\n      columnNames: columnNames || Array(dimension).fill(''),\n    },\n  );\n}\n","import Phrase from './phrase';\n\n/**\n * Training Set Prototype\n * @ignore\n */\nconst trainingSetPrototype = /** @lends TrainingSet */ {\n  /**\n   * Get the training set size (number of phrases)\n   * @return {number}\n   */\n  size() {\n    return Object.keys(this.phrases).length;\n  },\n\n  /**\n   * Checks if the training set is empty\n   * @return {boolean}\n   */\n  empty() {\n    return this.length === 0;\n  },\n\n  /**\n   * Get a reference to a phrase by index\n   * @param  {number} phraseIndex phrase index\n   * @return {Phrase}\n   */\n  getPhrase(phraseIndex) {\n    if (Object.keys(this.phrases).includes(phraseIndex.toString())) {\n      return this.phrases[phraseIndex.toString()];\n    }\n    return null;\n  },\n\n  /**\n   * Iterate over all phrases in the training set. The callback function\n   * should take 3 arguments: the phrase, its index in the training set,\n   * and the phrases structure.\n   *\n   * @param  {Function} callback Callback function\n   */\n  forEach(callback) {\n    Object.keys(this.phrases).forEach((phraseIndex) => {\n      callback(this.phrases[phraseIndex], phraseIndex, this.phrases);\n    });\n  },\n\n  /**\n   * Add a phrase to the training set and return it.\n   * @param  {number} phraseIndex        phrase index\n   * @param  {string} [label=undefined]  phrase label (its index if undefined)\n   * @param  {Phrase} [phrase=undefined] Phrase data. If unspecified, an empty\n   * phrase is created.\n   * @return {Phrase}\n   */\n  push(phraseIndex, label = undefined, phrase = undefined) {\n    const p = (phrase !== undefined) ? phrase : Phrase({\n      inputDimension: this.inputDimension,\n      outputDimension: this.outputDimension,\n      columnNames: this.columnNames,\n      label: (label !== undefined) ? label : phraseIndex.toString(),\n    });\n    this.phrases[phraseIndex] = p;\n    return p;\n  },\n\n  /**\n   * Remove a phrase\n   * @param  {number} phraseIndex phrase index\n   */\n  remove(phraseIndex) {\n    delete this.phrases[phraseIndex];\n  },\n\n  /**\n   * Remove all phrases with a given label\n   * @param  {string} label class label\n   */\n  removeClass(label) {\n    this.phrases = Object.keys(this.phrases)\n      .filter(i => this.phrases[i].label !== label)\n      .map(i => ({ i: this.phrases[i] }))\n      .reduce((x, p) => ({ ...x, ...p }), {});\n  },\n\n  /**\n   * Clear the training set (delete all phrases)\n   */\n  clear() {\n    this.phrases = {};\n  },\n\n  /**\n   * Get the sub-training set composed of all phrases of a given class\n   * @param  {string} label class label\n   * @return {TrainingSet}\n   */\n  getPhrasesOfClass(label) {\n    const ts = TrainingSet(this); // eslint-disable-line no-use-before-define\n    ts.phrases = Object.keys(this.phrases)\n      .filter(i => this.phrases[i].label === label)\n      .map(i => ({ i: this.phrases[i] }))\n      .reduce((x, p) => ({ ...x, ...p }), {});\n    return ts;\n  },\n\n  /**\n   * Get the list of unique labels in the training set\n   * @return {Array<string>}\n   */\n  labels() {\n    return Object.keys(this.phrases)\n      .map(i => this.phrases[i].label)\n      .reduce((ll, x) => (ll.includes(x) ? ll : ll.concat([x])), []);\n  },\n\n  /**\n   * Get the list of phrase indices\n   * @return {Array<number>}\n   */\n  indices() {\n    return Object.keys(this.phrases);\n  },\n\n  /**\n   * Get the mean of the training set over all phrases\n   * @return {Array<number>} mean (same dimension as the training set)\n   */\n  mean() {\n    const sum = Array(this.dimension).fill(0);\n    let totalLength = 0;\n    Object.keys(this.phrases).forEach((i) => {\n      for (let d = 0; d < this.dimension; d += 1) {\n        for (let t = 0; t < this.phrases[i].length; t += 1) {\n          sum[d] += this.phrases[i].get(t, d);\n        }\n      }\n      totalLength += this.phrases[i].length;\n    });\n\n    return sum.map(x => x / totalLength);\n  },\n\n  /**\n   * Get the standard deviation of the training set over all phrases\n   * @return {Array<number>} standard deviation (same dimension as the training set)\n   */\n  standardDeviation() {\n    const stddev = Array(this.dimension).fill(0);\n    const mean = this.mean();\n    let totalLength = 0;\n    Object.keys(this.phrases).forEach((i) => {\n      for (let d = 0; d < this.dimension; d += 1) {\n        for (let t = 0; t < this.phrases[i].length; t += 1) {\n          stddev[d] += (this.phrases[i].get(t, d) - mean[d]) ** 2;\n        }\n      }\n      totalLength += this.phrases[i].length;\n    });\n\n    return stddev.map(x => Math.sqrt(x / totalLength));\n  },\n\n  /**\n   * Get the min and max of the training set over all phrases\n   * @return {Array<{ min: number, max: number }>} min/max (same dimension as the training set)\n   */\n  minmax() {\n    const minmax = Array.from(\n      Array(this.dimension),\n      () => ({ min: +Infinity, max: -Infinity }),\n    );\n    Object.keys(this.phrases).forEach((i) => {\n      for (let d = 0; d < this.dimension; d += 1) {\n        for (let t = 0; t < this.phrases[i].length; t += 1) {\n          minmax[d].min += Math.min(minmax[d].min, this.phrases[i].get(t, d));\n          minmax[d].max += Math.max(minmax[d].max, this.phrases[i].get(t, d));\n        }\n      }\n    });\n    return minmax;\n  },\n};\n\n/**\n * Create a Training set, composed of a set of indexed data phrases\n * @param {Object} [params]                   Training set parameters\n * @param {Number} [params.inputDimension=1]  Dimension of the input modality\n * @param {Number} [params.outputDimension=0] Dimension of the output modality\n * (optional)\n * @param {Array<String>} [params.columnNames=null] Data column names, e.g.\n * \\['accX', 'accY', 'accZ'\\] (optional)\n * @return {TrainingSet}\n * @function\n *\n * @property {Boolean} bimodal Specifies if the training set is bimodal\n * @property {Number}  inputDimension Dimension of the input modality\n * @property {Number}  outputDimension Dimension of the output modality\n * @property {Number}  dimension Total dimension\n * @property {Array<String>} columnNames Columns names\n */\nexport default function TrainingSet({\n  inputDimension = 1,\n  outputDimension = 0,\n  columnNames = null,\n} = {}) {\n  const dimension = inputDimension + outputDimension;\n  return Object.assign(\n    Object.create(trainingSetPrototype),\n    {\n      bimodal: outputDimension > 0,\n      inputDimension,\n      outputDimension,\n      dimension,\n      columnNames: columnNames || Array(dimension).fill(''),\n      phrases: {},\n    },\n  );\n}\n","/**\n * Create the skeleton of a model\n *\n * @function\n * @param       {Number} inputDimension  input dimension\n * @param       {Number} outputDimension output dimension\n * @param       {Object} parameters      additional parameters to be copied\n * @constructor\n */\nexport default function ModelBase({\n  inputDimension,\n  outputDimension,\n  ...parameters\n}) {\n  const p = parameters;\n  delete p.bimodal;\n  delete p.inputDimension;\n  delete p.outputDimension;\n  delete p.dimension;\n  return /** @lends ModelBase */{\n    params: {\n      ...p,\n      get bimodal() {\n        return outputDimension > 0;\n      },\n      get inputDimension() {\n        return inputDimension;\n      },\n      get outputDimension() {\n        return outputDimension;\n      },\n      get dimension() {\n        return inputDimension + outputDimension;\n      },\n    },\n  };\n}\n\n/**\n * Check if an object is a base model (check for attribute existence)\n * @param  {Object}  o Source object\n * @return {Boolean}\n */\nexport function isBaseModel(o) {\n  if (!Object.keys(o).includes('params')) return false;\n  const keys = ['bimodal', 'inputDimension', 'outputDimension', 'dimension'];\n  return keys.map(key => Object.keys(o.params).includes(key))\n    .reduce((a, b) => a && b, true);\n}\n","/**\n * Compute the euclidean distance between to vectors\n * @param  {Array} v1\n * @param  {Array} v2\n * @return {number}\n */\nexport default function euclidean(v1, v2) {\n  return Math.sqrt(v1\n    .map((x1, i) => (x1 - v2[i]) ** 2)\n    .reduce((a, x) => (a + x), 0));\n}\n","import { isBaseModel } from '../core/model_base_mixin';\nimport euclidean from '../common/euclidean';\n\nconst kMeansTrainingPrototype = {\n  train(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) {\n      throw new Error('The training set is empty');\n    }\n\n    this.params.centers = Array.from(\n      Array(this.params.clusters),\n      () => new Array(this.params.dimension).fill(0),\n    );\n\n    // TODO: improve initialization =>\n    // https://www.slideshare.net/djempol/kmeans-initialization-15041920\n    //\n    if (this.trainingConfig.initialization === 'random') {\n      this.initializeClustersRandom(trainingSet);\n    } else if (this.trainingConfig.initialization === 'forgy') {\n      this.initializeClustersForgy(trainingSet);\n    } else if (this.trainingConfig.initialization === 'data') {\n      this.initClustersWithFirstPhrase(trainingSet);\n    } else {\n      throw new Error('Unknown K-Means initialization, must be `random`, `forgy` or `data`');\n    }\n\n    for (\n      let trainingNbIterations = 0;\n      trainingNbIterations < this.trainingConfig.maxIterations;\n      trainingNbIterations += 1\n    ) {\n      const previousCenters = this.params.centers;\n\n      this.updateCenters(previousCenters, trainingSet);\n\n      let meanClusterDistance = 0;\n      let maxRelativeCenterVariation = 0;\n      for (let k = 0; k < this.params.clusters; k += 1) {\n        for (let l = 0; l < this.params.clusters; l += 1) {\n          if (k !== l) {\n            meanClusterDistance += euclidean(\n              this.params.centers[k],\n              this.params.centers[l],\n            );\n          }\n        }\n        maxRelativeCenterVariation = Math.max(\n          euclidean(\n            previousCenters[k],\n            this.params.centers[k],\n          ),\n          maxRelativeCenterVariation,\n        );\n      }\n      meanClusterDistance /= this.params.clusters * (this.params.clusters - 1);\n      maxRelativeCenterVariation /= this.params.clusters;\n      maxRelativeCenterVariation /= meanClusterDistance;\n      if (maxRelativeCenterVariation < this.trainingConfig.relativeDistanceThreshold) break;\n    }\n    return this.params;\n  },\n\n  initClustersWithFirstPhrase(trainingSet) {\n    const phrase = trainingSet.getPhrase(trainingSet.indices()[0]);\n    const step = Math.floor(phrase.length / this.params.clusters);\n\n    let offset = 0;\n    for (let c = 0; c < this.params.clusters; c += 1) {\n      this.params.centers[c] = new Array(this.params.dimension).fill(0);\n      for (let t = 0; t < step; t += 1) {\n        for (let d = 0; d < this.params.dimension; d += 1) {\n          this.params.centers[c][d] += phrase.get(offset + t, d) / step;\n        }\n      }\n      offset += step;\n    }\n  },\n\n  initializeClustersRandom(trainingSet) {\n    const phrase = trainingSet.getPhrase(trainingSet.indices()[0]);\n    const indices = Array.from(\n      Array(phrase.length),\n      () => Math.floor(Math.random() * this.params.clusters),\n    );\n    const pointsPerCluster = indices.reduce(\n      (ppc, i) => {\n        const p = ppc;\n        p[i] += 1;\n        return p;\n      },\n      Array(this.params.clusters).fill(0),\n    );\n    for (let i = 0; i < indices.length; i += 1) {\n      const clustIdx = indices[i];\n      for (let d = 0; d < this.params.dimension; d += 1) {\n        this.params.centers[clustIdx][d] += phrase.get(i, d);\n      }\n    }\n    this.params.centers.forEach((_, c) => {\n      this.params.centers[c] = this.params.centers[c]\n        .map(x => x / pointsPerCluster[c]);\n    });\n  },\n\n  initializeClustersForgy(trainingSet) {\n    const phrase = trainingSet.getPhrase(trainingSet.indices()[0]);\n    const indices = Array.from(\n      Array(this.params.clusters),\n      () => Math.floor(Math.random() * phrase.length),\n    );\n    this.params.centers = indices.map(i => phrase.getFrame(i));\n  },\n\n  updateCenters(previousCenters, trainingSet) {\n    this.params.centers = Array.from(Array(this.params.clusters), () =>\n      new Array(this.params.dimension).fill(0));\n    const numFramesPerCluster = Array(this.params.clusters).fill(0);\n    trainingSet.forEach((phrase) => {\n      for (let t = 0; t < phrase.length; t += 1) {\n        const frame = phrase.getFrame(t);\n        let minDistance = euclidean(frame, previousCenters[0]);\n        let clusterMembership = 0;\n        for (let k = 1; k < this.params.clusters; k += 1) {\n          const distance = euclidean(\n            frame,\n            previousCenters[k],\n            this.params.dimension,\n          );\n          if (distance < minDistance) {\n            clusterMembership = k;\n            minDistance = distance;\n          }\n        }\n        numFramesPerCluster[clusterMembership] += 1;\n        for (let d = 0; d < this.params.dimension; d += 1) {\n          this.params.centers[clusterMembership][d] += phrase.get(t, d);\n        }\n      }\n    });\n    for (let k = 0; k < this.params.clusters; k += 1) {\n      if (numFramesPerCluster[k] > 0) {\n        for (let d = 0; d < this.params.dimension; d += 1) {\n          this.params.centers[k][d] /= numFramesPerCluster[k];\n        }\n      }\n    }\n  },\n};\n\nexport default function withKMeansTraining(\n  o,\n  clusters,\n  trainingConfiguration = {},\n) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  const trainingConfig = Object.assign({\n    initialization: 'random',\n    relativeDistanceThreshold: 1e-3,\n    minIterations: 5,\n    maxIterations: 100,\n  }, trainingConfiguration);\n  const model = Object.assign(o, kMeansTrainingPrototype, {\n    trainingConfig,\n  });\n  model.params.clusters = clusters;\n  return model;\n}\n","import ModelBase from '../core/model_base_mixin';\nimport withKMeansTraining from './kmeans_training_mixin';\n\n/**\n * Train a K-Means model.\n *\n * @todo K-Means details\n *\n * @param  {TrainingSet} trainingSet           training set\n * @param  {number} clusters                   Number of clusters\n * @param  {Object} [trainingConfig=undefined] Training configuration\n * @return {Object}                            K-Means parameters\n */\nexport default function trainKmeans(\n  trainingSet,\n  clusters,\n  trainingConfig = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const model = withKMeansTraining(\n    ModelBase({\n      inputDimension,\n      outputDimension,\n    }),\n    clusters,\n    trainingConfig,\n  );\n  return model.train(trainingSet);\n}\n","/* eslint-disable no-use-before-define */\nconst kEpsilonPseudoInverse = 1.0e-9;\n\n/**\n * Matrix Prototype\n * @type {Object}\n * @property {Array} data Matrix data\n * @property {Number} ncols Number of columns\n * @property {Number} nrows Number of rows\n *\n * @ignore\n */\nconst matrixPrototype = /** @lends Matrix */ {\n  /**\n   * Compute the Sum of the matrix\n   * @return {Number} Sum of all elements in the matrix\n   */\n  sum() {\n    return this.data.reduce((a, b) => a + b, 0);\n  },\n\n  /**\n   * Compute the transpose matrix\n   * @return {Matrix}\n   */\n  transpose() {\n    const out = Matrix(this.ncols, this.nrows);\n    for (let i = 0; i < this.ncols; i += 1) {\n      for (let j = 0; j < this.nrows; j += 1) {\n        out.data[(i * this.nrows) + j] = this.data[(j * this.ncols) + i];\n      }\n    }\n    return out;\n  },\n\n  /**\n   * Compute the product of matrices\n   * @param  {Matrix} mat Second matrix\n   * @return {Matrix}     Product of the current matrix by `mat`\n   */\n  product(mat) {\n    if (this.ncols !== mat.nrows) {\n      throw new Error('Wrong dimensions for matrix product');\n    }\n    const out = Matrix(this.nrows, mat.ncols);\n    for (let i = 0; i < this.nrows; i += 1) {\n      for (let j = 0; j < mat.ncols; j += 1) {\n        out.data[(i * mat.ncols) + j] = 0;\n        for (let k = 0; k < this.ncols; k += 1) {\n          out.data[(i * mat.ncols) + j] +=\n            this.data[(i * this.ncols) + k] * mat.data[(k * mat.ncols) + j];\n        }\n      }\n    }\n    return out;\n  },\n\n  /**\n   * Compute the Pseudo-Inverse of a Matrix\n   * @param  {Number} determinant Determinant (computed with the inversion)\n   * @return {Matrix}             Pseudo-inverse of the matrix\n   */\n  pinv() {\n    if (this.nrows === this.ncols) {\n      return this.gaussJordanInverse();\n    }\n\n    const transp = this.transpose();\n    if (this.nrows >= this.ncols) {\n      const prod = transp.product(this);\n      const { determinant, matrix: dst } = prod.gaussJordanInverse();\n      return { determinant, matrix: dst.product(transp) };\n    }\n    const prod = this.product(transp);\n    const { determinant, matrix: dst } = prod.gaussJordanInverse();\n    return { determinant, matrix: transp.product(dst) };\n  },\n\n  /**\n   * Compute the Gauss-Jordan Inverse of a Square Matrix\n   * !!! Determinant (computed with the inversion\n   * @private\n   */\n  gaussJordanInverse() {\n    if (this.nrows !== this.ncols) {\n      throw new Error('Gauss-Jordan inversion: Cannot invert Non-square matrix');\n    }\n    let determinant = 1;\n    const mat = Matrix(this.nrows, this.ncols * 2);\n    const newMat = Matrix(this.nrows, this.ncols * 2);\n    const n = this.nrows;\n\n    // Create matrix\n    for (let i = 0; i < n; i += 1) {\n      for (let j = 0; j < n; j += 1) {\n        mat.data[(i * 2 * n) + j] = this.data[(i * n) + j];\n      }\n      mat.data[(i * 2 * n) + n + i] = 1;\n    }\n\n    for (let k = 0; k < n; k += 1) {\n      let i = k;\n      while (Math.abs(mat.data[(i * 2 * n) + k]) < kEpsilonPseudoInverse) {\n        i += 1;\n        if (i === n) {\n          throw new Error('Non-invertible matrix');\n        }\n      }\n      determinant *= mat.data[(i * 2 * n) + k];\n\n      // if found > Exchange lines\n      if (i !== k) {\n        mat.swapLines(i, k);\n      }\n\n      newMat.data = mat.data.slice();\n\n      for (let j = 0; j < 2 * n; j += 1) {\n        newMat.data[(k * 2 * n) + j] /= mat.data[(k * 2 * n) + k];\n      }\n      for (let ii = 0; ii < n; ii += 1) {\n        if (ii !== k) {\n          for (let j = 0; j < 2 * n; j += 1) {\n            newMat.data[(ii * 2 * n) + j] -=\n                mat.data[(ii * 2 * n) + k] *\n                newMat.data[(k * 2 * n) + j];\n          }\n        }\n      }\n      mat.data = newMat.data.slice();\n    }\n\n    const dst = Matrix(this.nrows, this.ncols);\n    for (let i = 0; i < n; i += 1) {\n      for (let j = 0; j < n; j += 1) {\n        dst.data[(i * n) + j] = mat.data[(i * 2 * n) + n + j];\n      }\n    }\n    return { determinant, matrix: dst };\n  },\n\n  /**\n   * Swap 2 lines of the matrix\n   * @param  {[type]} i index of the first line\n   * @param  {[type]} j index of the second line\n   * @private\n   */\n  swapLines(i, j) {\n    for (let k = 0; k < this.ncols; k += 1) {\n      const tmp = this.data[(i * this.ncols) + k];\n      this.data[(i * this.ncols) + k] = this.data[(j * this.ncols) + k];\n      this.data[(j * this.ncols) + k] = tmp;\n    }\n  },\n\n  /**\n   * Swap 2 columns of the matrix\n   * @param  {[type]} i index of the first column\n   * @param  {[type]} j index of the second column\n   * @private\n   */\n  swapColumns(i, j) {\n    for (let k = 0; k < this.nrows; k += 1) {\n      const tmp = this.data[(k * this.ncols) + i];\n      this.data[(k * this.ncols) + i] = this.data[(k * this.ncols) + j];\n      this.data[(k * this.ncols) + j] = tmp;\n    }\n  },\n};\n\n/**\n * Create a matrix\n *\n * @function\n * @param       {Number} [nrows=0]  Number of rows\n * @param       {Number} [ncols=-1] Number of columns\n * @return {matrixPrototype}\n *\n * @property {Array} data Matrix data\n * @property {Number} ncols Number of columns\n * @property {Number} nrows Number of rows\n */\nexport default function Matrix(nrows = 0, ncols = -1) {\n  const nc = ncols < 0 ? nrows : ncols;\n  return Object.assign(\n    Object.create(matrixPrototype), //\n    {\n      nrows,\n      ncols: nc,\n      data: Array(nrows * nc).fill(0),\n    },\n  );\n}\n","import Matrix from './matrix';\n\n/**\n * Gaussian Distribution Prototype\n *\n * @type {Object}\n * @property {boolean} bimodal           Specifies if the distribution is\n * bimodal (for regression use)\n * @property {number}  inputDimension    input dimension\n * @property {number}  outputDimension   output dimension\n * @property {number}  dimension         Total dimension\n * @property {Array}   mean              Distribution mean\n * @property {Array}   covariance        Distribution covariance\n * @property {Array}   inverseCovariance Inverse covariance\n *\n * @ignore\n */\nconst baseGaussianPrototype = /** @lends GaussianDistribution */ {\n  /**\n   * Allocate the distribution\n   * @private\n   */\n  allocate() {\n    this.mean = new Array(this.dimension).fill(0);\n    if (this.covarianceMode === 'full') {\n      this.covariance = new Array(this.dimension ** 2).fill(0);\n      this.inverseCovariance = new Array(this.dimension ** 2).fill(0);\n    } else {\n      this.covariance = new Array(this.dimension).fill(0);\n      this.inverseCovariance = new Array(this.dimension).fill(0);\n    }\n    if (this.bimodal) {\n      this.allocateBimodal();\n    }\n  },\n\n  /**\n   * @brief Estimate the likelihood of an observation vector.\n   *\n   * If the distribution is bimodal an the observation is a vector of the size\n   * of the input modality, the likelihood is computed only on the\n   * distribution for the input modality\n   *\n   * @param  {array} observation data observation\n   * @return {number}\n   */\n  likelihood(observation) {\n    if (this.covarianceDeterminant === 0) {\n      throw new Error('Covariance Matrix is not invertible');\n    }\n    if (this.bimodal && observation.length === this.inputDimension) {\n      return this.inputLikelihood(observation);\n    }\n    if (observation.length !== this.dimension) {\n      throw new Error(`GaussianDistribution: observation has wrong dimension. Expected \\`${this.dimension}\\`, got \\`${observation.length}\\``);\n    }\n\n    let euclideanDistance = 0;\n    if (this.covarianceMode === 'full') {\n      for (let l = 0; l < this.dimension; l += 1) {\n        let tmp = 0;\n        for (let k = 0; k < this.dimension; k += 1) {\n          tmp += this.inverseCovariance[(l * this.dimension) + k] *\n            (observation[k] - this.mean[k]);\n        }\n        euclideanDistance += (observation[l] - this.mean[l]) * tmp;\n      }\n    } else {\n      for (let l = 0; l < this.dimension; l += 1) {\n        euclideanDistance += this.inverseCovariance[l] *\n          (observation[l] - this.mean[l]) *\n          (observation[l] - this.mean[l]);\n      }\n    }\n\n    let p = Math.exp(-0.5 * euclideanDistance) /\n      Math.sqrt(this.covarianceDeterminant * ((2 * Math.PI) ** this.dimension));\n\n    if (p < 1e-180 || Number.isNaN(p) || Math.abs(p) === +Infinity) {\n      p = 1e-180;\n    }\n\n    return p;\n  },\n\n  /**\n   * Regularize the distribution, given a regularization vector of the same\n   * dimension. Regularization adds the vector to the variance of the\n   * distribution.\n   *\n   * @param  {Array} regularization regularization vector\n   */\n  regularize(regularization) {\n    if (this.covarianceMode === 'full') {\n      for (let d = 0; d < this.dimension; d += 1) {\n        this.covariance[(d * this.dimension) + d] += regularization[d];\n      }\n    } else {\n      for (let d = 0; d < this.dimension; d += 1) {\n        this.covariance[d] += regularization[d];\n      }\n    }\n  },\n\n  /**\n   * Update the inverse covariance of the distribution\n   * @private\n   */\n  updateInverseCovariance() {\n    if (this.covarianceMode === 'full') {\n      const covMatrix = Matrix(this.dimension, this.dimension);\n\n      covMatrix.data = this.covariance.slice();\n      const inv = covMatrix.pinv();\n      this.covarianceDeterminant = inv.determinant;\n      this.inverseCovariance = inv.matrix.data;\n    } else { // DIAGONAL COVARIANCE\n      this.covarianceDeterminant = 1;\n      for (let d = 0; d < this.dimension; d += 1) {\n        if (this.covariance[d] <= 0) {\n          throw new Error('Non-invertible matrix');\n        }\n        this.inverseCovariance[d] = 1 / this.covariance[d];\n        this.covarianceDeterminant *= this.covariance[d];\n      }\n    }\n    if (this.bimodal) {\n      this.updateInverseCovarianceBimodal();\n    }\n  },\n\n  /**\n   * Convert to an ellipse allong two dimensions\n   *\n   * @param  {number} dimension1 first dimension\n   * @param  {number} dimension2 second dimension\n   * @return {Ellipse}\n   */\n  toEllipse(dimension1, dimension2) {\n    if (dimension1 >= this.dimension || dimension2 >= this.dimension) {\n      throw new Error('dimensions out of range');\n    }\n\n    const gaussianEllipse = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      angle: 0,\n    };\n    gaussianEllipse.x = this.mean[dimension1];\n    gaussianEllipse.y = this.mean[dimension2];\n\n    // Represent 2D covariance with square matrix\n    // |a b|\n    // |b c|\n    let a;\n    let b;\n    let c;\n    if (this.covarianceMode === 'full') {\n      a = this.covariance[(dimension1 * this.dimension) + dimension1];\n      b = this.covariance[(dimension1 * this.dimension) + dimension2];\n      c = this.covariance[(dimension2 * this.dimension) + dimension2];\n    } else {\n      a = this.covariance[dimension1];\n      b = 0;\n      c = this.covariance[dimension2];\n    }\n\n    // Compute Eigen Values to get width, height and angle\n    const trace = a + c;\n    const determinant = (a * c) - (b * b);\n    const eigenVal1 = 0.5 * (trace + Math.sqrt((trace ** 2) - (4 * determinant)));\n    const eigenVal2 = 0.5 * (trace - Math.sqrt((trace ** 2) - (4 * determinant)));\n    gaussianEllipse.width = Math.sqrt(5.991 * eigenVal1);\n    gaussianEllipse.height = Math.sqrt(5.991 * eigenVal2);\n    gaussianEllipse.angle = Math.atan(b / (eigenVal1 - c));\n    if (Number.isNaN(gaussianEllipse.angle)) {\n      gaussianEllipse.angle = Math.PI / 2;\n    }\n\n    return gaussianEllipse;\n  },\n\n  /**\n   * Modify the distribution along two dimensions given the equivalent values\n   * as an Ellipse representation.\n   *\n   * @param  {Ellipse} gaussianEllipse The Ellipse corresponding to the 2D\n   * covariance along the two target dimensions\n   * @param  {number} dimension1      first dimension\n   * @param  {number} dimension2      second dimension\n   */\n  fromEllipse(gaussianEllipse, dimension1, dimension2) {\n    if (dimension1 >= this.dimension || dimension2 >= this.dimension) {\n      throw new Error('dimensions out of range');\n    }\n\n    this.mean[dimension1] = gaussianEllipse.x;\n    this.mean[dimension2] = gaussianEllipse.y;\n\n    const eigenVal1 = (gaussianEllipse.width * gaussianEllipse.width) / 5.991;\n    const eigenVal2 = (gaussianEllipse.height * gaussianEllipse.height) / 5.991;\n    const tantheta = Math.tan(gaussianEllipse.angle);\n    const b = ((eigenVal1 - eigenVal2) * tantheta) / ((tantheta ** 2) + 1);\n    const c = eigenVal1 - (b / tantheta);\n    const a = eigenVal2 + (b / tantheta);\n\n    if (this.covarianceMode === 'full') {\n      this.covariance[(dimension1 * this.dimension) + dimension1] = a;\n      this.covariance[(dimension1 * this.dimension) + dimension2] = b;\n      this.covariance[(dimension2 * this.dimension) + dimension1] = b;\n      this.covariance[(dimension2 * this.dimension) + dimension2] = c;\n    } else {\n      this.covariance[dimension1] = a;\n      this.covariance[dimension2] = c;\n    }\n    this.updateInverseCovariance();\n  },\n};\n\n/**\n * Bimodal Gaussian Distribution Prototype, for Regression purposes\n *\n * @type {Object}\n * @property {boolean} bimodal           Specifies if the distribution is\n * bimodal (for regression use)\n * @property {number}  inputDimension    input dimension\n * @property {number}  outputDimension   output dimension\n * @property {number}  dimension         Total dimension\n * @property {Array}   mean              Distribution mean\n * @property {Array}   covariance        Distribution covariance\n * @property {Array}   inverseCovariance Inverse covariance\n * @property {Array}   inverseCovarianceInput Inverse covariance of the input\n * modality\n *\n * @ignore\n */\nconst bimodalGaussianPrototype = /** @lends GaussianDistribution */ {\n  /**\n   * Allocate the distribution\n   * @private\n   */\n  allocateBimodal() {\n    if (this.covarianceMode === 'full') {\n      this.inverseCovarianceInput = new Array(this.inputDimension ** 2).fill(0);\n    } else {\n      this.inverseCovarianceInput = new Array(this.inputDimension).fill(0);\n    }\n  },\n\n  /**\n   * Estimate the likelihood of an observation for the input modality only.\n   * Called by `likelihood` when relevant.\n   * @param  {Array} inputObservation observation (input modality only)\n   * @return {number}\n   * @private\n   */\n  inputLikelihood(inputObservation) {\n    if (this.covarianceDeterminantInput === 0) {\n      throw new Error('Covariance Matrix of input modality is not invertible');\n    }\n\n    let euclideanDistance = 0;\n    if (this.covarianceMode === 'full') {\n      for (let l = 0; l < this.inputDimension; l += 1) {\n        let tmp = 0;\n        for (let k = 0; k < this.inputDimension; k += 1) {\n          tmp += this.inverseCovarianceInput[(l * this.inputDimension) + k] *\n            (inputObservation[k] - this.mean[k]);\n        }\n        euclideanDistance += (inputObservation[l] - this.mean[l]) * tmp;\n      }\n    } else {\n      for (let l = 0; l < this.inputDimension; l += 1) {\n        euclideanDistance += this.inverseCovariance[l] *\n          (inputObservation[l] - this.mean[l]) *\n          (inputObservation[l] - this.mean[l]);\n      }\n    }\n\n    let p = Math.exp(-0.5 * euclideanDistance) /\n               Math.sqrt(this.covarianceDeterminantInput *\n                    ((2 * Math.PI) ** this.inputDimension));\n\n    if (p < 1e-180 || Number.isNaN(p) || Math.abs(p) === +Infinity) p = 1e-180;\n\n    return p;\n  },\n\n  /**\n   * Estimate the output values associated with an input observation by\n   * regression, given the distribution parameters.\n   *\n   * @todo Clarify the maths here.\n   *\n   * @param  {Array} inputObservation observation (input modality only)\n   * @return {Array} Output values\n   */\n  regression(inputObservation) {\n    const outputDimension = this.dimension - this.inputDimension;\n    const prediction = Array(outputDimension).fill(0);\n\n    if (this.covarianceMode === 'full') {\n      for (let d = 0; d < outputDimension; d += 1) {\n        prediction[d] = this.mean[this.inputDimension + d];\n        for (let e = 0; e < this.inputDimension; e += 1) {\n          let tmp = 0;\n          for (let f = 0; f < this.inputDimension; f += 1) {\n            tmp += this.inverseCovarianceInput[(e * this.inputDimension) + f] *\n              (inputObservation[f] - this.mean[f]);\n          }\n          prediction[d] += tmp *\n            this.covariance[((d + this.inputDimension) * this.dimension) + e];\n        }\n      }\n    } else {\n      for (let d = 0; d < outputDimension; d += 1) {\n        prediction[d] = this.mean[this.inputDimension + d];\n      }\n    }\n    return prediction;\n  },\n\n  /**\n   * Update the inverse covariance\n   * @private\n   */\n  updateInverseCovarianceBimodal() {\n    if (this.covarianceMode === 'full') {\n      const covMatrixInput = Matrix(this.inputDimension, this.inputDimension);\n      for (let d1 = 0; d1 < this.inputDimension; d1 += 1) {\n        for (let d2 = 0; d2 < this.inputDimension; d2 += 1) {\n          covMatrixInput.data[(d1 * this.inputDimension) + d2] =\n            this.covariance[(d1 * this.dimension) + d2];\n        }\n      }\n      const invInput = covMatrixInput.pinv();\n      this.covarianceDeterminantInput = invInput.determinant;\n      this.inverseCovarianceInput = invInput.matrix.data;\n    } else { // DIAGONAL COVARIANCE\n      this.covarianceDeterminantInput = 1;\n      for (let d = 0; d < this.inputDimension; d += 1) {\n        if (this.covariance[d] <= 0) {\n          throw new Error('Non-invertible matrix');\n        }\n        this.inverseCovarianceInput[d] = 1 / this.covariance[d];\n        this.covarianceDeterminantInput *= this.covariance[d];\n      }\n    }\n    this.updateOutputCovariance();\n  },\n\n  /**\n   * Update the output covariance\n   * @private\n   */\n  updateOutputCovariance() {\n    if (this.covarianceMode === 'diagonal') {\n      this.outputCovariance = this.covariance.slice(0, this.inputDimension);\n      return;\n    }\n\n    // CASE: FULL COVARIANCE\n    const covMatrixInput = Matrix(this.inputDimension, this.inputDimension);\n    for (let d1 = 0; d1 < this.inputDimension; d1 += 1) {\n      for (let d2 = 0; d2 < this.inputDimension; d2 += 1) {\n        covMatrixInput.data[(d1 * this.inputDimension) + d2] =\n          this.covariance[(d1 * this.dimension) + d2];\n      }\n    }\n    const inv = covMatrixInput.pinv();\n    const covarianceGS = Matrix(this.inputDimension, this.outputDimension);\n    for (let d1 = 0; d1 < this.inputDimension; d1 += 1) {\n      for (let d2 = 0; d2 < this.outputDimension; d2 += 1) {\n        covarianceGS.data[(d1 * this.outputDimension) + d2] =\n          this.covariance[(d1 * this.dimension) + this.inputDimension + d2];\n      }\n    }\n    const covarianceSG = Matrix(this.outputDimension, this.inputDimension);\n    for (let d1 = 0; d1 < this.outputDimension; d1 += 1) {\n      for (let d2 = 0; d2 < this.inputDimension; d2 += 1) {\n        covarianceSG.data[(d1 * this.inputDimension) + d2] =\n          this.covariance[((this.inputDimension + d1) * this.dimension) + d2];\n      }\n    }\n    const tmptmptmp = inv.matrix.product(covarianceGS);\n    const covarianceMod = covarianceSG.product(tmptmptmp);\n    this.outputCovariance = Array(this.outputDimension ** 2).fill(0);\n    for (let d1 = 0; d1 < this.outputDimension; d1 += 1) {\n      for (let d2 = 0; d2 < this.outputDimension; d2 += 1) {\n        this.outputCovariance[(d1 * this.outputDimension) + d2] =\n          this.covariance[((this.inputDimension + d1) * this.dimension) +\n            this.inputDimension + d2] -\n            covarianceMod.data[(d1 * this.outputDimension) + d2];\n      }\n    }\n  },\n};\n\n/**\n * Multivariate Gaussian Distribution factory function.\n * Full covariance, optionally multimodal with support for regression.\n *\n * @function\n * @param {Number} [inputDimension=1]      Dimension of the input modality\n * @param {Number} [outputDimension=0]     Dimension of the output\n * modality (positive for regression, otherwise 0 for recognition).\n * @param {String} [covarianceMode='full'] covariance mode (full vs\n * diagonal)\n * @return {baseGaussianPrototype|bimodalGaussianPrototype}\n *\n * @property {boolean} bimodal           Specifies if the distribution is\n * bimodal (for regression use)\n * @property {number}  inputDimension    input dimension\n * @property {number}  outputDimension   output dimension\n * @property {number}  dimension         Total dimension\n * @property {Array}   mean              Distribution mean\n * @property {Array}   covariance        Distribution covariance\n * @property {Array}   inverseCovariance Inverse covariance\n */\nexport default function GaussianDistribution(\n  inputDimension = 1,\n  outputDimension = 0,\n  covarianceMode = 'full',\n) {\n  const bimodal = outputDimension > 0;\n  const dimension = inputDimension + outputDimension;\n  const proto = bimodal ?\n    Object.assign({}, baseGaussianPrototype, bimodalGaussianPrototype) :\n    baseGaussianPrototype;\n  const data = Object.assign(\n    {\n      bimodal,\n      dimension,\n      inputDimension,\n      outputDimension,\n      covarianceMode,\n      covarianceDeterminant: 0,\n    },\n    bimodal ? { covarianceDeterminantInput: 0 } : {},\n  );\n  const dist = Object.assign(\n    Object.create(proto),\n    data,\n  );\n  dist.allocate();\n  return dist;\n}\n","const trainerPrototype = /** @lends withEMTraining */ {\n  /**\n   * Train the model from the given training set, using the\n   * Expectation-Maximisation algorithm.\n   *\n   * @param  {TrainingSet} trainingSet Training Set\n   * @return {Object} Parameters of the trained model\n   */\n  train(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) {\n      throw new Error('The training set is empty');\n    }\n\n    this.initTraining(trainingSet);\n\n    let logLikelihood = -Infinity;\n    let iterations = 0;\n    let previousLogLikelihood = logLikelihood;\n\n    while (!this.converged(iterations, logLikelihood, previousLogLikelihood)) {\n      previousLogLikelihood = logLikelihood;\n      logLikelihood = this.updateTraining(trainingSet);\n\n      const pctChg =\n        100 * Math.abs((logLikelihood - previousLogLikelihood) / previousLogLikelihood);\n      if (Number.isNaN(pctChg) && iterations > 1) {\n        throw new Error('An error occured during training');\n      }\n\n      iterations += 1;\n    }\n\n    this.terminateTraining();\n    return this.params;\n  },\n\n  /**\n   * Return `true` if the training has converged according to the criteria\n   * specified at the creation\n   *\n   * @param  {number} iteration       Current iteration\n   * @param  {number} logProb         Current log-likelihood of the training set\n   * @param  {number} previousLogProb Previous log-likelihood of the training\n   * set\n   * @return {boolean}\n   *\n   * @private\n   */\n  converged(iteration, logProb, previousLogProb) {\n    if (iteration >= this.convergenceCriteria.maxIterations) return true;\n    if (this.convergenceCriteria.maxIterations >= this.convergenceCriteria.minIterations) {\n      return iteration >= this.convergenceCriteria.maxIterations;\n    }\n    if (iteration < this.convergenceCriteria.minIterations) return false;\n    const percentChange = 100 * Math.abs((logProb - previousLogProb) / logProb);\n    return percentChange <= this.convergenceCriteria.percentChange;\n  },\n};\n\n/**\n * Add ABSTRACT training capabilities to a model for which the training process\n * use the Expectation-Maximisation (EM) algorithm. This is used in particular\n * for training GMMs and HMMs.\n *\n * The final instance needs to implement `initTraining`, `updateTraining` and\n * `terminateTraining` methods. `updateTraining` will be called until the\n * convergence criteria are met. Convergence depends on\n * - A minimum number of iterations\n * - A maximum number of iterations\n * - A threshold on the relative change of the log-likelihood of the training\n * data between successive iterations.\n *\n * @todo details\n *\n * @param  {Object} [o]                   Source object\n * @param  {Object} [convergenceCriteria] Set of convergence criteria\n * @param  {number} [convergenceCriteria.percentChange=1e-3] Threshold in % of\n * the relative change of the log-likelihood, under which the training stops.\n * @param  {number} [convergenceCriteria.minIterations=5]    minimum number of iterations\n * @param  {number} [convergenceCriteria.maxIterations=100]  maximum number of iterations\n * @return {Object}\n */\nexport default function withEMTraining(\n  o,\n  convergenceCriteria = {\n    percentChange: 1e-3,\n    minIterations: 5,\n    maxIterations: 100,\n  },\n) {\n  return Object.assign(o, trainerPrototype, { convergenceCriteria });\n}\n","import { isBaseModel } from '../core/model_base_mixin';\nimport GaussianDistribution from '../common/gaussian_distribution';\n\n/**\n * GMM Base prototype\n * @type {Object}\n * @ignore\n */\nconst gmmBasePrototype = /** @lends withGMMBase */ {\n  /**\n   * Allocate the training variables\n   * @private\n   */\n  allocate() {\n    this.params.components = Array.from(\n      Array(this.params.gaussians),\n      () => new GaussianDistribution(\n        this.params.inputDimension,\n        this.params.outputDimension,\n        this.params.covarianceMode,\n      ),\n    );\n    this.params.mixtureCoeffs = Array(this.params.gaussians).fill(0);\n    this.beta = new Array(this.params.gaussians).fill(0);\n  },\n\n  /**\n   * Compute the likelihood of an observation given the GMM's parameters\n   * @param  {Array<Number>} observation Observation vector\n   * @return {Number}\n   */\n  likelihood(observation) {\n    let likelihood = 0;\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.beta[c] = this.componentLikelihood(observation, c);\n      likelihood += this.beta[c];\n    }\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.beta[c] /= likelihood;\n    }\n\n    return likelihood;\n  },\n\n  /**\n   * Compute the likelihood of an observation for a single component\n   * @param  {Array<Number>} observation Observation vector\n   * @param  {Number} mixtureComponent Component index\n   * @return {Number}\n   * @private\n   */\n  componentLikelihood(observation, mixtureComponent) {\n    if (mixtureComponent >= this.params.gaussians) {\n      throw new Error('The index of the Gaussian Mixture Component is out of bounds');\n    }\n    return this.params.mixtureCoeffs[mixtureComponent] *\n        this.params.components[mixtureComponent].likelihood(observation);\n  },\n\n  /**\n   * Update the inverse covariance of each Gaussian component\n   * @private\n   */\n  updateInverseCovariances() {\n    this.params.components.forEach((c) => {\n      c.updateInverseCovariance();\n    });\n    try {\n      this.params.components.forEach((c) => {\n        c.updateInverseCovariance();\n      });\n    } catch (e) {\n      throw new Error('Matrix inversion error: varianceoffset must be too small');\n    }\n  },\n\n  /**\n   * Normalize the mixing coefficients of the Gaussian mixture\n   * @private\n   */\n  normalizeMixtureCoeffs() {\n    let normConst = 0;\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      normConst += this.params.mixtureCoeffs[c];\n    }\n    if (normConst > 0) {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.params.mixtureCoeffs[c] /= normConst;\n      }\n    } else {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.params.mixtureCoeffs[c] = 1 / this.params.gaussians;\n      }\n    }\n  },\n\n  /**\n   * Regularize the covariances\n   * @private\n   */\n  regularize() {\n    this.params.components.forEach((c) => {\n      c.regularize(this.currentRegularization);\n    });\n  },\n};\n\n/**\n * Bimodal (regression) GMM Prototype\n * @type {Object}\n * @ignore\n */\nconst gmmBimodalPrototype = /** @lends withGMMBase */ {\n  /**\n   * Estimate the output values corresponding to the input observation, by\n   * regression given the GMM's parameters. This method is called Gaussian\n   * Mixture Regression (GMR).\n   *\n   * @param  {Array<Number>} inputObservation Observation on the input modality\n   * @return {Array<Number>} Output values (length = outputDimension)\n   */\n  regression(inputObservation) {\n    this.results.outputValues = Array(this.params.outputDimension).fill(0);\n    this.results.outputCovariance = Array(this.params.covarianceMode === 'full' ? this.params.outputDimension ** 2 : this.params.outputDimension).fill(0);\n    let tmpOutputValues;\n\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      tmpOutputValues = this.params.components[c].regression(inputObservation);\n      for (let d = 0; d < this.params.outputDimension; d += 1) {\n        this.results.outputValues[d] += this.beta[c] * tmpOutputValues[d];\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.outputDimension; d2 += 1) {\n            this.results.outputCovariance[(d * this.params.outputDimension) + d2] +=\n              (this.beta[c] ** 2) *\n              this.params.components[c].outputCovariance[(d * this.params.outputDimension) + d2];\n          }\n        } else {\n          this.results.outputCovariance[d] +=\n            (this.beta[c] ** 2) * this.params.components[c].outputCovariance[d];\n        }\n      }\n    }\n    return this.results.outputValues;\n  },\n};\n\n/**\n * Add basic GMM capabilities to a single-class model. This enables the\n * computation of the likelihoods and regression operations common to\n * training and prediction\n *\n * @see withGMMTraining\n * @see withGMMPrediction\n *\n * @param  {ModelBase} o Source Model\n * @return {GMMBaseModel}\n *\n * @throws {Error} is o is not a ModelBase\n */\nexport default function withGMMBase(o) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  return Object.assign(\n    o,\n    gmmBasePrototype,\n    o.params.bimodal ? gmmBimodalPrototype : {},\n  );\n}\n","import ModelBase from '../core/model_base_mixin';\nimport withKMeansTraining from '../kmeans/kmeans_training_mixin';\n\n/**\n * GMM Training Prototype\n * @type {Object}\n * @ignore\n */\nconst gmmTrainerPrototype = /** @lends withGMMTraining */ {\n  /**\n   * Initialize the EM Training process\n   * @param  {TrainingSet} trainingSet Training set\n   */\n  initTraining(trainingSet) {\n    this.allocate();\n    this.initParametersToDefault(trainingSet.standardDeviation());\n    this.initMeansWithKMeans(trainingSet);\n    this.initCovariances(trainingSet);\n    this.regularize();\n    this.updateInverseCovariances();\n  },\n\n  /**\n   * Initialize the model parameters to their default values\n   * @param  {Array<Number>} dataStddev Standard deviation of the training data\n   * @private\n   */\n  initParametersToDefault(dataStddev) {\n    let normCoeffs = 0;\n    this.currentRegularization = dataStddev.map(std => Math.max(\n      this.params.regularization.absolute,\n      this.params.regularization.relative * std,\n    ));\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      if (this.params.covarianceMode === 'full') {\n        this.params.components[c].covariance = Array(this.params.dimension ** 2)\n          .fill(this.params.regularization.absolute / 2);\n      } else {\n        this.params.components[c].covariance = Array(this.params.dimension).fill(0);\n      }\n      this.params.components[c].regularize(this.currentRegularization);\n      this.params.mixtureCoeffs[c] = 1 / this.params.gaussians;\n      normCoeffs += this.params.mixtureCoeffs[c];\n    }\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.params.mixtureCoeffs[c] /= normCoeffs;\n    }\n  },\n\n  /**\n   * Initialize the means of the model using a K-Means algorithm\n   *\n   * @see withKMeansTraining\n   *\n   * @param  {TrainingSet} trainingSet training set\n   * @private\n   */\n  initMeansWithKMeans(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) return;\n    const kmeans = withKMeansTraining(\n      ModelBase({\n        inputDimension: this.params.inputDimension,\n        outputDimension: this.params.outputDimension,\n      }),\n      this.params.gaussians,\n      { initialization: 'data' },\n    );\n    const kmeansParams = kmeans.train(trainingSet);\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.params.components[c].mean = kmeansParams.centers[c];\n    }\n  },\n\n  /**\n   * Initialize the covariances of the model from the training set\n   *\n   * @param  {TrainingSet} trainingSet training set\n   * @private\n   */\n  initCovariances(trainingSet) {\n    // TODO: simplify with covariance symmetricity\n    // TODO: If Kmeans, covariances from cluster members\n    if (!trainingSet || trainingSet.empty()) return;\n\n    for (let n = 0; n < this.params.gaussians; n += 1) {\n      this.params.components[n].covariance = Array((this.params.covarianceMode === 'full') ? this.params.dimension ** 2 : this.params.dimension).fill(0);\n    }\n\n    const gmeans = Array(this.params.gaussians * this.params.dimension).fill(0);\n    const factor = Array(this.params.gaussians).fill(0);\n    trainingSet.forEach((phrase) => {\n      const step = Math.floor(phrase.length / this.params.gaussians);\n      let offset = 0;\n      for (let n = 0; n < this.params.gaussians; n += 1) {\n        for (let t = 0; t < step; t += 1) {\n          for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n            gmeans[(n * this.params.dimension) + d1] += phrase.get(offset + t, d1);\n            if (this.params.covarianceMode === 'full') {\n              for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n                this.params.components[n]\n                  .covariance[(d1 * this.params.dimension) + d2] +=\n                  phrase.get(offset + t, d1) * phrase.get(offset + t, d2);\n              }\n            } else {\n              this.params.components[n].covariance[d1] +=\n                phrase.get(offset + t, d1) ** 2;\n            }\n          }\n        }\n        offset += step;\n        factor[n] += step;\n      }\n    });\n\n    for (let n = 0; n < this.params.gaussians; n += 1) {\n      for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n        gmeans[(n * this.params.dimension) + d1] /= factor[n];\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n            this.params.components[n].covariance[(d1 * this.params.dimension) + d2] /= factor[n];\n          }\n        } else {\n          this.params.components[n].covariance[d1] /= factor[n];\n        }\n      }\n    }\n\n    for (let n = 0; n < this.params.gaussians; n += 1) {\n      for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n            this.params.components[n].covariance[(d1 * this.params.dimension) + d2] -=\n              gmeans[(n * this.params.dimension) + d1] *\n              gmeans[(n * this.params.dimension) + d2];\n          }\n        } else {\n          this.params.components[n].covariance[d1] -=\n            gmeans[(n * this.params.dimension) + d1] ** 2;\n        }\n      }\n    }\n  },\n\n  /**\n   * Update the EM Training process (1 EM iteration).\n   * @param  TrainingSet trainingSet training set\n   */\n  updateTraining(trainingSet) {\n    let logProb = 0;\n    let totalLength = 0;\n    trainingSet.forEach((phrase) => {\n      totalLength += phrase.length;\n    });\n    const phraseIndices = Object.keys(trainingSet.phrases);\n\n    const p = Array.from(\n      Array(this.params.gaussians),\n      () => new Array(totalLength).fill(0),\n    );\n    const E = Array(this.params.gaussians).fill(0);\n    let tbase = 0;\n\n    trainingSet.forEach((phrase) => {\n      for (let t = 0; t < phrase.length; t += 1) {\n        let normConst = 0;\n        for (let c = 0; c < this.params.gaussians; c += 1) {\n          p[c][tbase + t] = this.componentLikelihood(phrase.getFrame(t), c);\n\n          if (p[c][tbase + t] === 0 ||\n            Number.isNaN(p[c][tbase + t]) ||\n            p[c][tbase + t] === +Infinity) {\n            p[c][tbase + t] = 1e-100;\n          }\n          normConst += p[c][tbase + t];\n        }\n        for (let c = 0; c < this.params.gaussians; c += 1) {\n          p[c][tbase + t] /= normConst;\n          E[c] += p[c][tbase + t];\n        }\n        logProb += Math.log(normConst);\n      }\n      tbase += phrase.length;\n    });\n\n    // Estimate Mixture coefficients\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.params.mixtureCoeffs[c] = E[c] / totalLength;\n    }\n\n    // Estimate means\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      for (let d = 0; d < this.params.dimension; d += 1) {\n        this.params.components[c].mean[d] = 0;\n        tbase = 0;\n        for (let pix = 0; pix < phraseIndices.length; pix += 1) {\n          const phrase = trainingSet.phrases[phraseIndices[pix]];\n          for (let t = 0; t < phrase.length; t += 1) {\n            this.params.components[c].mean[d] +=\n              p[c][tbase + t] * phrase.get(t, d);\n          }\n          tbase += phrase.length;\n        }\n        this.params.components[c].mean[d] /= E[c];\n      }\n    }\n\n    // estimate covariances\n    if (this.params.covarianceMode === 'full') {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n          for (let d2 = d1; d2 < this.params.dimension; d2 += 1) {\n            this.params.components[c].covariance[(d1 * this.params.dimension) + d2] = 0;\n            tbase = 0;\n            for (let pix = 0; pix < phraseIndices.length; pix += 1) {\n              const phrase = trainingSet.phrases[phraseIndices[pix]];\n              for (let t = 0; t < phrase.length; t += 1) {\n                this.params.components[c].covariance[(d1 * this.params.dimension) + d2] +=\n                  p[c][tbase + t] *\n                  (phrase.get(t, d1) - this.params.components[c].mean[d1]) *\n                  (phrase.get(t, d2) - this.params.components[c].mean[d2]);\n              }\n              tbase += phrase.length;\n            }\n            this.params.components[c].covariance[(d1 * this.params.dimension) + d2] /= E[c];\n            if (d1 !== d2) {\n              this.params.components[c].covariance[(d2 * this.params.dimension) + d1] =\n                this.params.components[c].covariance[(d1 * this.params.dimension) + d2];\n            }\n          }\n        }\n      }\n    } else {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n          this.params.components[c].covariance[d1] = 0;\n          tbase = 0;\n          for (let pix = 0; pix < phraseIndices.length; pix += 1) {\n            const phrase = trainingSet.phrases[phraseIndices[pix]];\n            for (let t = 0; t < phrase.length; t += 1) {\n              const value = (phrase.get(t, d1) - this.params.components[c].mean[d1]);\n              this.params.components[c].covariance[d1] +=\n                    p[c][tbase + t] * value * value;\n            }\n            tbase += phrase.length;\n          }\n          this.params.components[c].covariance[d1] /= E[c];\n        }\n      }\n    }\n\n    this.regularize();\n    this.updateInverseCovariances();\n\n    return logProb;\n  },\n\n  /**\n   * Terminate the EM Training process\n   */\n  terminateTraining() {},\n};\n\n/**\n * Add GMM Training capabilities to a GMM Model\n * @param  {GMMBase} o               Source GMM Model\n * @param  {Number} [gaussians=1]    Number of Gaussian components\n * @param  {Object} [regularization] Regularization parameters\n * @param  {Number} [regularization.absolute=1e-3] Absolute regularization\n * @param  {Number} [regularization.relative=1e-2] Relative Regularization\n (relative to the training set's variance along each dimension)\n * @param  {String} [covarianceMode='full'] Covariance mode ('full' or diagonal)\n * @return {BMMBase}\n */\nexport default function withGMMTraining(\n  o,\n  gaussians = 1,\n  regularization = { absolute: 1e-3, relative: 1e-2 },\n  covarianceMode = 'full',\n) {\n  if (!Object.keys(o).includes('params')) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  return Object.assign(\n    o,\n    gmmTrainerPrototype,\n    {\n      params: {\n        ...o.params,\n        gaussians,\n        regularization,\n        covarianceMode,\n      },\n    },\n  );\n}\n","import ModelBase from './model_base_mixin';\n\n/**\n * Multiclass Models Mixin\n * @type {Object}\n * @ignore\n */\nconst MulticlassBasePrototype = /** @lends MulticlassModelBase */{\n  /**\n   * Get the number of classes in the model\n   * @return {number} number of classes\n   */\n  size() {\n    return Object.keys(this.models).length;\n  },\n\n  /**\n   * Check if a class with the given label exists\n   * @param  {string} label Class label\n   * @return {boolean}\n   */\n  includes(label) {\n    return Object.keys(this.models).includes(label);\n  },\n\n  /**\n   * Remove a class by label\n   * @param  {string} label Class label\n   */\n  remove(label) {\n    if (this.includes(label)) {\n      delete this.models[label];\n    }\n  },\n};\n\n/**\n * Create an abstract Multiclass Model\n * @param       {number]} inputDimension  input dimension\n * @param       {number]} outputDimension output dimension\n * @param       {Object} parameters       additional parameters to copy\n * @function\n */\nexport default function MulticlassModelBase({\n  inputDimension,\n  outputDimension,\n  ...parameters\n}) {\n  return Object.assign(\n    ModelBase({ inputDimension, outputDimension, ...parameters }),\n    MulticlassBasePrototype,\n  );\n}\n","/**\n * Add multiclass training capabilities to a model. It takes as argument\n * the training function called to train each class of the training set.\n *\n * @param  {MulticlassModelBase} o Source model\n * @param  {Function}  trainingFunction Training function for a single class\n * @return {MulticlassModelBase}\n */\nexport default function withMulticlassTraining(\n  o,\n  trainingFunction,\n) {\n  return Object.assign(\n    o,\n    /** @lends withMulticlassTraining */ {\n      /**\n       * Train the model, optionally specifying a set of classes to train\n       *\n       * @param  {TrainingSet} trainingSet   Training data set\n       * @param  {undefined|Array<String>} [labels=undefined] Labels\n       * corresponding to the classes to be trained (all if unspecified)\n       * @return {Object} the parameters of the trained model\n       *\n       * @throws {Error} if the training set is empty\n       * @throws {Error} if one of the specified class does not exist\n       */\n      train(trainingSet, labels = undefined) {\n        if (!trainingSet || trainingSet.empty()) {\n          throw new Error('The training set is empty');\n        }\n        if (labels) {\n          labels.forEach((l) => {\n            if (!this.includes(l)) {\n              throw new Error(`Class labeled ${l} does not exist`);\n            }\n          });\n        }\n\n        this.params.classes = {};\n        const labs = labels || trainingSet.labels();\n        labs.forEach((label) => {\n          const ts = trainingSet.getPhrasesOfClass(label);\n          // console.log(ts);\n          this.params.classes[label] = trainingFunction(ts);\n        });\n        return this.params;\n      },\n    },\n  );\n}\n","/**\n * Circular Buffer prototype\n *\n * @property {number}  capacity Buffer capacity\n * @property {number}  length Current buffer length\n * @property {boolean} full Specifies if the buffer is full\n *\n * @ignore\n */\nconst circularBufferPrototype = /** @lends CircularBuffer */ {\n  /**\n   * Clear the buffer contents\n   */\n  clear() {\n    this.length = 0;\n    this.index = 0;\n    this.full = false;\n    this.buffer = [];\n  },\n\n  /**\n   * Push a value to the buffer\n   * @param  {*} value data value (any type)\n   */\n  push(value) {\n    if (this.full) {\n      this.buffer[this.index] = value;\n      this.index = (this.index + 1) % this.capacity;\n    } else {\n      this.buffer.push(value);\n      this.length += 1;\n      this.full = (this.length === this.capacity);\n    }\n  },\n\n  /**\n   * Get the value at a given index\n   * @param  {number} idx data index\n   * @return {anything}   value at index\n   */\n  get(idx) {\n    return this.buffer[(idx + this.index) % this.capacity];\n  },\n\n  /**\n   * Fill the buffer with a constant value\n   * @param  {*} value data value (any type)\n   */\n  fill(value) {\n    this.length = this.capacity;\n    this.index = 0;\n    this.full = true;\n    this.buffer = Array(this.capacity).fill(value);\n  },\n\n  /**\n   * Iterate over the buffer's data\n   * @param  {Function} callback Callback function\n   * (@see Array.prototype.forEach).\n   */\n  forEach(callback) {\n    for (let i = 0; i < this.length; i += 1) {\n      callback(this.buffer[(i + this.index) % this.capacity], i);\n    }\n  },\n\n  /**\n   * Get an array of the buffer current values (ordered)\n   * @return {Array} Buffer contents\n   */\n  values() {\n    return this.buffer.slice(this.index)\n      .concat(this.buffer.slice(0, this.index));\n  },\n};\n\n/**\n * Circular Buffer Data Structure (any data type)\n * @param  {number} capacity Buffer capacity\n * @return {circularBufferPrototype}\n * @function\n *\n * @property {number}  capacity Buffer capacity\n * @property {number}  length Current buffer length\n * @property {boolean} full Specifies if the buffer is full\n */\nexport default function CircularBuffer(capacity) {\n  const buffer = Object.create(circularBufferPrototype);\n  buffer.capacity = capacity;\n  buffer.clear();\n  return buffer;\n}\n","import { isBaseModel } from './model_base_mixin';\nimport CircularBuffer from '../common/circular_buffer';\n\n/**\n * Prototype for models with prediction capabilities\n * @param  {Boolean} bimodal Specifies whether the model is bimodal\n * @return {Object}\n * @ignore\n */\nconst predictionBasePrototype = bimodal => (/** @lends withAbtractPrediction */{\n  /**\n   * Likelihood Buffer\n   * @type {CircularBuffer}\n   * @private\n   */\n  likelihoodBuffer: CircularBuffer(1),\n\n  /**\n   * Likelihood Window (used to smooth the log-likelihoods over several frames)\n   * @param {Number} [lw] Size (in frames) of the likelihood smoothing window\n   */\n  setLikelihoodWindow(lw) {\n    this.likelihoodWindow = lw;\n    this.likelihoodBuffer = CircularBuffer(lw);\n  },\n\n  /**\n   * Reset the prediction process\n   * @return {Modelbase} the model\n   */\n  reset() {\n    this.likelihoodBuffer.clear();\n    return this;\n  },\n\n  /**\n   * Update the predictions with a new observation\n   * @param  {Array<Number>} observation Observation vector\n   * @return {Object} Prediction results\n   *\n   * @todo document results data structure\n   */\n  predict(observation) {\n    const likelihood = this.likelihood(observation);\n    if (bimodal) {\n      this.regression(observation);\n    }\n    this.updateResults(likelihood);\n    return this.results;\n  },\n\n  /**\n   * Update the prediction results\n   * @param  {Number} instantLikelihood Instantaneous likelihood\n   * @private\n   */\n  updateResults(instantLikelihood) {\n    this.results.instantLikelihood = instantLikelihood;\n    this.likelihoodBuffer.push(Math.log(instantLikelihood));\n    this.results.logLikelihood = 0;\n    const bufSize = this.likelihoodBuffer.length;\n    for (let i = 0; i < bufSize; i += 1) {\n      this.results.logLikelihood += this.likelihoodBuffer.get(i);\n    }\n    this.results.logLikelihood /= bufSize;\n  },\n});\n\n/**\n * Add ABSTRACT prediction capabilities to an existing model\n * @param  {Modelbase} o                 Source model\n * @param  {Number} [likelihoodWindow=1] Size of the likelihood smoothing window\n * @return {Modelbase}\n */\nexport default function withAbtractPrediction(o, likelihoodWindow = 1) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  const results = Object.assign(\n    { instantLikelihood: 0, logLikelihood: 0 },\n    o.params.bimodal ? { outputValues: [], outputCovariance: [] } : {},\n  );\n  return Object.assign(\n    o,\n    predictionBasePrototype(o.params.bimodal),\n    { results, likelihoodBuffer: CircularBuffer(likelihoodWindow) },\n  );\n}\n","/**\n * Check if the specification is respected for a given parameter and value,\n * and clip if relevant.\n *\n * @ignore\n *\n * @param  {String}        model      Stream Operator Name (for logging)\n * @param  {String}        parameter     Attribute name\n * @param  {Specification} specification Attribute specification\n * @param  {*}             value         Attribute value\n * @return {*}                           Type-checked parameter value\n */\nfunction checkSpec(model, parameter, specification, value) {\n  if (!specification) return;\n  if (specification.constructor === Array && !specification.includes(value)) {\n    throw new Error(`Attribute '${parameter}' (value: '${value}') is not allowed for model '${model}' (options: [${specification}]).`);\n  } else if (specification.constructor === Object) {\n    if (Object.keys(specification).includes('min') && value < specification.min) {\n      throw new Error(`Attribute '${parameter}' (value: ${value}) is inferior to the minimum required value of ${specification.min} for model '${model}'.`);\n    }\n    if (Object.keys(specification).includes('max') && value > specification.max) {\n      throw new Error(`Attribute '${parameter}' (value: ${value}) is superior to the maximum required value of ${specification.min} for model '${model}'.`);\n    }\n  } else if (typeof specification === 'function') {\n    if (!specification(value)) {\n      throw new Error(`Attribute '${parameter}' (value: ${value}) is incompatible with model '${model}'.`);\n    }\n  }\n}\n\n/**\n * Check the parameters of a model and return the parameters of the\n * output stream.\n *\n * The specification should be a structure of the form:\n * ```\n * const streamSpecification = {\n *   <parameter name>: {\n *     required: <boolean>,\n *     check: <null || Array || { min: <minimum value>, max: <maximum value>} || Function >,\n *     transform: Function,\n *   },\n * };\n * ```\n *\n * @param  {String} model      Name of the model for logging\n * @param  {Object} specification I/O Stream Specification\n * @param  {Object} values        Attributes of the input stream\n * @return {Object}               Attributes of the output stream\n *\n * @example\n * import setupStreamAttributes from 'stream';\n *\n * const specification = {\n *   type: {\n *     required: false,\n *     check: null,\n *     transform: x => x || null,\n *   },\n *   format: {\n *     required: true,\n *     check: ['scalar', 'vector'],\n *     transform: x => x,\n *   },\n *   size: {\n *     required: true,\n *     check: { min: 1 },\n *     transform: x => 2 * x,\n *   },\n *   stuff: {\n *     required: true,\n *     check: x => Math.log2(x) === Math.floor(Math.log2(x)),\n *     transform: x => Math.log2(x),\n *   },\n * };\n *\n * const values = {\n *   type: 'anything',\n *   format: 'vector',\n *   size: 3,\n *   stuff: 8,\n *   another: 'one',\n * };\n *\n * setupStreamAttributes('module name', specification, values);\n * // Returns:\n * // {\n * //   type: 'anything',\n * //   format: 'vector',\n * //   size: 6,\n * //   stuff: 3,\n * //   another: 'one',\n * // }\n */\nexport default function validateParameters(model, specification, values) {\n  const parameters = Object.assign({}, values);\n  Object.keys(specification).forEach((attr) => {\n    const spec = specification[attr];\n\n    // Check for required parameters\n    if (spec.required && !Object.keys(values).includes(attr)) {\n      throw new Error(`Stream parameter '${attr}' is required for model '${model}'.`);\n    }\n\n    // Check the validity of the input parameters\n    checkSpec(model, attr, spec.check, values[attr]);\n\n    parameters[attr] = spec.transform ?\n      spec.transform(values[attr]) :\n      values[attr];\n  });\n  return parameters;\n}\n","import validateParameters from '../common/validation';\nimport { isBaseModel } from '../core/model_base_mixin';\n\nconst gmmParameterSpec = gaussians => ({\n  gaussians: {\n    required: true,\n    check: { min: 1 },\n  },\n  regularization: {\n    required: true,\n    check: ({ absolute, relative }) =>\n      (absolute && relative && absolute > 0 && relative > 0),\n  },\n  covarianceMode: {\n    required: true,\n    check: ['full', 'diagonal'],\n  },\n  mixtureCoeffs: {\n    required: true,\n    check: m => m.length === gaussians,\n  },\n  components: {\n    required: true,\n    check: c => c.length === gaussians,\n  },\n});\n\n/**\n * Add GMM prediction capabilities to a single-class model. Mostly, this checks\n * the validity of the model parameters\n *\n * @todo validate gaussian components\n *\n * @param  {GMMBaseModel} o Source Model\n * @return {GMMBaseModel}\n *\n * @throws {Error} is o is not a ModelBase\n */\nexport default function withGMMPrediction(o) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  validateParameters('GMM', gmmParameterSpec(o.params.gaussians), o.params);\n  return Object.assign(\n    o,\n    { beta: new Array(o.params.gaussians).fill(0) },\n  );\n}\n","import { isBaseModel } from './model_base_mixin';\n\n/**\n * Multiclass prediction mixin\n * @type {Object}\n * @ignore\n */\nconst MulticlassPredictionBasePrototype = /** @lends withMulticlassPrediction */ {\n  /**\n   * Likelihood Window (used to smooth the log-likelihoods over several frames)\n   * @return {Number}\n   */\n  getLikelihoodWindow() {\n    return this.likelihoodWindow;\n  },\n\n  /**\n   * Likelihood Window (used to smooth the log-likelihoods over several frames)\n   * @param {Number} [lw] Size (in frames) of the likelihood smoothing window\n   */\n  setLikelihoodWindow(lw) {\n    this.likelihoodWindow = lw;\n    Object.keys(this.models).forEach((label) => {\n      this.models[label].setLikelihoodWindow(lw);\n    });\n  },\n\n  /**\n   * Reset the prediction process. This is particularly important for temporal\n   * models such as HMMs, that depends on previous observations.\n   */\n  reset() {\n    Object.values(this.models).forEach(m => m.reset());\n    this.results = {\n      labels: [],\n      instantLikelihoods: [],\n      smoothedLikelihoods: [],\n      smoothedLogLikelihoods: [],\n      smoothedNormalizedLikelihoods: [],\n      likeliest: null,\n      classes: {},\n    };\n    if (this.params.bimodal) {\n      this.resetBimodal();\n    }\n  },\n\n  /**\n   * Make a prediction from a new observation (updates the results member)\n   * @param  {Array<Number>} observation Observation vector\n   */\n  predict(observation) {\n    Object.values(this.models).forEach(m => m.predict(observation));\n    this.updateResults();\n  },\n\n  updateResults() {\n    const labs = Object.keys(this.models).sort();\n    this.results.labels = labs;\n    let normInstant = 0;\n    let normSmoothed = 0;\n    let maxLogLikelihood = -Infinity;\n    this.results.classes = labs\n      .map((lab, i) => {\n        this.results.instantLikelihoods[i] =\n          this.models[lab].results.instantLikelihood;\n        this.results.smoothedLogLikelihoods[i] =\n          this.models[lab].results.logLikelihood;\n        this.results.smoothedLikelihoods[i] =\n          Math.exp(this.results.smoothedLogLikelihoods[i]);\n        normInstant += this.results.instantLikelihoods[i];\n        normSmoothed += this.results.smoothedLikelihoods[i];\n        if (this.results.smoothedLogLikelihoods[i] > maxLogLikelihood) {\n          maxLogLikelihood = this.results.smoothedLogLikelihoods[i];\n          this.results.likeliest = lab;\n        }\n        return { [lab]: this.models[lab].results };\n      })\n      .reduce((o, x) => ({ ...o, ...x }), {});\n    this.results.smoothedNormalizedLikelihoods =\n      this.results.smoothedLikelihoods.map(x => x / normSmoothed);\n    this.results.instantNormalizedLikelihoods =\n      this.results.instantLikelihoods.map(x => x / normInstant);\n    if (this.params.bimodal) {\n      this.updateRegressionResults();\n    }\n  },\n};\n\nconst MulticlassPredictionBimodalPrototype = {\n  resetBimodal() {\n    this.results.outputValues = [];\n    this.results.outputCovariance = [];\n  },\n\n  updateRegressionResults() {\n    if (this.params.multiClassRegressionEstimator === 'likeliest') {\n      this.results.outputValues =\n        this.models[this.results.likeliest].results.outputValues;\n      this.results.outputCovariance =\n        this.models[this.results.likeliest].results.outputCovariance;\n    } else if (this.params.multiClassRegressionEstimator === 'mixture') {\n      this.results.outputValues = Array(this.outputDimension).fill(0);\n      this.results.outputCovariance = Array(this.outputDimension ** (this.configuration.covarianceMode === 'full' ? 2 : 1)).fill(0);\n      this.results.labels.forEach((lab) => {\n        this.results.outputValues.map((x, i) => x + (\n          this.results.smoothedNormalizedLikelihoods[i] *\n          this.models[lab].results.outputValues[i]\n        ));\n        this.results.outputCovariance.map((x, i) => x + (\n          this.results.smoothedNormalizedLikelihoods[i] *\n          this.models[lab].results.outputCovariance[i]\n        ));\n      });\n    } else {\n      throw new Error('Unknown regression estimator, use `likeliest` or `mixture`');\n    }\n  },\n};\n\n/**\n * Add multiclass prediction capabilities to a multiclass model\n * @param  {MulticlassModelBase} o Source model\n * @param  {String} [multiClassRegressionEstimator='likeliest'] Type of\n * regression estimator:\n * - `likeliest` selects the output values from the likeliest class\n * - `mixture` computes the output values as the weighted sum of the\n * contributions of each class, weighed by their normalized likelihood\n * @return {MulticlassPredictionBasePrototype}\n * @function\n */\nexport default function withMulticlassPrediction(o, multiClassRegressionEstimator = 'likeliest') {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  const m = Object.assign(\n    o,\n    MulticlassPredictionBasePrototype,\n    o.params.bimodal ? MulticlassPredictionBimodalPrototype : {},\n  );\n  m.params.multiClassRegressionEstimator = multiClassRegressionEstimator;\n  return m;\n}\n","import GaussianDistribution from '../common/gaussian_distribution';\nimport ModelBase from '../core/model_base_mixin';\nimport withEMTraining from '../core/em_training_mixin';\nimport withGMMBase from './gmm_base_mixin';\nimport withGMMTraining from './gmm_training_mixin';\nimport MulticlassModelBase from '../core/multiclass_mixin';\nimport withMulticlassTraining from '../core/multiclass_training_mixin';\nimport withAbtractPrediction from '../core/prediction_mixin';\nimport withGMMPrediction from './gmm_prediction_mixin';\nimport withMulticlassPrediction from '../core/multiclass_prediction_mixin';\n\n/**\n * @typedef {Object} GMMParameters\n * @property {Boolean} bimodal Specifies if the model is bimodal\n * @property {Number} inputDimension Dimension of the input modality\n * @property {Number} outputDimension Dimension of the output modality\n * @property {Number} dimension Total dimension\n * @property {Number} gaussians Number of gaussian components in the mixture\n * @property {String} covarianceMode Covariance mode ('full' or 'diagonal')\n * @property {Array<Number>} mixtureCoeffs mixture coefficients ('weight' of\n * each gaussian component)\n * @property {Array<GaussianDistribution>} components Gaussian components\n */\n\n/**\n * Train a single-class GMM Model.\n *\n * @todo GMM details\n *\n * @param  {TrainingSet} trainingSet                training set\n * @param  {Object} configuration                   Training configuration\n * @param  {Object} [convergenceCriteria=undefined] Convergence criteria of the\n * EM algorithm\n * @return {GMMParameters} Parameters of the trained GMM\n */\nexport function trainGMM(\n  trainingSet,\n  configuration,\n  convergenceCriteria = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const { gaussians, regularization, covarianceMode } = configuration;\n  const model = withGMMTraining(\n    withEMTraining(\n      withGMMBase(ModelBase({\n        inputDimension,\n        outputDimension,\n        ...configuration,\n      })),\n      convergenceCriteria,\n    ),\n    gaussians,\n    regularization,\n    covarianceMode,\n  );\n  return model.train(trainingSet);\n}\n\n/**\n * Train a multi-class GMM Model.\n *\n * @todo GMM details\n *\n * @param  {TrainingSet} trainingSet                training set\n * @param  {Object} configuration                   Training configuration\n * @param  {Object} [convergenceCriteria=undefined] Convergence criteria of the\n * EM algorithm\n * @return {Object} Parameters of the trained GMM\n */\nexport function trainMulticlassGMM(\n  trainingSet,\n  configuration,\n  convergenceCriteria = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const model = withMulticlassTraining(\n    MulticlassModelBase({ inputDimension, outputDimension, ...configuration }),\n    ts => trainGMM(ts, configuration, convergenceCriteria),\n  );\n  return model.train(trainingSet);\n}\n\n/**\n * Create a GMM Predictor from a full set of parameters (generated by trainGMM).\n * @param       {Object} params                       Model parameters\n * @param       {number} [likelihoodWindow=undefined] Likelihoow window size\n * @function\n */\nexport function GMMPredictor(\n  params,\n  likelihoodWindow = undefined,\n) {\n  const model = withGMMPrediction(withAbtractPrediction(\n    withGMMBase(ModelBase(params)),\n    likelihoodWindow,\n  ));\n  params.components.forEach((c, i) => {\n    model.params.components[i] = Object.assign(GaussianDistribution(\n      params.inputDimension,\n      params.outputDimension,\n      params.covarianceMode,\n    ), c);\n  });\n  model.reset();\n  return model;\n}\n\n/**\n * Create a Multiclass GMM Predictor from a full set of parameters\n * (generated by trainMulticlassGMM).\n * @param       {Object} params                       Model parameters\n * @param       {number} [likelihoodWindow=undefined] Likelihoow window size\n * @function\n */\nexport function MulticlassGMMPredictor(\n  params,\n  likelihoodWindow = undefined,\n) {\n  const model = withMulticlassPrediction(MulticlassModelBase(params));\n  model.models = {};\n  Object.keys(params.classes).forEach((label) => {\n    model.models[label] = GMMPredictor(params.classes[label], likelihoodWindow);\n  });\n  model.reset();\n  return model;\n}\n","import { isBaseModel } from '../core/model_base_mixin';\n\n//\n// TODO: hierarchical + exit probabilities methods.\n//\n\n/**\n * HMM Base prototype\n * @type {Object}\n * @ignore\n */\nconst hmmBasePrototype = /** @lends withHMMBase */ {\n  /**\n   * Specifies if the forward algorithm has been initialized\n   * @type {Boolean}\n   * @private\n   */\n  forwardInitialized: false,\n\n  /**\n   * Specifies if the containing multiclass model is isHierarchical\n   * @todo check that\n   * @type {Boolean}\n   * @private\n   */\n  isHierarchical: false,\n\n  /**\n   * Initialize the forward algorithm (See rabiner, 1989)\n   * @param  {Array<Number>} observation Observation vector\n   * @return {Number}                    `ct` (inverse likelihood)\n   */\n  initializeForwardAlgorithm(observation) {\n    let normConst = 0;\n    if (this.params.transitionMode === 'ergodic') {\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.alpha[i] = this.params.prior[i] *\n          this.params.xStates[i].likelihood(observation);\n        normConst += this.alpha[i];\n      }\n    } else {\n      this.alpha = new Array(this.params.states).fill(0);\n      this.alpha[0] = this.params.xStates[0].likelihood(observation);\n      normConst += this.alpha[0];\n    }\n    this.forwardInitialized = true;\n    if (normConst > 0) {\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.alpha[i] /= normConst;\n      }\n      return 1 / normConst;\n    }\n    for (let j = 0; j < this.params.states; j += 1) {\n      this.alpha[j] = 1 / this.params.states;\n    }\n    return 1;\n  },\n\n  /**\n   * Update the forward algorithm (See rabiner, 1989)\n   * @param  {Array<Number>} observation Observation vector\n   * @return {Number}                    `ct` (inverse likelihood)\n   */\n  updateForwardAlgorithm(observation) {\n    let normConst = 0;\n    this.previousAlpha = this.alpha.slice();\n    for (let j = 0; j < this.params.states; j += 1) {\n      this.alpha[j] = 0;\n      if (this.params.transitionMode === 'ergodic') {\n        for (let i = 0; i < this.params.states; i += 1) {\n          this.alpha[j] += this.previousAlpha[i] *\n            this.params.transition[i][j];\n        }\n      } else {\n        this.alpha[j] += this.previousAlpha[j] * this.params.transition[j * 2];\n        if (j > 0) {\n          this.alpha[j] += this.previousAlpha[j - 1] *\n            this.params.transition[((j - 1) * 2) + 1];\n        } else {\n          this.alpha[0] += this.previousAlpha[this.params.states - 1] *\n            this.params.transition[(this.params.states * 2) - 1];\n        }\n      }\n      this.alpha[j] *= this.params.xStates[j].likelihood(observation);\n      normConst += this.alpha[j];\n    }\n    if (normConst > 1e-300) {\n      for (let j = 0; j < this.params.states; j += 1) {\n        this.alpha[j] /= normConst;\n      }\n      return 1 / normConst;\n    }\n    return 0;\n  },\n};\n\n/**\n * Add basic HMM capabilities to a single-class model. This enables the\n * computation of the likelihoods and regression operations common to\n * training and prediction\n *\n * @see withHMMTraining\n * @see withHMMPrediction\n *\n * @param  {ModelBase} o Source Model\n * @return {HMMBaseModel}\n *\n * @throws {Error} is o is not a ModelBase\n */\nexport default function withHMMBase(o) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  return Object.assign(o, hmmBasePrototype);\n}\n","import TrainingSet from '../training_set';\nimport ModelBase from '../core/model_base_mixin';\nimport withGMMBase from '../gmm/gmm_base_mixin';\nimport { trainGMM } from '../gmm';\n\nconst TRANSITION_REGULARIZATION = 1e-5;\n\n/**\n * HMM Training Prototype\n * @type {Object}\n * @ignore\n */\nconst hmmTrainerPrototype = /** @lends withHMMTraining */ {\n  /**\n   * Initialize the EM Training process\n   * @param  {TrainingSet} trainingSet Training set\n   */\n  initTraining(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) return;\n\n    this.allocate(trainingSet);\n    this.initParametersToDefault(trainingSet.standardDeviation());\n    if (this.params.gaussians > 1) {\n      this.initMeansCovariancesWithGMMEM(trainingSet);\n    } else {\n      this.initMeansWithAllPhrases(trainingSet);\n      this.initCovariancesFullyObserved(trainingSet);\n    }\n  },\n\n  /**\n   * Allocate the model's parameters and training variables\n   * @param  {TrainingSet} trainingSet The training set\n   * @private\n   */\n  allocate(trainingSet) {\n    const {\n      inputDimension,\n      outputDimension,\n      gaussians,\n      regularization,\n      covarianceMode,\n    } = this.params;\n    this.params.xStates = Array.from(\n      new Array(this.params.states),\n      () => withGMMBase(ModelBase({\n        inputDimension,\n        outputDimension,\n        gaussians,\n        regularization,\n        covarianceMode,\n      })),\n    );\n    this.params.xStates.forEach(s => s.allocate());\n    this.alpha = new Array(this.params.states).fill(0);\n    this.previousAlpha = new Array(this.params.states).fill(0);\n    this.beta = new Array(this.params.states).fill(0);\n    this.previousBeta = new Array(this.params.states).fill(0);\n\n    // Initialize Algorithm variables\n    // ---------------------------------------\n    const nbPhrases = trainingSet.size();\n    this.gammaSequence = new Array(nbPhrases).fill(null);\n    this.epsilonSequence = new Array(nbPhrases).fill(null);\n    this.gammaSequenceperMixture = new Array(nbPhrases).fill(null);\n    let maxT = 0;\n    let i = 0;\n    trainingSet.forEach((phrase) => {\n      const T = phrase.length;\n      this.gammaSequence[i] = Array.from(\n        new Array(T),\n        () => new Array(this.params.states).fill(0),\n      );\n      if (this.params.transitionMode === 'ergodic') {\n        this.epsilonSequence[i] = Array.from(\n          new Array(T),\n          () => Array.from(\n            new Array(this.params.states),\n            () => new Array(this.params.states).fill(0),\n          ),\n        );\n      } else {\n        this.epsilonSequence[i] = Array.from(\n          new Array(T),\n          () => new Array(this.params.states * 2).fill(0),\n        );\n      }\n      this.gammaSequenceperMixture[i] =\n        new Array(this.params.gaussians).fill(0);\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.gammaSequenceperMixture[i][c] =\n          Array.from(\n            new Array(T),\n            () => new Array(this.params.states).fill(0),\n          );\n      }\n      if (T > maxT) {\n        maxT = T;\n      }\n      i += 1;\n    });\n\n    this.gammaSum = new Array(this.params.states).fill(0);\n    this.gammaSumPerMixture = new Array(this.params.states * this.params.gaussians).fill(0);\n  },\n\n  /**\n   * Update the EM Training process (1 EM iteration).\n   * @param  TrainingSet trainingSet training set\n   */\n  updateTraining(trainingSet) {\n    let logProb = 0;\n\n    // Forward-backward for each phrase\n    // =================================================\n    let phraseIndex = 0;\n    trainingSet.forEach((phrase) => {\n      if (phrase.length > 0) {\n        logProb += this.baumWelchForwardBackward(phrase, phraseIndex);\n      }\n      phraseIndex += 1;\n    });\n    this.baumWelchGammaSum(trainingSet);\n\n    // Re-estimate model parameters\n    // =================================================\n\n    // set covariance and mixture coefficients to zero for each state\n    for (let i = 0; i < this.params.states; i += 1) {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.params.xStates[i].params.mixtureCoeffs[c] = 0;\n        if (this.params.covarianceMode === 'full') {\n          this.params.xStates[i].params.components[c].covariance =\n            new Array(this.params.dimension ** 2).fill(0);\n        } else {\n          this.params.xStates[i].params.components[c].covariance =\n            new Array(this.params.dimension).fill(0);\n        }\n      }\n    }\n\n    this.baumWelchEstimateMixtureCoefficients(trainingSet);\n    this.baumWelchEstimateMeans(trainingSet);\n    this.baumWelchEstimateCovariances(trainingSet);\n    if (this.params.transitionMode === 'ergodic') {\n      this.baumWelchEstimatePrior(trainingSet);\n    }\n    this.baumWelchEstimateTransitions(trainingSet);\n    return logProb;\n  },\n\n  /**\n   * terminate the EM Training process\n   * @param  TrainingSet trainingSet training set\n   */\n  terminateTraining() {\n    this.normalizeTransitions();\n    this.gammaSequence = null;\n    this.epsilonSequence = null;\n    this.gammaSequenceperMixture = null;\n    this.alphaSeq = null;\n    this.betaSeq = null;\n    this.gammaSum = null;\n    this.gammaSumPerMixture = null;\n    this.params.xStates = this.params.xStates.map(s => s.params);\n  },\n\n  /**\n   * Initialize the model parameters to their default values\n   * @param  {Array<Number>} dataStddev Standard deviation of the training data\n   * @private\n   */\n  initParametersToDefault(dataStddev) {\n    if (this.params.transitionMode === 'ergodic') {\n      this.setErgodic();\n    } else {\n      this.setLeftRight();\n    }\n    const currentRegularization = dataStddev.map(std => Math.max(\n      this.params.regularization.absolute,\n      this.params.regularization.relative * std,\n    ));\n    const initCovariance = (this.params.covarianceMode === 'full') ?\n      () => new Array(this.params.dimension ** 2)\n        .fill(this.params.regularization.absolute / 2) :\n      () => new Array(this.params.dimension)\n        .fill(0);\n    for (let i = 0; i < this.params.states; i += 1) {\n      // this.params.xStates[i].initParametersToDefault(dataStddev);\n      const s = this.params.xStates[i];\n      s.currentRegularization = currentRegularization;\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        s.params.components[c].covariance = initCovariance();\n        s.params.components[c].regularize(currentRegularization);\n        s.params.mixtureCoeffs[c] = 1 / this.params.gaussians;\n      }\n    }\n  },\n\n  /**\n   * Initialize the means of each state using all available phrases in the\n   * training set\n   * @param  {TrainingSet} trainingSet Training set\n   * @private\n   */\n  initMeansWithAllPhrases(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) return;\n\n    for (let n = 0; n < this.params.states; n += 1) {\n      for (let d = 0; d < this.params.dimension; d += 1) {\n        this.params.xStates[n].params.components[0].mean[d] = 0.0;\n      }\n    }\n\n    const factor = new Array(this.params.states).fill(0);\n    trainingSet.forEach((phrase) => {\n      const step = Math.floor(phrase.length / this.params.states);\n      let offset = 0;\n      for (let n = 0; n < this.params.states; n += 1) {\n        for (let t = 0; t < step; t += 1) {\n          for (let d = 0; d < this.params.dimension; d += 1) {\n            this.params.xStates[n].params.components[0].mean[d] +=\n              phrase.get(offset + t, d);\n          }\n        }\n        offset += step;\n        factor[n] += step;\n      }\n    });\n    for (let n = 0; n < this.params.states; n += 1) {\n      for (let d = 0; d < this.params.dimension; d += 1) {\n        this.params.xStates[n].params.components[0].mean[d] /= factor[n];\n      }\n    }\n  },\n\n  /**\n   * Initialize the covariance by direct (fully-observed) estimation from the\n   * training data.\n   * @param  {[type]} trainingSet [description]\n   * @private\n   */\n  initCovariancesFullyObserved(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) return;\n\n    for (let n = 0; n < this.params.states; n += 1) {\n      this.params.xStates[n].params.components[0].covariance =\n        new Array(this.params.dimension ** (this.params.covarianceMode === 'full' ? 2 : 1)).fill(0);\n    }\n\n    const factor = new Array(this.params.states).fill(0);\n    const othermeans = new Array(this.params.states * this.params.dimension)\n      .fill(0);\n    trainingSet.forEach((phrase) => {\n      const step = Math.floor(phrase.length / this.params.states);\n      let offset = 0;\n      for (let n = 0; n < this.params.states; n += 1) {\n        for (let t = 0; t < step; t += 1) {\n          for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n            othermeans[((n * this.params.dimension)) + d1] +=\n                phrase.get(offset + t, d1);\n            if (this.params.covarianceMode === 'full') {\n              for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n                this.params.xStates[n].params.components[0]\n                  .covariance[(d1 * this.params.dimension) + d2] +=\n                    phrase.get(offset + t, d1) *\n                    phrase.get(offset + t, d2);\n              }\n            } else {\n              this.params.xStates[n].params.components[0].covariance[d1] +=\n                phrase.get(offset + t, d1) ** 2;\n            }\n          }\n        }\n        offset += step;\n        factor[n] += step;\n      }\n    });\n\n    for (let n = 0; n < this.params.states; n += 1) {\n      for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n        othermeans[(n * this.params.dimension) + d1] /= factor[n];\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n            this.params.xStates[n].params.components[0]\n              .covariance[(d1 * this.params.dimension) + d2] /=\n                factor[n];\n          }\n        } else {\n          this.params.xStates[n].params.components[0].covariance[d1] /= factor[n];\n        }\n      }\n    }\n\n    for (let n = 0; n < this.params.states; n += 1) {\n      for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n            this.params.xStates[n].params.components[0]\n              .covariance[(d1 * this.params.dimension) + d2] -=\n                othermeans[(n * this.params.dimension) + d1] *\n                othermeans[(n * this.params.dimension) + d2];\n          }\n        } else {\n          this.params.xStates[n].params.components[0].covariance[d1] -=\n            othermeans[(n * this.params.dimension) + d1] *\n            othermeans[(n * this.params.dimension) + d1];\n        }\n      }\n      this.params.xStates[n].regularize();\n      this.params.xStates[n].updateInverseCovariances();\n    }\n  },\n\n  /**\n   * Initialize the means and covariance of each state's observation probability\n   * distribution using the Expectation-Maximization algorithm for GMMs\n   * @param  {[type]} trainingSet [description]\n   * @private\n   */\n  initMeansCovariancesWithGMMEM(trainingSet) {\n    for (let n = 0; n < this.params.states; n += 1) {\n      const ts = TrainingSet(this.params);\n      // eslint-disable-next-line no-loop-func\n      trainingSet.forEach((phrase, phraseIndex) => {\n        const step = Math.floor(phrase.length / this.params.states);\n        if (step > 0) {\n          ts.push(phraseIndex, phrase.label);\n          for (let t = n * step; t < (n + 1) * step; t += 1) {\n            ts.getPhrase(phraseIndex).push(phrase.getFrame(t));\n          }\n        }\n      });\n      if (!ts.empty()) {\n        const gmmParams = trainGMM(ts, this.params);\n        for (let c = 0; c < this.params.gaussians; c += 1) {\n          this.params.xStates[n].params.components[c].mean =\n            gmmParams.components[c].mean;\n          this.params.xStates[n].params.components[c].covariance =\n            gmmParams.components[c].covariance;\n          this.params.xStates[n].updateInverseCovariances();\n        }\n      }\n    }\n  },\n\n  /**\n   * Initialize the transition matrix to an ergodic transition matrix\n   * @private\n   */\n  setErgodic() {\n    const p = 1 / this.params.states;\n    this.params.prior = new Array(this.params.states).fill(p);\n    this.params.transition = Array.from(\n      new Array(this.params.states),\n      () => new Array(this.params.states).fill(p),\n    );\n  },\n\n  /**\n   * Initialize the transition matrix to a left-right transition matrix\n   * @private\n   */\n  setLeftRight() {\n    this.params.prior = new Array(this.params.states).fill(0);\n    this.params.prior[0] = 1;\n    this.params.transition = new Array(this.params.states * 2).fill(0.5);\n    this.params.transition[(this.params.states - 1) * 2] = 1;\n    this.params.transition[((this.params.states - 1) * 2) + 1] = 0;\n  },\n\n  /**\n   * Normalize the hidden state transition parameters\n   * (prior + transition matrix)\n   * @private\n   */\n  normalizeTransitions() {\n    if (this.params.transitionMode === 'ergodic') {\n      const normPrior = this.params.prior.reduce((a, b) => a + b, 0);\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.params.prior[i] /= normPrior;\n        let transitionNorm = 0;\n        for (let j = 0; j < this.params.states; j += 1) {\n          transitionNorm += this.params.transition[i][j];\n        }\n        for (let j = 0; j < this.params.states; j += 1) {\n          this.params.transition[i][j] /= transitionNorm;\n        }\n      }\n    } else {\n      for (let i = 0; i < this.params.states; i += 1) {\n        const transitionNorm = this.params.transition[i * 2] + this.params.transition[(i * 2) + 1];\n        this.params.transition[i * 2] /= transitionNorm;\n        this.params.transition[(i * 2) + 1] /= transitionNorm;\n      }\n    }\n  },\n\n  /**\n   * Initialize the backward algorithm (see rabiner, 1989)\n   * @param  {Number} ct Inverse probability at time T - 1 (last observation of\n   * the sequence)\n   * @private\n   */\n  initializeBackwardAlgorithm(ct) {\n    for (let i = 0; i < this.params.states; i += 1) {\n      this.beta[i] = ct;\n    }\n  },\n\n  /**\n   * Initialize the backward algorithm (see rabiner, 1989)\n   * @param  {Number} ct Inverse probability at time t\n   * @param  {Array<Number>} observation Observation vector\n   * @private\n   */\n  updateBackwardAlgorithm(ct, observation) {\n    this.previousBeta = this.beta.slice();\n    for (let i = 0; i < this.params.states; i += 1) {\n      this.beta[i] = 0;\n      if (this.params.transitionMode === 'ergodic') {\n        for (let j = 0; j < this.params.states; j += 1) {\n          this.beta[i] += this.params.transition[i][j] *\n            this.previousBeta[j] *\n            this.params.xStates[j].likelihood(observation);\n        }\n      } else {\n        this.beta[i] += this.params.transition[i * 2] *\n          this.previousBeta[i] *\n          this.params.xStates[i].likelihood(observation);\n        if (i < this.params.states - 1) {\n          this.beta[i] += this.params.transition[(i * 2) + 1] *\n            this.previousBeta[i + 1] *\n            this.params.xStates[i + 1].likelihood(observation);\n        }\n      }\n      this.beta[i] *= ct;\n      if (Number.isNaN(this.beta[i]) || Math.abs(this.beta[i]) === +Infinity) {\n        this.beta[i] = 1e100;\n      }\n    }\n  },\n\n  /**\n   * Forward algorithm update step for the Baum-Welch algorithms. It is similar\n   * to `updateForwardAlgorithm` except it takes precomputed observation\n   * likelihoods as argument.\n   * @param  {Array<Number>} observationLikelihoods observation likelihoods\n   * @private\n   */\n  baumWelchForwardUpdate(observationLikelihoods) {\n    let normConst = 0;\n    this.previousAlpha = this.alpha.slice();\n    for (let j = 0; j < this.params.states; j += 1) {\n      this.alpha[j] = 0;\n      if (this.params.transitionMode === 'ergodic') {\n        for (let i = 0; i < this.params.states; i += 1) {\n          this.alpha[j] += this.previousAlpha[i] *\n            this.params.transition[i][j];\n        }\n      } else {\n        this.alpha[j] += this.previousAlpha[j] * this.params.transition[j * 2];\n        if (j > 0) {\n          this.alpha[j] += this.previousAlpha[j - 1] *\n            this.params.transition[((j - 1) * 2) + 1];\n        } else {\n          this.alpha[0] += this.previousAlpha[this.params.states - 1] *\n            this.params.transition[(this.params.states * 2) - 1];\n        }\n      }\n      this.alpha[j] *= observationLikelihoods[j];\n      normConst += this.alpha[j];\n    }\n    if (Number.isNaN(normConst)) {\n      throw new Error('Holy molly');\n    }\n    if (normConst > 1e-300) {\n      for (let j = 0; j < this.params.states; j += 1) {\n        this.alpha[j] /= normConst;\n      }\n      return 1 / normConst;\n    }\n    return 0;\n  },\n\n  /**\n   * Backward algorithm update step for the Baum-Welch algorithms. It is similar\n   * to `updatebackwardAlgorithm` except it takes precomputed observation\n   * likelihoods as argument.\n   * @param  {Number} ct Inverse probability at time t\n   * @param  {Array<Number>} observationLikelihoods observation likelihoods\n   * @private\n   */\n  baumWelchBackwardUpdate(ct, observationLikelihoods) {\n    this.previousBeta = this.beta.slice();\n    for (let i = 0; i < this.params.states; i += 1) {\n      this.beta[i] = 0;\n      if (this.params.transitionMode === 'ergodic') {\n        for (let j = 0; j < this.params.states; j += 1) {\n          this.beta[i] +=\n            this.params.transition[i][j] *\n            this.previousBeta[j] *\n            observationLikelihoods[j];\n        }\n      } else {\n        this.beta[i] += this.params.transition[i * 2] *\n          this.previousBeta[i] *\n          observationLikelihoods[i];\n        if (i < this.params.states - 1) {\n          this.beta[i] += this.params.transition[(i * 2) + 1] *\n            this.previousBeta[i + 1] *\n            observationLikelihoods[i + 1];\n        }\n      }\n      this.beta[i] *= ct;\n      if (Number.isNaN(this.beta[i]) || Math.abs(this.beta[i]) === +Infinity) {\n        this.beta[i] = 1e100;\n      }\n    }\n  },\n\n  /**\n   * Forward-Backward algorithm for the Baum-Welch training algorithm\n   * @param  {Phrase} currentPhrase Current data phrase\n   * @param  {Number} phraseIndex   Current phrase index\n   * @return {Number} Log-likelihood\n   * @private\n   */\n  baumWelchForwardBackward(currentPhrase, phraseIndex) {\n    const T = currentPhrase.length;\n\n    const ct = new Array(T).fill(0);\n    let logProb;\n    this.alphaSeq = [];\n    this.betaSeq = [];\n\n    const observationProbabilities = Array.from(\n      new Array(T),\n      () => new Array(this.params.states).fill(0),\n    );\n    for (let t = 0; t < T; t += 1) {\n      for (let i = 0; i < this.params.states; i += 1) {\n        observationProbabilities[t][i] =\n          this.params.xStates[i].likelihood(currentPhrase.getFrame(t));\n      }\n    }\n\n    // Forward algorithm\n    ct[0] = this.initializeForwardAlgorithm(currentPhrase.getFrame(0));\n    logProb = -Math.log(ct[0]);\n    this.alphaSeq.push(this.alpha.slice());\n\n    for (let t = 1; t < T; t += 1) {\n      ct[t] = this.baumWelchForwardUpdate(observationProbabilities[t]);\n      logProb -= Math.log(ct[t]);\n      this.alphaSeq.push(this.alpha.slice());\n    }\n\n    // Backward algorithm\n    this.initializeBackwardAlgorithm(ct[T - 1]);\n    this.betaSeq.push(this.beta.slice());\n\n    for (let t = T - 2; t >= 0; t -= 1) {\n      this.baumWelchBackwardUpdate(ct[t], observationProbabilities[t + 1]);\n      this.betaSeq.push(this.beta.slice());\n    }\n    this.betaSeq.reverse();\n\n    // Compute Gamma Variable\n    for (let t = 0; t < T; t += 1) {\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.gammaSequence[phraseIndex][t][i] =\n          (this.alphaSeq[t][i] * this.betaSeq[t][i]) / ct[t];\n      }\n    }\n\n    // Compute Gamma variable for each mixture component\n    let normConst;\n\n    for (let t = 0; t < T; t += 1) {\n      for (let i = 0; i < this.params.states; i += 1) {\n        normConst = 0;\n        if (this.params.gaussians === 1) {\n          const oo = observationProbabilities[t][i];\n          this.gammaSequenceperMixture[phraseIndex][0][t][i] =\n            this.gammaSequence[phraseIndex][t][i] * oo;\n          normConst += oo;\n        } else {\n          for (let c = 0; c < this.params.gaussians; c += 1) {\n            const oo = this.params.xStates[i]\n              .componentLikelihood(currentPhrase.getFrame(t), c);\n            this.gammaSequenceperMixture[phraseIndex][c][t][i] =\n              this.gammaSequence[phraseIndex][t][i] *\n              oo;\n            normConst += oo;\n          }\n        }\n        if (normConst > 0) {\n          for (let c = 0; c < this.params.gaussians; c += 1) {\n            this.gammaSequenceperMixture[phraseIndex][c][t][i] /= normConst;\n          }\n        }\n      }\n    }\n\n    // Compute Epsilon Variable\n    if (this.params.transitionMode === 'ergodic') {\n      for (let t = 0; t < T - 1; t += 1) {\n        for (let i = 0; i < this.params.states; i += 1) {\n          for (let j = 0; j < this.params.states; j += 1) {\n            this.epsilonSequence[phraseIndex][t][i][j] =\n              this.alphaSeq[t][i] *\n              this.params.transition[i][j] *\n              this.betaSeq[t + 1][j];\n            this.epsilonSequence[phraseIndex][t][i][j] *=\n              observationProbabilities[t + 1][j];\n          }\n        }\n      }\n    } else {\n      for (let t = 0; t < T - 1; t += 1) {\n        for (let i = 0; i < this.params.states; i += 1) {\n          this.epsilonSequence[phraseIndex][t][i * 2] =\n            this.alphaSeq[t][i] *\n            this.params.transition[i * 2] *\n            this.betaSeq[t + 1][i];\n          this.epsilonSequence[phraseIndex][t][i * 2] *=\n            observationProbabilities[t + 1][i];\n          if (i < this.params.states - 1) {\n            this.epsilonSequence[phraseIndex][t][(i * 2) + 1] =\n              this.alphaSeq[t][i] *\n              this.params.transition[(i * 2) + 1] *\n              this.betaSeq[t + 1][i + 1];\n            this.epsilonSequence[phraseIndex][t][(i * 2) + 1] *=\n              observationProbabilities[t + 1][i + 1];\n          }\n        }\n      }\n    }\n\n    return logProb;\n  },\n\n  /**\n   * Sums the Gamma variables used for parameter estimation during training\n   * @param  {TrainingSet} trainingSet Training Set\n   * @private\n   */\n  baumWelchGammaSum(trainingSet) {\n    for (let i = 0; i < this.params.states; i += 1) {\n      this.gammaSum[i] = 0;\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.gammaSumPerMixture[(i * this.params.gaussians) + c] = 0;\n      }\n    }\n\n    let phraseIndex = 0;\n    trainingSet.forEach((phrase) => {\n      for (let i = 0; i < this.params.states; i += 1) {\n        for (let t = 0; t < phrase.length; t += 1) {\n          this.gammaSum[i] +=\n            this.gammaSequence[phraseIndex][t][i];\n          for (let c = 0; c < this.params.gaussians; c += 1) {\n            this.gammaSumPerMixture[(i * this.params.gaussians) + c] +=\n              this.gammaSequenceperMixture[phraseIndex][c][t][i];\n          }\n        }\n      }\n      phraseIndex += 1;\n    });\n  },\n\n  /**\n   * Estimate the mixture coefficients of the GMM observation probability\n   * distribution at each state.\n   * @param  {TrainingSet} trainingSet Training Set\n   * @private\n   */\n  baumWelchEstimateMixtureCoefficients(trainingSet) {\n    let phraseIndex = 0;\n    trainingSet.forEach((phrase) => {\n      for (let i = 0; i < this.params.states; i += 1) {\n        for (let t = 0; t < phrase.length; t += 1) {\n          for (let c = 0; c < this.params.gaussians; c += 1) {\n            this.params.xStates[i].params.mixtureCoeffs[c] +=\n              this.gammaSequenceperMixture[phraseIndex][c][t][i];\n          }\n        }\n      }\n      phraseIndex += 1;\n    });\n\n    // Scale mixture coefficients\n    for (let i = 0; i < this.params.states; i += 1) {\n      this.params.xStates[i].normalizeMixtureCoeffs();\n    }\n  },\n\n  /**\n   * Estimate the means of the GMM observation probability\n   * distribution at each state.\n   * @param  {TrainingSet} trainingSet Training Set\n   * @private\n   */\n  baumWelchEstimateMeans(trainingSet) {\n    for (let i = 0; i < this.params.states; i += 1) {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.params.xStates[i].params.components[c].mean.fill(0);\n      }\n    }\n\n    // Re-estimate Mean\n    let phraseIndex = 0;\n    trainingSet.forEach((phrase) => {\n      for (let i = 0; i < this.params.states; i += 1) {\n        for (let t = 0; t < phrase.length; t += 1) {\n          for (let c = 0; c < this.params.gaussians; c += 1) {\n            for (let d = 0; d < this.params.dimension; d += 1) {\n              this.params.xStates[i].params.components[c].mean[d] +=\n                this.gammaSequenceperMixture[phraseIndex][c][t][i] *\n                phrase.get(t, d);\n            }\n          }\n        }\n      }\n      phraseIndex += 1;\n    });\n\n    // Normalize mean\n    for (let i = 0; i < this.params.states; i += 1) {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        for (let d = 0; d < this.params.dimension; d += 1) {\n          if (this.gammaSumPerMixture[(i * this.params.gaussians) + c] > 0) {\n            this.params.xStates[i].params.components[c].mean[d] /=\n              this.gammaSumPerMixture[(i * this.params.gaussians) + c];\n          }\n          if (Number.isNaN(this.params.xStates[i].params.components[c].mean[d])) {\n            throw new Error('Convergence Error');\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   * Estimate the covariances of the GMM observation probability\n   * distribution at each state.\n   * @param  {TrainingSet} trainingSet Training Set\n   * @private\n   */\n  baumWelchEstimateCovariances(trainingSet) {\n    let phraseIndex = 0;\n    trainingSet.forEach((phrase) => {\n      for (let i = 0; i < this.params.states; i += 1) {\n        for (let t = 0; t < phrase.length; t += 1) {\n          for (let c = 0; c < this.params.gaussians; c += 1) {\n            for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n              if (this.params.covarianceMode === 'full') {\n                for (let d2 = d1; d2 < this.params.dimension; d2 += 1) {\n                  this.params.xStates[i].params.components[c]\n                    .covariance[(d1 * this.params.dimension) + d2] +=\n                    this.gammaSequenceperMixture[phraseIndex][c][t][i] *\n                    (phrase.get(t, d1) -\n                      this.params.xStates[i].params.components[c].mean[d1]) *\n                    (phrase.get(t, d2) -\n                      this.params.xStates[i].params.components[c].mean[d2]);\n                }\n              } else {\n                const value = phrase.get(t, d1) -\n                  this.params.xStates[i].params.components[c].mean[d1];\n                this.params.xStates[i].params.components[c].covariance[d1] +=\n                  this.gammaSequenceperMixture[phraseIndex][c][t][i] *\n                  (value ** 2);\n              }\n            }\n          }\n        }\n      }\n      phraseIndex += 1;\n    });\n\n    // Scale covariance\n    for (let i = 0; i < this.params.states; i += 1) {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        if (this.gammaSumPerMixture[(i * this.params.gaussians) + c] > 0) {\n          for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n            if (this.params.covarianceMode === 'full') {\n              for (let d2 = d1; d2 < this.params.dimension; d2 += 1) {\n                this.params.xStates[i].params.components[c]\n                  .covariance[(d1 * this.params.dimension) + d2] /=\n                  this.gammaSumPerMixture[(i * this.params.gaussians) + c];\n                if (d1 !== d2) {\n                  this.params.xStates[i].params.components[c]\n                    .covariance[(d2 * this.params.dimension) + d1] =\n                    this.params.xStates[i].params.components[c]\n                      .covariance[(d1 * this.params.dimension) + d2];\n                }\n              }\n            } else {\n              this.params.xStates[i].params.components[c].covariance[d1] /=\n                this.gammaSumPerMixture[(i * this.params.gaussians) + c];\n            }\n          }\n        }\n      }\n      this.params.xStates[i].regularize();\n      this.params.xStates[i].updateInverseCovariances();\n    }\n  },\n\n  /**\n   * Estimate the prior probabilities of the model\n   * @param  {TrainingSet} trainingSet Training Set\n   * @private\n   */\n  baumWelchEstimatePrior(trainingSet) {\n    this.params.prior.fill(0);\n\n    // Re-estimate Prior probabilities\n    let sumprior = 0;\n    for (let phraseIndex = 0;\n      phraseIndex < trainingSet.size();\n      phraseIndex += 1) {\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.params.prior[i] += this.gammaSequence[phraseIndex][0][i];\n        sumprior += this.params.prior[i];\n      }\n    }\n\n    // Scale Prior vector\n    if (sumprior > 0) {\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.params.prior[i] /= sumprior;\n      }\n    } else {\n      throw new Error('The Prior is all ZERO.....');\n    }\n  },\n\n  /**\n   * Estimate the transition probabilities of the model\n   * @param  {TrainingSet} trainingSet Training Set\n   * @private\n   */\n  baumWelchEstimateTransitions(trainingSet) {\n    // Set transition matrix to 0\n    this.params.transition = this.params.transitionMode === 'ergodic' ?\n      Array.from(\n        new Array(this.params.states),\n        () => new Array(this.params.states).fill(0),\n      ) :\n      new Array(this.params.states * 2).fill(0);\n\n    // Re-estimate Transition probabilities\n    let phraseIndex = 0;\n    trainingSet.forEach((phrase) => {\n      if (phrase.length > 0) {\n        for (let i = 0; i < this.params.states; i += 1) {\n          // Experimental: A bit of regularization (sometimes avoids\n          // numerical errors)\n          if (this.params.transitionMode === 'leftright') {\n            this.params.transition[i * 2] += TRANSITION_REGULARIZATION;\n            if (i < this.params.states - 1) {\n              this.params.transition[(i * 2) + 1] += TRANSITION_REGULARIZATION;\n            } else {\n              this.params.transition[i * 2] += TRANSITION_REGULARIZATION;\n            }\n          }\n          // End Regularization\n          if (this.params.transitionMode === 'ergodic') {\n            for (let j = 0; j < this.params.states; j += 1) {\n              for (let t = 0; t < phrase.length - 1; t += 1) {\n                this.params.transition[i][j] +=\n                  this.epsilonSequence[phraseIndex][t][i][j];\n              }\n            }\n          } else {\n            for (let t = 0; t < phrase.length - 1; t += 1) {\n              this.params.transition[i * 2] +=\n                this.epsilonSequence[phraseIndex][t][i * 2];\n            }\n            if (i < this.params.states - 1) {\n              for (let t = 0; t < phrase.length - 1; t += 1) {\n                this.params.transition[(i * 2) + 1] +=\n                  this.epsilonSequence[phraseIndex][t][(i * 2) + 1];\n              }\n            }\n          }\n        }\n      }\n      phraseIndex += 1;\n    });\n\n    // Scale transition matrix\n    if (this.params.transitionMode === 'ergodic') {\n      for (let i = 0; i < this.params.states; i += 1) {\n        for (let j = 0; j < this.params.states; j += 1) {\n          this.params.transition[i][j] /=\n            (this.gammaSum[i] + (2 * TRANSITION_REGULARIZATION));\n          if (Number.isNaN(this.params.transition[i][j])) {\n            throw new Error('Convergence Error. Check your training data or increase the variance offset');\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.params.transition[i * 2] /=\n          (this.gammaSum[i] + (2 * TRANSITION_REGULARIZATION));\n        if (Number.isNaN(this.params.transition[i * 2])) {\n          throw new Error('Convergence Error. Check your training data or increase the variance offset');\n        }\n        if (i < this.params.states - 1) {\n          this.params.transition[(i * 2) + 1] /=\n            (this.gammaSum[i] + (2 * TRANSITION_REGULARIZATION));\n          if (Number.isNaN(this.params.transition[(i * 2) + 1])) {\n            throw new Error('Convergence Error. Check your training data or increase the variance offset');\n          }\n        }\n      }\n    }\n  },\n};\n\n/**\n * Add HMM Training capabilities to a HMM Model\n * @param  {HMMBase} o               Source HMM Model\n * @param  {Number} [states=1]       Number of hidden states\n * @param  {Number} [gaussians=1]    Number of Gaussian components\n * @param  {Object} [regularization] Regularization parameters\n * @param  {Number} [regularization.absolute=1e-3] Absolute regularization\n * @param  {Number} [regularization.relative=1e-2] Relative Regularization\n (relative to the training set's variance along each dimension)\n * @param  {String} [transitionMode='ergodic'] Structure of the transition\n * matrix ('ergodic' or 'left-right').\n * @param  {String} [covarianceMode='full'] Covariance mode ('full' or diagonal)\n * @return {BMMBase}\n */\nexport default function withHMMTraining(\n  o,\n  states = 1,\n  gaussians = 1,\n  regularization = { absolute: 1e-3, relative: 1e-2 },\n  transitionMode = 'leftright',\n  covarianceMode = 'full',\n) {\n  if (!Object.keys(o).includes('params')) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  return Object.assign(\n    o,\n    hmmTrainerPrototype,\n    {\n      params: {\n        ...o.params,\n        states,\n        gaussians,\n        regularization,\n        transitionMode,\n        covarianceMode,\n      },\n    },\n  );\n}\n","import validateParameters from '../common/validation';\nimport { isBaseModel } from '../core/model_base_mixin';\nimport { GMMPredictor } from '../gmm';\n\nconst hmmParameterSpec = (states, transitionMode) => ({\n  states: {\n    required: true,\n    check: { min: 1 },\n  },\n  gaussians: {\n    required: true,\n    check: { min: 1 },\n  },\n  regularization: {\n    required: true,\n    check: ({ absolute, relative }) =>\n      (absolute && relative && absolute > 0 && relative > 0),\n  },\n  transitionMode: {\n    required: true,\n    check: ['ergodic', 'leftright'],\n  },\n  covarianceMode: {\n    required: true,\n    check: ['full', 'diagonal'],\n  },\n  prior: {\n    required: true,\n    check: m => transitionMode === 'leftright' || m.length === states,\n  },\n  transition: {\n    required: true,\n    check: m => (transitionMode === 'leftright' ?\n      m.length === 2 * states :\n      m.length === states),\n  },\n  xStates: {\n    required: true,\n    check: m => m.length === states,\n  },\n});\n\n\n/**\n * HMM Base prototype\n * @type {Object}\n * @ignore\n */\nconst hmmPredictionPrototype = /** @lends withHMMPrediction */ {\n  forwardInitialized: false,\n  isHierarchical: false,\n\n  /**\n   * Setup the Model by allocating GMM predictors to each of the hidden states\n   * @return {HMMBaseModel} the model\n   * @private\n   */\n  setup() {\n    this.params.xStates = this.params.xStates.map(s => GMMPredictor(s).reset());\n    return this;\n  },\n\n  /**\n   * Reset the prediction process\n   * @return {HMMBaseModel} the model\n   */\n  reset() {\n    this.likelihoodBuffer.clear();\n    this.params.xStates.forEach((s) => { s.reset(); });\n    return this;\n  },\n\n  /**\n   * Compute the likelihood of an observation given the HMM's parameters\n   * @param  {Array<Number>} observation Observation vector\n   * @return {Number}\n   */\n  likelihood(observation) {\n    const ct = (this.forwardInitialized) ?\n      this.updateForwardAlgorithm(observation) :\n      this.initializeForwardAlgorithm(observation);\n    this.updateAlphaWindow();\n    this.updateProgress();\n    return 1 / ct;\n  },\n\n  updateProgress() {\n    this.results.progress = 0.0;\n    for (let i = this.windowMinindex; i < this.windowMaxindex; i += 1) {\n      if (this.isHierarchical) {\n        this.results.progress += (this.alpha[i] + this.alpha1[i] + this.alpha2[i]) *\n          (i / this.windowNormalizationConstant);\n      } else {\n        this.results.progress += (this.alpha[i] * i) /\n          this.windowNormalizationConstant;\n      }\n    }\n    this.results.progress /= this.params.states - 1;\n  },\n\n  /**\n   * Update the state probabilities filtering window (for multiclass\n   * hierarchical HMM I think...)\n   * @private\n   */\n  updateAlphaWindow() {\n    this.results.likeliestState = 0;\n    // Get likeliest State\n    let bestAlpha = this.isHierarchical ?\n      (this.alpha[0] + this.alpha1[0]) :\n      this.alpha[0];\n    for (let i = 1; i < this.params.states; i += 1) {\n      if (this.isHierarchical) {\n        if ((this.alpha[i] + this.alpha1[i]) > bestAlpha) {\n          bestAlpha = this.alpha[i] + this.alpha1[i];\n          this.results.likeliestState = i;\n        }\n      } else if (this.alpha[i] > bestAlpha) {\n        bestAlpha = this.alpha[i];\n        this.results.likeliestState = i;\n      }\n    }\n\n    // Compute Window\n    this.windowMinindex = this.results.likeliestState - Math.floor(this.params.states / 2);\n    this.windowMaxindex = this.results.likeliestState + Math.floor(this.params.states / 2);\n    this.windowMinindex = (this.windowMinindex >= 0) ? this.windowMinindex : 0;\n    this.windowMaxindex = (this.windowMaxindex <= this.params.states) ?\n      this.windowMaxindex : this.params.states;\n    this.windowNormalizationConstant = 0.0;\n    for (let i = this.windowMinindex; i < this.windowMaxindex; i += 1) {\n      this.windowNormalizationConstant += this.isHierarchical ?\n        (this.alpha[i] + this.alpha1[i]) :\n        this.alpha[i];\n    }\n  },\n};\n\n/**\n * Bimodal (regression) HMM Prototype\n * @type {Object}\n * @ignore\n */\nconst hmmBimodalPredictionPrototype = /** @lends withHMMPrediction */ {\n  /**\n   * Estimate the output values corresponding to the input observation, by\n   * regression given the HMM's parameters. This method is called Hidden\n   * Mixture Regression (GMR).\n   *\n   * @param  {Array<Number>} inputObservation Observation on the input modality\n   * @return {Array<Number>} Output values (length = outputDimension)\n   */\n  regression(inputObservation) {\n    this.results.outputValues = Array(this.params.outputDimension).fill(0);\n    this.results.outputCovariance = Array(this.params.covarianceMode === 'full' ? this.params.outputDimension ** 2 : this.params.outputDimension).fill(0);\n\n    if (this.params.regressionEstimator === 'likeliest') {\n      this.params.xStates[this.results.likeliestState].predict(inputObservation);\n      this.results.outputValues =\n        this.params.xStates[this.results.likeliestState].results.outputValues;\n      return this.results.outputValues;\n    }\n\n    const clipMinState = (this.params.regressionEstimator === 'full') ?\n      0 : this.windowMinindex;\n    const clipMaxState = (this.params.regressionEstimator === 'full') ?\n      this.params.states : this.windowMaxindex;\n    let normalizationConstant = (this.params.regressionEstimator === 'full') ?\n      1 : this.windowNormalizationConstant;\n\n    if (normalizationConstant <= 0.0) normalizationConstant = 1;\n\n    // Compute Regression\n    for (let i = clipMinState; i < clipMaxState; i += 1) {\n      this.params.xStates[i].likelihood(inputObservation);\n      this.params.xStates[i].regression(inputObservation);\n      const tmpPredictedOutput = this.params.xStates[i].results.outputValues;\n      for (let d = 0; d < this.params.outputDimension; d += 1) {\n        if (this.isHierarchical) {\n          this.results.outputValues[d] +=\n            (this.alpha[i] + this.alpha1[i]) *\n            (tmpPredictedOutput[d] / normalizationConstant);\n          if (this.params.covarianceMode === 'full') {\n            for (let d2 = 0; d2 < this.params.outputDimension; d2 += 1) {\n              this.results.outputCovariance[(d * this.params.outputDimension) + d2] +=\n                (this.alpha[i] + this.alpha1[i]) *\n                (this.alpha[i] + this.alpha1[i]) *\n                (this.params.xStates[i].results\n                  .outputCovariance[(d * this.params.outputDimension) + d2] /\n                normalizationConstant);\n            }\n          } else {\n            this.results.outputCovariance[d] +=\n              (this.alpha[i] + this.alpha1[i]) *\n              (this.alpha[i] + this.alpha1[i]) *\n              (this.params.xStates[i].results.outputCovariance[d] /\n              normalizationConstant);\n          }\n        } else {\n          this.results.outputValues[d] += this.alpha[i] *\n            (tmpPredictedOutput[d] / normalizationConstant);\n          if (this.params.covarianceMode === 'full') {\n            for (let d2 = 0; d2 < this.params.outputDimension; d2 += 1) {\n              this.results.outputCovariance[(d * this.params.outputDimension) + d2] +=\n                (this.alpha[i] ** 2) *\n                (this.params.xStates[i].results\n                  .outputCovariance[(d * this.params.outputDimension) + d2] /\n                normalizationConstant);\n            }\n          } else {\n            this.results.outputCovariance[d] +=\n              ((this.alpha[i] ** 2) *\n              this.params.xStates[i].results.outputCovariance[d]) /\n              normalizationConstant;\n          }\n        }\n      }\n    }\n    return this.results.outputValues;\n  },\n};\n\n/**\n * Add HMM prediction capabilities to a single-class model. Mostly, this checks\n * the validity of the model parameters\n *\n * @todo validate gaussian components\n *\n * @param  {HMMBaseModel} o Source Model\n * @return {HMMBaseModel}\n *\n * @throws {Error} is o is not a ModelBase\n */\nexport default function withHMMPrediction(o) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  validateParameters('HMM', hmmParameterSpec(o.params.states, o.params.transitionMode), o.params);\n  return Object.assign(\n    o,\n    hmmPredictionPrototype,\n    o.params.bimodal ? hmmBimodalPredictionPrototype : {},\n    {\n      alpha: new Array(o.params.states).fill(0),\n      previous_alpha_: new Array(o.params.states).fill(0),\n    },\n  ).setup();\n}\n","import { isBaseModel } from '../core/model_base_mixin';\n\nconst DEFAULT_EXITPROBABILITY_LAST_STATE = 0.1;\n\n/**\n * Hierarchical HMM Base prototype\n * @type {Object}\n * @ignore\n */\nconst hierarchicalHmmPredictionPrototype =\n/** @lends withHierarchicalHMMPrediction */\n{\n  /**\n   * Specificies if the forward algorithm has been initialized\n   * @type {Boolean}\n   * @private\n   */\n  forwardInitialized: false,\n\n  /**\n   * Setup the model (allocate transition parameters)\n   * @return {HierarchicalHMM} [description]\n   * @private\n   */\n  setup() {\n    const numClasses = this.size();\n    this.params.prior = new Array(numClasses).fill(1 / numClasses);\n    this.params.transition = Array.from(\n      new Array(numClasses),\n      () => new Array(numClasses).fill(1 / numClasses),\n    );\n    this.params.exitTransition = new Array(numClasses).fill(0.1);\n    Object.values(this.models).forEach((model) => {\n      const m = model;\n      m.isHierarchical = true;\n    });\n    this.updateExitProbabilities();\n    return this;\n  },\n\n  /**\n   * Update the exit probabilities of each sub-Markov model\n   * @param  {Array<Number>|undefined} [exitProbabilities=undefined] Vector of\n   * exit probabilities (optional)\n   * @private\n   */\n  updateExitProbabilities(exitProbabilities = undefined) {\n    const exitProb = (exitProbabilities !== undefined) ?\n      exitProbabilities :\n      new Array(this.params.states - 1).fill(0)\n        .concat([DEFAULT_EXITPROBABILITY_LAST_STATE]);\n    Object.keys(this.models).forEach((label) => {\n      this.models[label].params.exitProbabilities = exitProb.slice();\n    });\n  },\n\n  /**\n   * Reset the prediction process. This is particularly important for temporal\n   * models such as HMMs, that depends on previous observations.\n   */\n  reset() {\n    Object.values(this.models).forEach(m => m.reset());\n    this.results = {\n      labels: [],\n      instantLikelihoods: [],\n      smoothedLikelihoods: [],\n      smoothedLogLikelihoods: [],\n      smoothedNormalizedLikelihoods: [],\n      exitLikelihood: [],\n      likeliest: null,\n      classes: {},\n    };\n    if (this.params.bimodal) {\n      this.resetBimodal();\n    }\n    this.forwardInitialized = false;\n  },\n\n  /**\n   * Make a prediction from a new observation (updates the results member)\n   * @param  {Array<Number>} observation Observation vector\n   */\n  predict(observation) {\n    if (this.forwardInitialized) {\n      this.updateForwardAlgorithm(observation);\n    } else {\n      this.initializeForwardAlgorithm(observation);\n    }\n    Object.keys(this.models).sort().forEach((label) => {\n      const model = this.models[label];\n      model.updateAlphaWindow();\n      model.updateProgress();\n      model.updateResults(model.results.instantLikelihood);\n    });\n    this.updateResults();\n\n    if (this.params.bimodal) {\n      Object.values(this.models).forEach(m => m.regression(observation));\n\n      if (this.params.multiClassRegressionEstimator === 'likeliest') {\n        this.results.outputValues =\n          this.models[this.results.likeliest].results.outputValues;\n        this.results.outputCovariance =\n          this.models[this.results.likeliest].results.outputCovariance;\n      } else {\n        this.results.outputValues = new Array(this.outputDimension).fill(0);\n        this.results.outputCovariance =\n          new Array(this.params.covarianceMode === 'full' ?\n            this.outputDimension ** 2 :\n            this.outputDimension).fill(0);\n\n        let modelIndex = 0;\n        Object.values(this.models).forEach((model) => {\n          for (let d = 0; d < this.outputDimension; d += 1) {\n            this.results.outputValues[d] +=\n              this.results.smoothedNormalizedLikelihoods[modelIndex] *\n              model.second.results.outputValues[d];\n\n            if (this.params.covarianceMode === 'full') {\n              for (let d2 = 0; d2 < this.outputDimension; d2 += 1) {\n                this.results.outputCovariance[(d * this.outputDimension) + d2] +=\n                  this.results.smoothedNormalizedLikelihoods[modelIndex] *\n                  model.results.outputCovariance[(d * this.outputDimension) + d2];\n              }\n            } else {\n              this.results.outputCovariance[d] +=\n                this.results.smoothedNormalizedLikelihoods[modelIndex] *\n                model.second.results.outputCovariance[d];\n            }\n          }\n          modelIndex += 1;\n        });\n      }\n    }\n  },\n\n  /**\n   * Initialize the forward algorithm of the hierarchical HMM\n   * @param  {Array<Number>} observation Observation vector\n   * @private\n   */\n  initializeForwardAlgorithm(observation) {\n    let normConst = 0;\n    let modelIndex = 0;\n    const classes = Object.keys(this.models).sort();\n    classes.forEach((label) => {\n      const model = this.models[label];\n      const N = model.params.states;\n      model.alpha1 = new Array(N).fill(0);\n      model.alpha2 = new Array(N).fill(0);\n\n      // Compute Emission probability and initialize on the first state of\n      // the primitive\n      if (model.params.transitionMode === 'ergodic') {\n        model.results.instantLikelihood = 0;\n        for (let i = 0; i < N; i += 1) {\n          model.alpha[i] = this.params.prior[modelIndex] *\n            model.params.prior[i] *\n            model.params.xStates[i].likelihood(observation);\n          model.results.instantLikelihood += model.alpha[i];\n        }\n      } else {\n        model.alpha[0] = this.params.prior[modelIndex] *\n          model.params.xStates[0].likelihood(observation);\n        [model.results.instantLikelihood] = model.alpha;\n      }\n      normConst += model.results.instantLikelihood;\n      modelIndex += 1;\n    });\n\n    classes.forEach((label) => {\n      const model = this.models[label];\n      const N = model.params.states;\n      for (let i = 0; i < N; i += 1) {\n        model.alpha[i] /= normConst;\n      }\n    });\n\n\n    this.frontierV1 = new Array(this.size).fill(0);\n    this.frontierV2 = new Array(this.size).fill(0);\n    this.forwardInitialized = true;\n  },\n\n  /**\n   * Update the forward algorithm of the hierarchical HMM\n   * @param  {Array<Number>} observation Observation vector\n   * @private\n   */\n  updateForwardAlgorithm(observation) {\n    let normConst = 0;\n\n    // Frontier Algorithm: variables\n    let tmp = 0;\n\n    // Intermediate variables: compute the sum of probabilities of making a\n    // transition to a new primitive\n    this.frontierV1 = this.likelihoodAlpha(1);\n    this.frontierV2 = this.likelihoodAlpha(2);\n\n    // FORWARD UPDATE\n    // --------------------------------------\n    let dstModelIndex = 0;\n    const classes = Object.keys(this.models).sort();\n    classes.forEach((label) => {\n      const dstModel = this.models[label];\n      const N = dstModel.params.states;\n\n      // 1) COMPUTE FRONTIER VARIABLE\n      //    --------------------------------------\n      // frontier variable : intermediate computation variable\n      const front = new Array(N).fill(0);\n\n      if (dstModel.params.transitionMode === 'ergodic') {\n        for (let k = 0; k < N; k += 1) {\n          for (let j = 0; j < N; j += 1) {\n            front[k] += (dstModel.params.transition[j][k] /\n              (1 - dstModel.params.exitProbabilities[j]))\n              * dstModel.alpha[j];\n          }\n\n          for (\n            let srcModelIndex = 0;\n            srcModelIndex < this.size();\n            srcModelIndex += 1\n          ) {\n            front[k] += dstModel.params.prior[k] * (\n              (this.frontierV1[srcModelIndex] *\n              this.params.transition[srcModelIndex][dstModelIndex]) +\n              (this.params.prior[dstModelIndex] *\n              this.frontierV2[srcModelIndex])\n            );\n          }\n        }\n      } else {\n        // k=0: first state of the primitive\n        front[0] = dstModel.params.transition[0] * dstModel.alpha[0];\n\n        for (\n          let srcModelIndex = 0;\n          srcModelIndex < this.size();\n          srcModelIndex += 1\n        ) {\n          front[0] += (this.frontierV1[srcModelIndex] *\n            this.params.transition[srcModelIndex][dstModelIndex]) +\n            (this.params.prior[dstModelIndex] *\n              this.frontierV2[srcModelIndex]);\n        }\n\n        // k>0: rest of the primitive\n        for (let k = 1; k < N; k += 1) {\n          front[k] += (dstModel.params.transition[k * 2] /\n            (1 - dstModel.params.exitProbabilities[k])) *\n            dstModel.alpha[k];\n          front[k] += (dstModel.params.transition[((k - 1) * 2) + 1] /\n            (1 - dstModel.params.exitProbabilities[k - 1])) *\n            dstModel.alpha[k - 1];\n        }\n\n        for (let k = 0; k < N; k += 1) {\n          dstModel.alpha[k] = 0;\n          dstModel.alpha1[k] = 0;\n          dstModel.alpha2[k] = 0;\n        }\n      }\n\n      // 2) UPDATE FORWARD VARIABLE\n      //    --------------------------------------\n      dstModel.results.exitLikelihood = 0.0;\n      dstModel.results.instantLikelihood = 0.0;\n\n      // end of the primitive: handle exit states\n      for (let k = 0; k < N; k += 1) {\n        tmp = dstModel.params.xStates[k].likelihood(observation) * front[k];\n        dstModel.alpha2[k] = this.params.exitTransition[dstModelIndex] *\n          dstModel.params.exitProbabilities[k] * tmp;\n        dstModel.alpha1[k] = (1 - this.params.exitTransition[dstModelIndex]) *\n          dstModel.params.exitProbabilities[k] * tmp;\n        dstModel.alpha[k] = (1 - dstModel.params.exitProbabilities[k]) * tmp;\n\n        dstModel.results.exitLikelihood += dstModel.alpha1[k] + dstModel.alpha2[k];\n        dstModel.results.instantLikelihood += dstModel.alpha[k] +\n          dstModel.alpha1[k] + dstModel.alpha2[k];\n        normConst += tmp;\n      }\n\n      dstModel.results.exitRatio = dstModel.results.exitLikelihood /\n        dstModel.results.instantLikelihood;\n\n      dstModelIndex += 1;\n    });\n\n    classes.forEach((label) => {\n      const model = this.models[label];\n      const N = model.params.states;\n      for (let k = 0; k < N; k += 1) {\n        model.alpha[k] /= normConst;\n        model.alpha1[k] /= normConst;\n        model.alpha2[k] /= normConst;\n      }\n    });\n  },\n\n  /**\n   * Compute the likelihood of a given probability.\n   * @param  {Number} exitNum Exit level number\n   * @return {Array<Number>}\n   */\n  likelihoodAlpha(exitNum) {\n    const likelihoodVector = new Array(this.size()).fill(0);\n    if (exitNum < 0) {\n      // Likelihood over all exit states\n      let modelIndex = 0;\n      Object.keys(this.models).sort().forEach((label) => {\n        const model = this.models[label];\n        likelihoodVector[modelIndex] = 0.0;\n        for (let k = 0; k < model.params.states; k += 1) {\n          likelihoodVector[modelIndex] += model.second.alpha[k] +\n            model.second.alpha1[k] +\n            model.second.alpha2[k];\n        }\n        modelIndex += 1;\n      });\n    } else {\n      // Likelihood for exit state \"exitNum\"\n      let modelIndex = 0;\n      Object.keys(this.models).sort().forEach((label) => {\n        const model = this.models[label];\n        likelihoodVector[modelIndex] = 0;\n        let { alpha } = model;\n        if (exitNum === 1) {\n          alpha = model.alpha1;\n        }\n        if (exitNum === 2) {\n          alpha = model.alpha2;\n        }\n        for (let k = 0; k < model.params.states; k += 1) {\n          likelihoodVector[modelIndex] += alpha[k];\n        }\n        modelIndex += 1;\n      });\n    }\n    return likelihoodVector;\n  },\n};\n\n/**\n * Add Hierarchical HMM prediction capabilities to a multi-class model.\n *\n * @todo algorithmic details\n * @todo validate parameters\n * @todo validate gaussian components\n *\n * @param  {MulticlassBaseModel} o Source Model\n * @return {HierarchicalHMM}\n *\n * @extends withMulticlassPrediction\n *\n * @throws {Error} is o is not a ModelBase\n */\nexport default function withHierarchicalHMMPrediction(o) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  // validateParameters(\n  //   'Hierarchical HMM',\n  //   hierarchicalHmmParameterSpec(o.params.states, o.params.transitionMode),\n  //   o.params,\n  // );\n  return Object.assign(\n    o,\n    hierarchicalHmmPredictionPrototype,\n    {\n      // alpha: new Array(o.params.states).fill(0),\n      // previous_alpha_: new Array(o.params.states).fill(0),\n    },\n  ).setup();\n}\n","import ModelBase from '../core/model_base_mixin';\nimport withEMTraining from '../core/em_training_mixin';\nimport withHMMBase from './hmm_base_mixin';\nimport withHMMTraining from './hmm_training_mixin';\nimport MulticlassModelBase from '../core/multiclass_mixin';\nimport withMulticlassTraining from '../core/multiclass_training_mixin';\nimport withAbtractPrediction from '../core/prediction_mixin';\nimport withHMMPrediction from './hmm_prediction_mixin';\nimport withMulticlassPrediction from '../core/multiclass_prediction_mixin';\nimport withHierarchicalHMMPrediction from './hierarchical_hmm_prediction_mixin';\n\n/**\n * @typedef {Object} HMMParameters\n * @property {Boolean} bimodal Specifies if the model is bimodal\n * @property {Number} inputDimension Dimension of the input modality\n * @property {Number} outputDimension Dimension of the output modality\n * @property {Number} dimension Total dimension\n * @property {Number} states Number of hidden states in the Markov model\n * @property {Number} gaussians Number of components in the Gaussian mixture\n * observation distribution of each state\n * @property {String} transitionMode Transition matrix mode ('ergodic' or 'leftright')\n * @property {String} covarianceMode Covariance mode ('full' or 'diagonal')\n * @property {Array<Number>} mixtureCoeffs mixture coefficients ('weight' of\n * each gaussian component)\n * @property {Array<GaussianDistribution>} components Gaussian components\n */\n\n/**\n * Train a single-class HMM Model.\n *\n * @todo HMM details\n *\n * @param  {TrainingSet} trainingSet                training set\n * @param  {Object} configuration                   Training configuration\n * @param  {Object} [convergenceCriteria=undefined] Convergence criteria of the\n * EM algorithm\n * @return {HMMParameters} Parameters of the trained HMM\n */\nexport function trainHMM(\n  trainingSet,\n  configuration,\n  convergenceCriteria = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const {\n    states,\n    gaussians,\n    regularization,\n    transitionMode,\n    covarianceMode,\n  } = configuration;\n  const model = withHMMTraining(\n    withEMTraining(\n      withHMMBase(ModelBase({\n        inputDimension,\n        outputDimension,\n        ...configuration,\n      })),\n      convergenceCriteria,\n    ),\n    states,\n    gaussians,\n    regularization,\n    transitionMode,\n    covarianceMode,\n  );\n  return model.train(trainingSet);\n}\n\n/**\n * Train a multi-class HMM Model.\n *\n * @todo HMM details\n *\n * @param  {TrainingSet} trainingSet                training set\n * @param  {Object} configuration                   Training configuration\n * @param  {Object} [convergenceCriteria=undefined] Convergence criteria of the\n * EM algorithm\n * @return {Object} Parameters of the trained HMM\n */\nexport function trainMulticlassHMM(\n  trainingSet,\n  configuration,\n  convergenceCriteria = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const model = withMulticlassTraining(\n    MulticlassModelBase({ inputDimension, outputDimension, ...configuration }),\n    ts => trainHMM(ts, configuration, convergenceCriteria),\n  );\n  return model.train(trainingSet);\n}\n\n/**\n * Create a HMM Predictor from a full set of parameters (generated by trainHMM).\n * @param       {Object} params                       Model parameters\n * @param       {number} [likelihoodWindow=undefined] Likelihoow window size\n * @function\n */\nexport function HMMPredictor(\n  params,\n  likelihoodWindow = undefined,\n) {\n  const model = withHMMPrediction(withAbtractPrediction(\n    withHMMBase(ModelBase(params)),\n    likelihoodWindow,\n  ));\n  model.reset();\n  return model;\n}\n\n/**\n * Create a Multiclass HMM Predictor from a full set of parameters\n * (generated by trainMulticlassHMM).\n * @param       {Object} params                       Model parameters\n * @param       {number} [likelihoodWindow=undefined] Likelihoow window size\n * @function\n */\nexport function MulticlassHMMPredictor(\n  params,\n  likelihoodWindow = undefined,\n) {\n  const model = withMulticlassPrediction(MulticlassModelBase(params));\n  model.models = {};\n  Object.keys(params.classes).forEach((label) => {\n    model.models[label] = HMMPredictor(params.classes[label], likelihoodWindow);\n  });\n  model.reset();\n  return model;\n}\n\n/**\n * Create a Multiclass HMM Predictor from a full set of parameters\n * (generated by trainMulticlassHMM).\n * @param       {Object} params                       Model parameters\n * @param       {number} [likelihoodWindow=undefined] Likelihoow window size\n * @function\n */\nexport function HierarchicalHMMPredictor(\n  params,\n  likelihoodWindow = undefined,\n) {\n  let model = MulticlassModelBase(params);\n  model.models = {};\n  Object.keys(params.classes).forEach((label) => {\n    model.models[label] = HMMPredictor(params.classes[label], likelihoodWindow);\n  });\n  model = withHierarchicalHMMPrediction(withMulticlassPrediction(model));\n  model.reset();\n  return model;\n}\n"],"names":["phrasePrototype","get","index","dim","Math","floor","Error","dimension","bimodal","inputDimension","inputData","length","outputData","getFrame","concat","push","observation","slice","pushInput","size","trim","pushOutput","outputDimension","clear","clearInput","clearOutput","mean","Array","fill","d","t","standardDeviation","stddev","sqrt","minmax","from","min","Infinity","max","Phrase","columnNames","label","Object","assign","create","trainingSetPrototype","keys","phrases","empty","getPhrase","phraseIndex","includes","toString","forEach","callback","undefined","phrase","p","remove","removeClass","filter","i","map","reduce","x","getPhrasesOfClass","ts","TrainingSet","labels","ll","indices","sum","totalLength","ModelBase","parameters","params","isBaseModel","o","key","a","b","euclidean","v1","v2","x1","kMeansTrainingPrototype","train","trainingSet","centers","clusters","trainingConfig","initialization","initializeClustersRandom","initializeClustersForgy","initClustersWithFirstPhrase","trainingNbIterations","maxIterations","previousCenters","updateCenters","meanClusterDistance","maxRelativeCenterVariation","k","l","relativeDistanceThreshold","step","offset","c","random","pointsPerCluster","ppc","clustIdx","_","numFramesPerCluster","frame","minDistance","clusterMembership","distance","withKMeansTraining","trainingConfiguration","minIterations","model","trainKmeans","kEpsilonPseudoInverse","matrixPrototype","data","transpose","out","Matrix","ncols","nrows","j","product","mat","pinv","gaussJordanInverse","transp","prod","determinant","matrix","dst","newMat","n","abs","swapLines","ii","tmp","swapColumns","nc","baseGaussianPrototype","allocate","covarianceMode","covariance","inverseCovariance","allocateBimodal","likelihood","covarianceDeterminant","inputLikelihood","euclideanDistance","exp","PI","Number","isNaN","regularize","regularization","updateInverseCovariance","covMatrix","inv","updateInverseCovarianceBimodal","toEllipse","dimension1","dimension2","gaussianEllipse","y","width","height","angle","trace","eigenVal1","eigenVal2","atan","fromEllipse","tantheta","tan","bimodalGaussianPrototype","inverseCovarianceInput","inputObservation","covarianceDeterminantInput","regression","prediction","e","f","covMatrixInput","d1","d2","invInput","updateOutputCovariance","outputCovariance","covarianceGS","covarianceSG","tmptmptmp","covarianceMod","GaussianDistribution","proto","dist","trainerPrototype","initTraining","logLikelihood","iterations","previousLogLikelihood","converged","updateTraining","pctChg","terminateTraining","iteration","logProb","previousLogProb","convergenceCriteria","percentChange","withEMTraining","gmmBasePrototype","components","gaussians","mixtureCoeffs","beta","componentLikelihood","mixtureComponent","updateInverseCovariances","normalizeMixtureCoeffs","normConst","currentRegularization","gmmBimodalPrototype","results","outputValues","tmpOutputValues","withGMMBase","gmmTrainerPrototype","initParametersToDefault","initMeansWithKMeans","initCovariances","dataStddev","normCoeffs","std","absolute","relative","kmeans","kmeansParams","gmeans","factor","phraseIndices","E","tbase","log","pix","value","withGMMTraining","MulticlassBasePrototype","models","MulticlassModelBase","withMulticlassTraining","trainingFunction","classes","labs","circularBufferPrototype","full","buffer","capacity","idx","values","CircularBuffer","predictionBasePrototype","likelihoodBuffer","setLikelihoodWindow","lw","likelihoodWindow","reset","predict","updateResults","instantLikelihood","bufSize","withAbtractPrediction","checkSpec","parameter","specification","constructor","validateParameters","attr","spec","required","check","transform","gmmParameterSpec","m","withGMMPrediction","MulticlassPredictionBasePrototype","getLikelihoodWindow","instantLikelihoods","smoothedLikelihoods","smoothedLogLikelihoods","smoothedNormalizedLikelihoods","likeliest","resetBimodal","sort","normInstant","normSmoothed","maxLogLikelihood","lab","instantNormalizedLikelihoods","updateRegressionResults","MulticlassPredictionBimodalPrototype","multiClassRegressionEstimator","configuration","withMulticlassPrediction","trainGMM","trainMulticlassGMM","GMMPredictor","MulticlassGMMPredictor","hmmBasePrototype","forwardInitialized","isHierarchical","initializeForwardAlgorithm","transitionMode","states","alpha","prior","xStates","updateForwardAlgorithm","previousAlpha","transition","withHMMBase","TRANSITION_REGULARIZATION","hmmTrainerPrototype","initMeansCovariancesWithGMMEM","initMeansWithAllPhrases","initCovariancesFullyObserved","s","previousBeta","nbPhrases","gammaSequence","epsilonSequence","gammaSequenceperMixture","T","gammaSum","gammaSumPerMixture","baumWelchForwardBackward","baumWelchGammaSum","baumWelchEstimateMixtureCoefficients","baumWelchEstimateMeans","baumWelchEstimateCovariances","baumWelchEstimatePrior","baumWelchEstimateTransitions","normalizeTransitions","alphaSeq","betaSeq","setErgodic","setLeftRight","initCovariance","othermeans","gmmParams","normPrior","transitionNorm","initializeBackwardAlgorithm","ct","updateBackwardAlgorithm","baumWelchForwardUpdate","observationLikelihoods","baumWelchBackwardUpdate","currentPhrase","observationProbabilities","reverse","oo","sumprior","withHMMTraining","hmmParameterSpec","hmmPredictionPrototype","setup","updateAlphaWindow","updateProgress","progress","windowMinindex","windowMaxindex","alpha1","alpha2","windowNormalizationConstant","likeliestState","bestAlpha","hmmBimodalPredictionPrototype","regressionEstimator","clipMinState","clipMaxState","normalizationConstant","tmpPredictedOutput","withHMMPrediction","previous_alpha_","DEFAULT_EXITPROBABILITY_LAST_STATE","hierarchicalHmmPredictionPrototype","numClasses","exitTransition","updateExitProbabilities","exitProbabilities","exitProb","exitLikelihood","modelIndex","second","N","frontierV1","frontierV2","likelihoodAlpha","dstModelIndex","dstModel","front","srcModelIndex","exitRatio","exitNum","likelihoodVector","withHierarchicalHMMPrediction","trainHMM","trainMulticlassHMM","HMMPredictor","MulticlassHMMPredictor","HierarchicalHMMPredictor"],"mappings":"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"}