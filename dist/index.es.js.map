{"version":3,"file":"index.es.js","sources":["../src/training_set/phrase.js","../src/training_set/index.js","../src/core/model_base_mixin.js","../src/common/euclidean.js","../src/kmeans/kmeans_training_mixin.js","../src/kmeans/index.js","../src/common/matrix.js","../src/common/gaussian_distribution.js","../src/core/em_training_mixin.js","../src/gmm/gmm_base_mixin.js","../src/gmm/gmm_training_mixin.js","../src/core/multiclass_mixin.js","../src/core/multiclass_training_mixin.js","../src/common/circular_buffer.js","../src/core/prediction_mixin.js","../src/common/validation.js","../src/gmm/gmm_prediction_mixin.js","../src/core/multiclass_prediction_mixin.js","../src/gmm/index.js","../src/hmm/hmm_base_mixin.js","../src/hmm/hmm_training_mixin.js","../src/hmm/hmm_prediction_mixin.js","../src/hmm/hierarchical_hmm_prediction_mixin.js","../src/hmm/index.js"],"sourcesContent":["/**\n * Data Phrase Prototype\n * @ignore\n */\nconst phrasePrototype = /** @lends Phrase */ {\n  /**\n   * Get the value at a given index and dimension\n   * @param  {Number} index index\n   * @param  {Number} dim   dimension\n   * @return {Number}\n   */\n  get(index, dim) {\n    if (typeof index !== 'number' || Math.floor(index) !== index) {\n      throw new Error('The index must be an integer');\n    }\n    if (dim >= this.dimension) {\n      throw new Error('Phrase: dimension out of bounds');\n    }\n    if (this.bimodal) {\n      if (dim < this.inputDimension) {\n        if (index >= this.inputData.length) {\n          throw new Error('Phrase: index out of bounds');\n        }\n        return this.inputData[index][dim];\n      }\n      if (index >= this.outputData.length) {\n        throw new Error('Phrase: index out of bounds');\n      }\n      return this.outputData[index][dim - this.inputDimension];\n    }\n    if (index >= this.length) {\n      throw new Error('Phrase: index out of bounds');\n    }\n    if (!this.inputData[index]) {\n      throw new Error('WTF?');\n    }\n    return this.inputData[index][dim];\n  },\n\n  /**\n   * Get the data frame at a given index\n   * @param  {Number} index index\n   * @return {Array<number>}\n   * @throws {Error} if the index is out of bounds\n   */\n  getFrame(index) {\n    if (index >= this.length) {\n      throw new Error('Phrase: index out of bounds');\n    }\n    if (this.bimodal) {\n      return this.inputData[index].concat(this.outputData[index]);\n    }\n    return this.inputData[index];\n  },\n\n  /**\n   * Push an observation vector to the phrase\n   * @param  {Array<number>} observation observation data\n   * @throws {Error} if the observation's dimension does not match the\n   * dimension of the training set\n   */\n  push(observation) {\n    // console.log('push:', observation);\n    if (observation.length !== this.dimension) {\n      throw new Error('Observation has wrong dimension');\n    }\n\n    if (this.bimodal) {\n      this.inputData.push(observation.slice(0, this.inputDimension));\n      this.outputData.push(observation.slice(this.inputDimension, this.dimension));\n    } else {\n      this.inputData.push(observation);\n    }\n\n    this.length += 1;\n  },\n\n  /**\n   * Push an observation to the input modality only\n   * @param  {Array<number>} observation observation data\n   * @throws {Error} if the phrase is not bimodal\n   * @throws {Error} if the observation's dimension does not match the\n   * input dimension of the training set\n   */\n  pushInput(observation) {\n    if (!this.bimodal) {\n      throw new Error('this phrase is unimodal, use `push`');\n    }\n    if (observation.size() !== this.inputDimension) {\n      throw new Error('Observation has wrong dimension');\n    }\n\n    this.inputData.push(observation);\n    this.trim();\n  },\n\n  /**\n   * Push an observation to the output modality only\n   * @param  {Array<number>} observation observation data\n   * @throws {Error} if the phrase is not bimodal\n   * @throws {Error} if the observation's dimension does not match the\n   * output dimension of the training set\n   */\n  pushOutput(observation) {\n    if (!this.bimodal) {\n      throw new Error('this phrase is unimodal, use `push`');\n    }\n    if (observation.size() !== this.outputDimension) {\n      throw new Error('Observation has wrong dimension');\n    }\n\n    this.outputData.push(observation);\n    this.trim();\n  },\n\n  /**\n   * Clear the phrase's data\n   */\n  clear() {\n    this.length = 0;\n    this.inputData = [];\n    this.outputData = [];\n  },\n\n  /**\n   * Clear the phrase's input data\n   */\n  clearInput() {\n    this.inputData = [];\n    this.trim();\n  },\n\n  /**\n   * Clear the phrase's output data\n   */\n  clearOutput() {\n    this.outputData = [];\n    this.trim();\n  },\n\n  /**\n   * Compute the mean of the phrase (across time)\n   * @return {Array<number>} The mean vector (same dimension as the\n   * training set)\n   */\n  mean() {\n    const mean = Array(this.dimension).fill(0);\n    for (let d = 0; d < this.dimension; d += 1) {\n      for (let t = 0; t < this.length; t += 1) {\n        mean[d] += this.get(t, d);\n      }\n      mean[d] /= this.length;\n    }\n    return mean;\n  },\n\n  /**\n   * Compute the standard deviation of the phrase (across time)\n   * @return {Array<number>} The standard deviation vector (same dimension as\n   * the training set)\n   */\n  standardDeviation() {\n    const stddev = Array(this.dimension).fill(0);\n    const mean = this.mean();\n    for (let d = 0; d < this.dimension; d += 1) {\n      for (let t = 0; t < this.length; t += 1) {\n        stddev[d] += (this.get(t, d) - mean[d]) * (this.get(t, d) - mean[d]);\n      }\n      stddev[d] /= this.length;\n      stddev[d] = Math.sqrt(stddev[d]);\n    }\n    return stddev;\n  },\n\n  /**\n   * Compute the minimum and maximum of the phrase (across time)\n   * @return {Array<{ min: number, max: number }>} The min/max vector (same\n   * dimension as the training set)\n   */\n  minmax() {\n    const minmax = Array.from(\n      Array(this.dimension),\n      () => ({ min: +Infinity, max: -Infinity }),\n    );\n    for (let d = 0; d < this.dimension; d += 1) {\n      for (let t = 0; t < this.length; t += 1) {\n        minmax[d].min = Math.min(this.get(t, d), minmax[d].min);\n        minmax[d].max = Math.max(this.get(t, d), minmax[d].max);\n      }\n    }\n    return minmax;\n  },\n\n  /**\n   * Trim the phrase length to the minimum of the input and output lengths\n   * @private\n   */\n  trim() {\n    if (this.bimodal) {\n      this.length = Math.min(this.inputData.length, this.outputData.length);\n    }\n  },\n};\n\n/**\n * Create a data phrase, potentially bimodal. Phrases are data structures for\n * temporal data (e.g. gestures), used to constitute training sets.\n *\n * @param {Object} [params]                   Phrase parameters\n * @param {Number} [params.inputDimension=1]  Dimension of the input modality\n * @param {Number} [params.outputDimension=0] Dimension of the output modality\n * (optional)\n * @param {Array<String>} [params.columnNames=null] Data column names, e.g.\n * \\['accX', 'accY', 'accZ'\\] (optional)\n * @param {String} [params.label='']          Phrase label\n * @return {Phrase}\n * @function\n *\n * @property {Boolean} bimodal Specifies if the phrase is bimodal\n * @property {Number} inputDimension Dimension of the input modality\n * @property {Number} outputDimension Dimension of the output modality\n * @property {Number} dimension Total dimension\n * @property {Number} length Phrase length (number of frames)\n * @property {String} label Phrase label\n * @property {Array<String>} columnNames Columns names\n */\nexport default function Phrase({\n  inputDimension = 1,\n  outputDimension = 0,\n  columnNames = null,\n  label = '',\n} = {}) {\n  const dimension = inputDimension + outputDimension;\n  return Object.assign(\n    Object.create(phrasePrototype),\n    {\n      bimodal: outputDimension > 0,\n      inputDimension,\n      outputDimension,\n      dimension,\n      length: 0,\n      label,\n      inputData: [],\n      outputData: [],\n      columnNames: columnNames || Array(dimension).fill(''),\n    },\n  );\n}\n","import Phrase from './phrase';\n\n/**\n * Training Set Prototype\n * @ignore\n */\nconst trainingSetPrototype = /** @lends TrainingSet */ {\n  /**\n   * Get the training set size (number of phrases)\n   * @return {number}\n   */\n  size() {\n    return Object.keys(this.phrases).length;\n  },\n\n  /**\n   * Checks if the training set is empty\n   * @return {boolean}\n   */\n  empty() {\n    return this.length === 0;\n  },\n\n  /**\n   * Get a reference to a phrase by index\n   * @param  {number} phraseIndex phrase index\n   * @return {Phrase}\n   */\n  getPhrase(phraseIndex) {\n    if (Object.keys(this.phrases).includes(phraseIndex.toString())) {\n      return this.phrases[phraseIndex.toString()];\n    }\n    return null;\n  },\n\n  /**\n   * Iterate over all phrases in the training set. The callback function\n   * should take 3 arguments: the phrase, its index in the training set,\n   * and the phrases structure.\n   *\n   * @param  {Function} callback Callback function\n   */\n  forEach(callback) {\n    Object.keys(this.phrases).forEach((phraseIndex) => {\n      callback(this.phrases[phraseIndex], phraseIndex, this.phrases);\n    });\n  },\n\n  /**\n   * Add a phrase to the training set and return it.\n   * @param  {number} phraseIndex        phrase index\n   * @param  {string} [label=undefined]  phrase label (its index if undefined)\n   * @param  {Phrase} [phrase=undefined] Phrase data. If unspecified, an empty\n   * phrase is created.\n   * @return {Phrase}\n   */\n  push(phraseIndex, label = undefined, phrase = undefined) {\n    const p = (phrase !== undefined) ? phrase : Phrase({\n      inputDimension: this.inputDimension,\n      outputDimension: this.outputDimension,\n      columnNames: this.columnNames,\n      label: (label !== undefined) ? label : phraseIndex.toString(),\n    });\n    this.phrases[phraseIndex] = p;\n    return p;\n  },\n\n  /**\n   * Remove a phrase\n   * @param  {number} phraseIndex phrase index\n   */\n  remove(phraseIndex) {\n    delete this.phrases[phraseIndex];\n  },\n\n  /**\n   * Remove all phrases with a given label\n   * @param  {string} label class label\n   */\n  removeClass(label) {\n    this.phrases = Object.keys(this.phrases)\n      .filter(i => this.phrases[i].label !== label)\n      .map(i => ({ i: this.phrases[i] }))\n      .reduce((x, p) => ({ ...x, ...p }), {});\n  },\n\n  /**\n   * Clear the training set (delete all phrases)\n   */\n  clear() {\n    this.phrases = {};\n  },\n\n  /**\n   * Get the sub-training set composed of all phrases of a given class\n   * @param  {string} label class label\n   * @return {TrainingSet}\n   */\n  getPhrasesOfClass(label) {\n    const ts = TrainingSet(this); // eslint-disable-line no-use-before-define\n    ts.phrases = Object.keys(this.phrases)\n      .filter(i => this.phrases[i].label === label)\n      .map(i => ({ i: this.phrases[i] }))\n      .reduce((x, p) => ({ ...x, ...p }), {});\n    return ts;\n  },\n\n  /**\n   * Get the list of unique labels in the training set\n   * @return {Array<string>}\n   */\n  labels() {\n    return Object.keys(this.phrases)\n      .map(i => this.phrases[i].label)\n      .reduce((ll, x) => (ll.includes(x) ? ll : ll.concat([x])), []);\n  },\n\n  /**\n   * Get the list of phrase indices\n   * @return {Array<number>}\n   */\n  indices() {\n    return Object.keys(this.phrases);\n  },\n\n  /**\n   * Get the mean of the training set over all phrases\n   * @return {Array<number>} mean (same dimension as the training set)\n   */\n  mean() {\n    const sum = Array(this.dimension).fill(0);\n    let totalLength = 0;\n    Object.keys(this.phrases).forEach((i) => {\n      for (let d = 0; d < this.dimension; d += 1) {\n        for (let t = 0; t < this.phrases[i].length; t += 1) {\n          sum[d] += this.phrases[i].get(t, d);\n        }\n      }\n      totalLength += this.phrases[i].length;\n    });\n\n    return sum.map(x => x / totalLength);\n  },\n\n  /**\n   * Get the standard deviation of the training set over all phrases\n   * @return {Array<number>} standard deviation (same dimension as the training set)\n   */\n  standardDeviation() {\n    const stddev = Array(this.dimension).fill(0);\n    const mean = this.mean();\n    let totalLength = 0;\n    Object.keys(this.phrases).forEach((i) => {\n      for (let d = 0; d < this.dimension; d += 1) {\n        for (let t = 0; t < this.phrases[i].length; t += 1) {\n          stddev[d] += (this.phrases[i].get(t, d) - mean[d]) ** 2;\n        }\n      }\n      totalLength += this.phrases[i].length;\n    });\n\n    return stddev.map(x => Math.sqrt(x / totalLength));\n  },\n\n  /**\n   * Get the min and max of the training set over all phrases\n   * @return {Array<{ min: number, max: number }>} min/max (same dimension as the training set)\n   */\n  minmax() {\n    const minmax = Array.from(\n      Array(this.dimension),\n      () => ({ min: +Infinity, max: -Infinity }),\n    );\n    Object.keys(this.phrases).forEach((i) => {\n      for (let d = 0; d < this.dimension; d += 1) {\n        for (let t = 0; t < this.phrases[i].length; t += 1) {\n          minmax[d].min += Math.min(minmax[d].min, this.phrases[i].get(t, d));\n          minmax[d].max += Math.max(minmax[d].max, this.phrases[i].get(t, d));\n        }\n      }\n    });\n    return minmax;\n  },\n};\n\n/**\n * Create a Training set, composed of a set of indexed data phrases\n * @param {Object} [params]                   Training set parameters\n * @param {Number} [params.inputDimension=1]  Dimension of the input modality\n * @param {Number} [params.outputDimension=0] Dimension of the output modality\n * (optional)\n * @param {Array<String>} [params.columnNames=null] Data column names, e.g.\n * \\['accX', 'accY', 'accZ'\\] (optional)\n * @return {TrainingSet}\n * @function\n *\n * @property {Boolean} bimodal Specifies if the training set is bimodal\n * @property {Number}  inputDimension Dimension of the input modality\n * @property {Number}  outputDimension Dimension of the output modality\n * @property {Number}  dimension Total dimension\n * @property {Array<String>} columnNames Columns names\n */\nexport default function TrainingSet({\n  inputDimension = 1,\n  outputDimension = 0,\n  columnNames = null,\n} = {}) {\n  const dimension = inputDimension + outputDimension;\n  return Object.assign(\n    Object.create(trainingSetPrototype),\n    {\n      bimodal: outputDimension > 0,\n      inputDimension,\n      outputDimension,\n      dimension,\n      columnNames: columnNames || Array(dimension).fill(''),\n      phrases: {},\n    },\n  );\n}\n","/**\n * Create the skeleton of a model\n *\n * @function\n * @param       {Number} inputDimension  input dimension\n * @param       {Number} outputDimension output dimension\n * @param       {Object} parameters      additional parameters to be copied\n * @constructor\n */\nexport default function ModelBase({\n  inputDimension,\n  outputDimension,\n  ...parameters\n}) {\n  const p = parameters;\n  delete p.bimodal;\n  delete p.inputDimension;\n  delete p.outputDimension;\n  delete p.dimension;\n  return /** @lends ModelBase */{\n    params: {\n      ...p,\n      get bimodal() {\n        return outputDimension > 0;\n      },\n      get inputDimension() {\n        return inputDimension;\n      },\n      get outputDimension() {\n        return outputDimension;\n      },\n      get dimension() {\n        return inputDimension + outputDimension;\n      },\n    },\n  };\n}\n\n/**\n * Check if an object is a base model (check for attribute existence)\n * @param  {Object}  o Source object\n * @return {Boolean}\n */\nexport function isBaseModel(o) {\n  if (!Object.keys(o).includes('params')) return false;\n  const keys = ['bimodal', 'inputDimension', 'outputDimension', 'dimension'];\n  return keys.map(key => Object.keys(o.params).includes(key))\n    .reduce((a, b) => a && b, true);\n}\n","/**\n * Compute the euclidean distance between to vectors\n * @param  {Array} v1\n * @param  {Array} v2\n * @return {number}\n */\nexport default function euclidean(v1, v2) {\n  return Math.sqrt(v1\n    .map((x1, i) => (x1 - v2[i]) ** 2)\n    .reduce((a, x) => (a + x), 0));\n}\n","import { isBaseModel } from '../core/model_base_mixin';\nimport euclidean from '../common/euclidean';\n\nconst kMeansTrainingPrototype = {\n  train(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) {\n      throw new Error('The training set is empty');\n    }\n\n    this.params.centers = Array.from(\n      Array(this.params.clusters),\n      () => new Array(this.params.dimension).fill(0),\n    );\n\n    // TODO: improve initialization =>\n    // https://www.slideshare.net/djempol/kmeans-initialization-15041920\n    //\n    if (this.trainingConfig.initialization === 'random') {\n      this.initializeClustersRandom(trainingSet);\n    } else if (this.trainingConfig.initialization === 'forgy') {\n      this.initializeClustersForgy(trainingSet);\n    } else if (this.trainingConfig.initialization === 'data') {\n      this.initClustersWithFirstPhrase(trainingSet);\n    } else {\n      throw new Error('Unknown K-Means initialization, must be `random`, `forgy` or `data`');\n    }\n\n    for (\n      let trainingNbIterations = 0;\n      trainingNbIterations < this.trainingConfig.maxIterations;\n      trainingNbIterations += 1\n    ) {\n      const previousCenters = this.params.centers;\n\n      this.updateCenters(previousCenters, trainingSet);\n\n      let meanClusterDistance = 0;\n      let maxRelativeCenterVariation = 0;\n      for (let k = 0; k < this.params.clusters; k += 1) {\n        for (let l = 0; l < this.params.clusters; l += 1) {\n          if (k !== l) {\n            meanClusterDistance += euclidean(\n              this.params.centers[k],\n              this.params.centers[l],\n            );\n          }\n        }\n        maxRelativeCenterVariation = Math.max(\n          euclidean(\n            previousCenters[k],\n            this.params.centers[k],\n          ),\n          maxRelativeCenterVariation,\n        );\n      }\n      meanClusterDistance /= this.params.clusters * (this.params.clusters - 1);\n      maxRelativeCenterVariation /= this.params.clusters;\n      maxRelativeCenterVariation /= meanClusterDistance;\n      if (maxRelativeCenterVariation < this.trainingConfig.relativeDistanceThreshold) break;\n    }\n    return this.params;\n  },\n\n  initClustersWithFirstPhrase(trainingSet) {\n    const phrase = trainingSet.getPhrase(trainingSet.indices()[0]);\n    const step = Math.floor(phrase.length / this.params.clusters);\n\n    let offset = 0;\n    for (let c = 0; c < this.params.clusters; c += 1) {\n      this.params.centers[c] = new Array(this.params.dimension).fill(0);\n      for (let t = 0; t < step; t += 1) {\n        for (let d = 0; d < this.params.dimension; d += 1) {\n          this.params.centers[c][d] += phrase.get(offset + t, d) / step;\n        }\n      }\n      offset += step;\n    }\n  },\n\n  initializeClustersRandom(trainingSet) {\n    const phrase = trainingSet.getPhrase(trainingSet.indices()[0]);\n    const indices = Array.from(\n      Array(phrase.length),\n      () => Math.floor(Math.random() * this.params.clusters),\n    );\n    const pointsPerCluster = indices.reduce(\n      (ppc, i) => {\n        const p = ppc;\n        p[i] += 1;\n        return p;\n      },\n      Array(this.params.clusters).fill(0),\n    );\n    for (let i = 0; i < indices.length; i += 1) {\n      const clustIdx = indices[i];\n      for (let d = 0; d < this.params.dimension; d += 1) {\n        this.params.centers[clustIdx][d] += phrase.get(i, d);\n      }\n    }\n    this.params.centers.forEach((_, c) => {\n      this.params.centers[c] = this.params.centers[c]\n        .map(x => x / pointsPerCluster[c]);\n    });\n  },\n\n  initializeClustersForgy(trainingSet) {\n    const phrase = trainingSet.getPhrase(trainingSet.indices()[0]);\n    const indices = Array.from(\n      Array(this.params.clusters),\n      () => Math.floor(Math.random() * phrase.length),\n    );\n    this.params.centers = indices.map(i => phrase.getFrame(i));\n  },\n\n  updateCenters(previousCenters, trainingSet) {\n    this.params.centers = Array.from(Array(this.params.clusters), () =>\n      new Array(this.params.dimension).fill(0));\n    const numFramesPerCluster = Array(this.params.clusters).fill(0);\n    trainingSet.forEach((phrase) => {\n      for (let t = 0; t < phrase.length; t += 1) {\n        const frame = phrase.getFrame(t);\n        let minDistance = euclidean(frame, previousCenters[0]);\n        let clusterMembership = 0;\n        for (let k = 1; k < this.params.clusters; k += 1) {\n          const distance = euclidean(\n            frame,\n            previousCenters[k],\n            this.params.dimension,\n          );\n          if (distance < minDistance) {\n            clusterMembership = k;\n            minDistance = distance;\n          }\n        }\n        numFramesPerCluster[clusterMembership] += 1;\n        for (let d = 0; d < this.params.dimension; d += 1) {\n          this.params.centers[clusterMembership][d] += phrase.get(t, d);\n        }\n      }\n    });\n    for (let k = 0; k < this.params.clusters; k += 1) {\n      if (numFramesPerCluster[k] > 0) {\n        for (let d = 0; d < this.params.dimension; d += 1) {\n          this.params.centers[k][d] /= numFramesPerCluster[k];\n        }\n      }\n    }\n  },\n};\n\nexport default function withKMeansTraining(\n  o,\n  clusters,\n  trainingConfiguration = {},\n) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  const trainingConfig = Object.assign({\n    initialization: 'random',\n    relativeDistanceThreshold: 1e-3,\n    minIterations: 5,\n    maxIterations: 100,\n  }, trainingConfiguration);\n  const model = Object.assign(o, kMeansTrainingPrototype, {\n    trainingConfig,\n  });\n  model.params.clusters = clusters;\n  return model;\n}\n","import ModelBase from '../core/model_base_mixin';\nimport withKMeansTraining from './kmeans_training_mixin';\n\n/**\n * Train a K-Means model.\n *\n * @todo K-Means details\n *\n * @param  {TrainingSet} trainingSet           training set\n * @param  {number} clusters                   Number of clusters\n * @param  {Object} [trainingConfig=undefined] Training configuration\n * @return {Object}                            K-Means parameters\n */\nexport default function trainKmeans(\n  trainingSet,\n  clusters,\n  trainingConfig = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const model = withKMeansTraining(\n    ModelBase({\n      inputDimension,\n      outputDimension,\n    }),\n    clusters,\n    trainingConfig,\n  );\n  return model.train(trainingSet);\n}\n","/* eslint-disable no-use-before-define */\nconst kEpsilonPseudoInverse = 1.0e-9;\n\n/**\n * Matrix Prototype\n * @type {Object}\n * @property {Array} data Matrix data\n * @property {Number} ncols Number of columns\n * @property {Number} nrows Number of rows\n *\n * @ignore\n */\nconst matrixPrototype = /** @lends Matrix */ {\n  /**\n   * Compute the Sum of the matrix\n   * @return {Number} Sum of all elements in the matrix\n   */\n  sum() {\n    return this.data.reduce((a, b) => a + b, 0);\n  },\n\n  /**\n   * Compute the transpose matrix\n   * @return {Matrix}\n   */\n  transpose() {\n    const out = Matrix(this.ncols, this.nrows);\n    for (let i = 0; i < this.ncols; i += 1) {\n      for (let j = 0; j < this.nrows; j += 1) {\n        out.data[(i * this.nrows) + j] = this.data[(j * this.ncols) + i];\n      }\n    }\n    return out;\n  },\n\n  /**\n   * Compute the product of matrices\n   * @param  {Matrix} mat Second matrix\n   * @return {Matrix}     Product of the current matrix by `mat`\n   */\n  product(mat) {\n    if (this.ncols !== mat.nrows) {\n      throw new Error('Wrong dimensions for matrix product');\n    }\n    const out = Matrix(this.nrows, mat.ncols);\n    for (let i = 0; i < this.nrows; i += 1) {\n      for (let j = 0; j < mat.ncols; j += 1) {\n        out.data[(i * mat.ncols) + j] = 0;\n        for (let k = 0; k < this.ncols; k += 1) {\n          out.data[(i * mat.ncols) + j] +=\n            this.data[(i * this.ncols) + k] * mat.data[(k * mat.ncols) + j];\n        }\n      }\n    }\n    return out;\n  },\n\n  /**\n   * Compute the Pseudo-Inverse of a Matrix\n   * @param  {Number} determinant Determinant (computed with the inversion)\n   * @return {Matrix}             Pseudo-inverse of the matrix\n   */\n  pinv() {\n    if (this.nrows === this.ncols) {\n      return this.gaussJordanInverse();\n    }\n\n    const transp = this.transpose();\n    if (this.nrows >= this.ncols) {\n      const prod = transp.product(this);\n      const { determinant, matrix: dst } = prod.gaussJordanInverse();\n      return { determinant, matrix: dst.product(transp) };\n    }\n    const prod = this.product(transp);\n    const { determinant, matrix: dst } = prod.gaussJordanInverse();\n    return { determinant, matrix: transp.product(dst) };\n  },\n\n  /**\n   * Compute the Gauss-Jordan Inverse of a Square Matrix\n   * !!! Determinant (computed with the inversion\n   * @private\n   */\n  gaussJordanInverse() {\n    if (this.nrows !== this.ncols) {\n      throw new Error('Gauss-Jordan inversion: Cannot invert Non-square matrix');\n    }\n    let determinant = 1;\n    const mat = Matrix(this.nrows, this.ncols * 2);\n    const newMat = Matrix(this.nrows, this.ncols * 2);\n    const n = this.nrows;\n\n    // Create matrix\n    for (let i = 0; i < n; i += 1) {\n      for (let j = 0; j < n; j += 1) {\n        mat.data[(i * 2 * n) + j] = this.data[(i * n) + j];\n      }\n      mat.data[(i * 2 * n) + n + i] = 1;\n    }\n\n    for (let k = 0; k < n; k += 1) {\n      let i = k;\n      while (Math.abs(mat.data[(i * 2 * n) + k]) < kEpsilonPseudoInverse) {\n        i += 1;\n        if (i === n) {\n          throw new Error('Non-invertible matrix');\n        }\n      }\n      determinant *= mat.data[(i * 2 * n) + k];\n\n      // if found > Exchange lines\n      if (i !== k) {\n        mat.swapLines(i, k);\n      }\n\n      newMat.data = mat.data.slice();\n\n      for (let j = 0; j < 2 * n; j += 1) {\n        newMat.data[(k * 2 * n) + j] /= mat.data[(k * 2 * n) + k];\n      }\n      for (let ii = 0; ii < n; ii += 1) {\n        if (ii !== k) {\n          for (let j = 0; j < 2 * n; j += 1) {\n            newMat.data[(ii * 2 * n) + j] -=\n                mat.data[(ii * 2 * n) + k] *\n                newMat.data[(k * 2 * n) + j];\n          }\n        }\n      }\n      mat.data = newMat.data.slice();\n    }\n\n    const dst = Matrix(this.nrows, this.ncols);\n    for (let i = 0; i < n; i += 1) {\n      for (let j = 0; j < n; j += 1) {\n        dst.data[(i * n) + j] = mat.data[(i * 2 * n) + n + j];\n      }\n    }\n    return { determinant, matrix: dst };\n  },\n\n  /**\n   * Swap 2 lines of the matrix\n   * @param  {[type]} i index of the first line\n   * @param  {[type]} j index of the second line\n   * @private\n   */\n  swapLines(i, j) {\n    for (let k = 0; k < this.ncols; k += 1) {\n      const tmp = this.data[(i * this.ncols) + k];\n      this.data[(i * this.ncols) + k] = this.data[(j * this.ncols) + k];\n      this.data[(j * this.ncols) + k] = tmp;\n    }\n  },\n\n  /**\n   * Swap 2 columns of the matrix\n   * @param  {[type]} i index of the first column\n   * @param  {[type]} j index of the second column\n   * @private\n   */\n  swapColumns(i, j) {\n    for (let k = 0; k < this.nrows; k += 1) {\n      const tmp = this.data[(k * this.ncols) + i];\n      this.data[(k * this.ncols) + i] = this.data[(k * this.ncols) + j];\n      this.data[(k * this.ncols) + j] = tmp;\n    }\n  },\n};\n\n/**\n * Create a matrix\n *\n * @function\n * @param       {Number} [nrows=0]  Number of rows\n * @param       {Number} [ncols=-1] Number of columns\n * @return {matrixPrototype}\n *\n * @property {Array} data Matrix data\n * @property {Number} ncols Number of columns\n * @property {Number} nrows Number of rows\n */\nexport default function Matrix(nrows = 0, ncols = -1) {\n  const nc = ncols < 0 ? nrows : ncols;\n  return Object.assign(\n    Object.create(matrixPrototype), //\n    {\n      nrows,\n      ncols: nc,\n      data: Array(nrows * nc).fill(0),\n    },\n  );\n}\n","import Matrix from './matrix';\n\n/**\n * Gaussian Distribution Prototype\n *\n * @type {Object}\n * @property {boolean} bimodal           Specifies if the distribution is\n * bimodal (for regression use)\n * @property {number}  inputDimension    input dimension\n * @property {number}  outputDimension   output dimension\n * @property {number}  dimension         Total dimension\n * @property {Array}   mean              Distribution mean\n * @property {Array}   covariance        Distribution covariance\n * @property {Array}   inverseCovariance Inverse covariance\n *\n * @ignore\n */\nconst baseGaussianPrototype = /** @lends GaussianDistribution */ {\n  /**\n   * Allocate the distribution\n   * @private\n   */\n  allocate() {\n    this.mean = new Array(this.dimension).fill(0);\n    if (this.covarianceMode === 'full') {\n      this.covariance = new Array(this.dimension ** 2).fill(0);\n      this.inverseCovariance = new Array(this.dimension ** 2).fill(0);\n    } else {\n      this.covariance = new Array(this.dimension).fill(0);\n      this.inverseCovariance = new Array(this.dimension).fill(0);\n    }\n    if (this.bimodal) {\n      this.allocateBimodal();\n    }\n  },\n\n  /**\n   * @brief Estimate the likelihood of an observation vector.\n   *\n   * If the distribution is bimodal an the observation is a vector of the size\n   * of the input modality, the likelihood is computed only on the\n   * distribution for the input modality\n   *\n   * @param  {array} observation data observation\n   * @return {number}\n   */\n  likelihood(observation) {\n    if (this.covarianceDeterminant === 0) {\n      throw new Error('Covariance Matrix is not invertible');\n    }\n    if (this.bimodal && observation.length === this.inputDimension) {\n      return this.inputLikelihood(observation);\n    }\n    if (observation.length !== this.dimension) {\n      throw new Error(`GaussianDistribution: observation has wrong dimension. Expected \\`${this.dimension}\\`, got \\`${observation.length}\\``);\n    }\n\n    let euclideanDistance = 0;\n    if (this.covarianceMode === 'full') {\n      for (let l = 0; l < this.dimension; l += 1) {\n        let tmp = 0;\n        for (let k = 0; k < this.dimension; k += 1) {\n          tmp += this.inverseCovariance[(l * this.dimension) + k] *\n            (observation[k] - this.mean[k]);\n        }\n        euclideanDistance += (observation[l] - this.mean[l]) * tmp;\n      }\n    } else {\n      for (let l = 0; l < this.dimension; l += 1) {\n        euclideanDistance += this.inverseCovariance[l] *\n          (observation[l] - this.mean[l]) *\n          (observation[l] - this.mean[l]);\n      }\n    }\n\n    let p = Math.exp(-0.5 * euclideanDistance) /\n      Math.sqrt(this.covarianceDeterminant * ((2 * Math.PI) ** this.dimension));\n\n    if (p < 1e-180 || Number.isNaN(p) || Math.abs(p) === +Infinity) {\n      p = 1e-180;\n    }\n\n    return p;\n  },\n\n  /**\n   * Regularize the distribution, given a regularization vector of the same\n   * dimension. Regularization adds the vector to the variance of the\n   * distribution.\n   *\n   * @param  {Array} regularization regularization vector\n   */\n  regularize(regularization) {\n    if (this.covarianceMode === 'full') {\n      for (let d = 0; d < this.dimension; d += 1) {\n        this.covariance[(d * this.dimension) + d] += regularization[d];\n      }\n    } else {\n      for (let d = 0; d < this.dimension; d += 1) {\n        this.covariance[d] += regularization[d];\n      }\n    }\n  },\n\n  /**\n   * Update the inverse covariance of the distribution\n   * @private\n   */\n  updateInverseCovariance() {\n    if (this.covarianceMode === 'full') {\n      const covMatrix = Matrix(this.dimension, this.dimension);\n\n      covMatrix.data = this.covariance.slice();\n      const inv = covMatrix.pinv();\n      this.covarianceDeterminant = inv.determinant;\n      this.inverseCovariance = inv.matrix.data;\n    } else { // DIAGONAL COVARIANCE\n      this.covarianceDeterminant = 1;\n      for (let d = 0; d < this.dimension; d += 1) {\n        if (this.covariance[d] <= 0) {\n          throw new Error('Non-invertible matrix');\n        }\n        this.inverseCovariance[d] = 1 / this.covariance[d];\n        this.covarianceDeterminant *= this.covariance[d];\n      }\n    }\n    if (this.bimodal) {\n      this.updateInverseCovarianceBimodal();\n    }\n  },\n\n  /**\n   * Convert to an ellipse allong two dimensions\n   *\n   * @param  {number} dimension1 first dimension\n   * @param  {number} dimension2 second dimension\n   * @return {Ellipse}\n   */\n  toEllipse(dimension1, dimension2) {\n    if (dimension1 >= this.dimension || dimension2 >= this.dimension) {\n      throw new Error('dimensions out of range');\n    }\n\n    const gaussianEllipse = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      angle: 0,\n    };\n    gaussianEllipse.x = this.mean[dimension1];\n    gaussianEllipse.y = this.mean[dimension2];\n\n    // Represent 2D covariance with square matrix\n    // |a b|\n    // |b c|\n    let a;\n    let b;\n    let c;\n    if (this.covarianceMode === 'full') {\n      a = this.covariance[(dimension1 * this.dimension) + dimension1];\n      b = this.covariance[(dimension1 * this.dimension) + dimension2];\n      c = this.covariance[(dimension2 * this.dimension) + dimension2];\n    } else {\n      a = this.covariance[dimension1];\n      b = 0;\n      c = this.covariance[dimension2];\n    }\n\n    // Compute Eigen Values to get width, height and angle\n    const trace = a + c;\n    const determinant = (a * c) - (b * b);\n    const eigenVal1 = 0.5 * (trace + Math.sqrt((trace ** 2) - (4 * determinant)));\n    const eigenVal2 = 0.5 * (trace - Math.sqrt((trace ** 2) - (4 * determinant)));\n    gaussianEllipse.width = Math.sqrt(5.991 * eigenVal1);\n    gaussianEllipse.height = Math.sqrt(5.991 * eigenVal2);\n    gaussianEllipse.angle = Math.atan(b / (eigenVal1 - c));\n    if (Number.isNaN(gaussianEllipse.angle)) {\n      gaussianEllipse.angle = Math.PI / 2;\n    }\n\n    return gaussianEllipse;\n  },\n\n  /**\n   * Modify the distribution along two dimensions given the equivalent values\n   * as an Ellipse representation.\n   *\n   * @param  {Ellipse} gaussianEllipse The Ellipse corresponding to the 2D\n   * covariance along the two target dimensions\n   * @param  {number} dimension1      first dimension\n   * @param  {number} dimension2      second dimension\n   */\n  fromEllipse(gaussianEllipse, dimension1, dimension2) {\n    if (dimension1 >= this.dimension || dimension2 >= this.dimension) {\n      throw new Error('dimensions out of range');\n    }\n\n    this.mean[dimension1] = gaussianEllipse.x;\n    this.mean[dimension2] = gaussianEllipse.y;\n\n    const eigenVal1 = (gaussianEllipse.width * gaussianEllipse.width) / 5.991;\n    const eigenVal2 = (gaussianEllipse.height * gaussianEllipse.height) / 5.991;\n    const tantheta = Math.tan(gaussianEllipse.angle);\n    const b = ((eigenVal1 - eigenVal2) * tantheta) / ((tantheta ** 2) + 1);\n    const c = eigenVal1 - (b / tantheta);\n    const a = eigenVal2 + (b / tantheta);\n\n    if (this.covarianceMode === 'full') {\n      this.covariance[(dimension1 * this.dimension) + dimension1] = a;\n      this.covariance[(dimension1 * this.dimension) + dimension2] = b;\n      this.covariance[(dimension2 * this.dimension) + dimension1] = b;\n      this.covariance[(dimension2 * this.dimension) + dimension2] = c;\n    } else {\n      this.covariance[dimension1] = a;\n      this.covariance[dimension2] = c;\n    }\n    this.updateInverseCovariance();\n  },\n};\n\n/**\n * Bimodal Gaussian Distribution Prototype, for Regression purposes\n *\n * @type {Object}\n * @property {boolean} bimodal           Specifies if the distribution is\n * bimodal (for regression use)\n * @property {number}  inputDimension    input dimension\n * @property {number}  outputDimension   output dimension\n * @property {number}  dimension         Total dimension\n * @property {Array}   mean              Distribution mean\n * @property {Array}   covariance        Distribution covariance\n * @property {Array}   inverseCovariance Inverse covariance\n * @property {Array}   inverseCovarianceInput Inverse covariance of the input\n * modality\n *\n * @ignore\n */\nconst bimodalGaussianPrototype = /** @lends GaussianDistribution */ {\n  /**\n   * Allocate the distribution\n   * @private\n   */\n  allocateBimodal() {\n    if (this.covarianceMode === 'full') {\n      this.inverseCovarianceInput = new Array(this.inputDimension ** 2).fill(0);\n    } else {\n      this.inverseCovarianceInput = new Array(this.inputDimension).fill(0);\n    }\n  },\n\n  /**\n   * Estimate the likelihood of an observation for the input modality only.\n   * Called by `likelihood` when relevant.\n   * @param  {Array} inputObservation observation (input modality only)\n   * @return {number}\n   * @private\n   */\n  inputLikelihood(inputObservation) {\n    if (this.covarianceDeterminantInput === 0) {\n      throw new Error('Covariance Matrix of input modality is not invertible');\n    }\n\n    let euclideanDistance = 0;\n    if (this.covarianceMode === 'full') {\n      for (let l = 0; l < this.inputDimension; l += 1) {\n        let tmp = 0;\n        for (let k = 0; k < this.inputDimension; k += 1) {\n          tmp += this.inverseCovarianceInput[(l * this.inputDimension) + k] *\n            (inputObservation[k] - this.mean[k]);\n        }\n        euclideanDistance += (inputObservation[l] - this.mean[l]) * tmp;\n      }\n    } else {\n      for (let l = 0; l < this.inputDimension; l += 1) {\n        euclideanDistance += this.inverseCovariance[l] *\n          (inputObservation[l] - this.mean[l]) *\n          (inputObservation[l] - this.mean[l]);\n      }\n    }\n\n    let p = Math.exp(-0.5 * euclideanDistance) /\n               Math.sqrt(this.covarianceDeterminantInput *\n                    ((2 * Math.PI) ** this.inputDimension));\n\n    if (p < 1e-180 || Number.isNaN(p) || Math.abs(p) === +Infinity) p = 1e-180;\n\n    return p;\n  },\n\n  /**\n   * Estimate the output values associated with an input observation by\n   * regression, given the distribution parameters.\n   *\n   * @todo Clarify the maths here.\n   *\n   * @param  {Array} inputObservation observation (input modality only)\n   * @return {Array} Output values\n   */\n  regression(inputObservation) {\n    const outputDimension = this.dimension - this.inputDimension;\n    const prediction = Array(outputDimension).fill(0);\n\n    if (this.covarianceMode === 'full') {\n      for (let d = 0; d < outputDimension; d += 1) {\n        prediction[d] = this.mean[this.inputDimension + d];\n        for (let e = 0; e < this.inputDimension; e += 1) {\n          let tmp = 0;\n          for (let f = 0; f < this.inputDimension; f += 1) {\n            tmp += this.inverseCovarianceInput[(e * this.inputDimension) + f] *\n              (inputObservation[f] - this.mean[f]);\n          }\n          prediction[d] += tmp *\n            this.covariance[((d + this.inputDimension) * this.dimension) + e];\n        }\n      }\n    } else {\n      for (let d = 0; d < outputDimension; d += 1) {\n        prediction[d] = this.mean[this.inputDimension + d];\n      }\n    }\n    return prediction;\n  },\n\n  /**\n   * Update the inverse covariance\n   * @private\n   */\n  updateInverseCovarianceBimodal() {\n    if (this.covarianceMode === 'full') {\n      const covMatrixInput = Matrix(this.inputDimension, this.inputDimension);\n      for (let d1 = 0; d1 < this.inputDimension; d1 += 1) {\n        for (let d2 = 0; d2 < this.inputDimension; d2 += 1) {\n          covMatrixInput.data[(d1 * this.inputDimension) + d2] =\n            this.covariance[(d1 * this.dimension) + d2];\n        }\n      }\n      const invInput = covMatrixInput.pinv();\n      this.covarianceDeterminantInput = invInput.determinant;\n      this.inverseCovarianceInput = invInput.matrix.data;\n    } else { // DIAGONAL COVARIANCE\n      this.covarianceDeterminantInput = 1;\n      for (let d = 0; d < this.inputDimension; d += 1) {\n        if (this.covariance[d] <= 0) {\n          throw new Error('Non-invertible matrix');\n        }\n        this.inverseCovarianceInput[d] = 1 / this.covariance[d];\n        this.covarianceDeterminantInput *= this.covariance[d];\n      }\n    }\n    this.updateOutputCovariance();\n  },\n\n  /**\n   * Update the output covariance\n   * @private\n   */\n  updateOutputCovariance() {\n    if (this.covarianceMode === 'diagonal') {\n      this.outputCovariance = this.covariance.slice(0, this.inputDimension);\n      return;\n    }\n\n    // CASE: FULL COVARIANCE\n    const covMatrixInput = Matrix(this.inputDimension, this.inputDimension);\n    for (let d1 = 0; d1 < this.inputDimension; d1 += 1) {\n      for (let d2 = 0; d2 < this.inputDimension; d2 += 1) {\n        covMatrixInput.data[(d1 * this.inputDimension) + d2] =\n          this.covariance[(d1 * this.dimension) + d2];\n      }\n    }\n    const inv = covMatrixInput.pinv();\n    const covarianceGS = Matrix(this.inputDimension, this.outputDimension);\n    for (let d1 = 0; d1 < this.inputDimension; d1 += 1) {\n      for (let d2 = 0; d2 < this.outputDimension; d2 += 1) {\n        covarianceGS.data[(d1 * this.outputDimension) + d2] =\n          this.covariance[(d1 * this.dimension) + this.inputDimension + d2];\n      }\n    }\n    const covarianceSG = Matrix(this.outputDimension, this.inputDimension);\n    for (let d1 = 0; d1 < this.outputDimension; d1 += 1) {\n      for (let d2 = 0; d2 < this.inputDimension; d2 += 1) {\n        covarianceSG.data[(d1 * this.inputDimension) + d2] =\n          this.covariance[((this.inputDimension + d1) * this.dimension) + d2];\n      }\n    }\n    const tmptmptmp = inv.matrix.product(covarianceGS);\n    const covarianceMod = covarianceSG.product(tmptmptmp);\n    this.outputCovariance = Array(this.outputDimension ** 2).fill(0);\n    for (let d1 = 0; d1 < this.outputDimension; d1 += 1) {\n      for (let d2 = 0; d2 < this.outputDimension; d2 += 1) {\n        this.outputCovariance[(d1 * this.outputDimension) + d2] =\n          this.covariance[((this.inputDimension + d1) * this.dimension) +\n            this.inputDimension + d2] -\n            covarianceMod.data[(d1 * this.outputDimension) + d2];\n      }\n    }\n  },\n};\n\n/**\n * Multivariate Gaussian Distribution factory function.\n * Full covariance, optionally multimodal with support for regression.\n *\n * @function\n * @param {Number} [inputDimension=1]      Dimension of the input modality\n * @param {Number} [outputDimension=0]     Dimension of the output\n * modality (positive for regression, otherwise 0 for recognition).\n * @param {String} [covarianceMode='full'] covariance mode (full vs\n * diagonal)\n * @return {baseGaussianPrototype|bimodalGaussianPrototype}\n *\n * @property {boolean} bimodal           Specifies if the distribution is\n * bimodal (for regression use)\n * @property {number}  inputDimension    input dimension\n * @property {number}  outputDimension   output dimension\n * @property {number}  dimension         Total dimension\n * @property {Array}   mean              Distribution mean\n * @property {Array}   covariance        Distribution covariance\n * @property {Array}   inverseCovariance Inverse covariance\n */\nexport default function GaussianDistribution(\n  inputDimension = 1,\n  outputDimension = 0,\n  covarianceMode = 'full',\n) {\n  const bimodal = outputDimension > 0;\n  const dimension = inputDimension + outputDimension;\n  const proto = bimodal ?\n    Object.assign({}, baseGaussianPrototype, bimodalGaussianPrototype) :\n    baseGaussianPrototype;\n  const data = Object.assign(\n    {\n      bimodal,\n      dimension,\n      inputDimension,\n      outputDimension,\n      covarianceMode,\n      covarianceDeterminant: 0,\n    },\n    bimodal ? { covarianceDeterminantInput: 0 } : {},\n  );\n  const dist = Object.assign(\n    Object.create(proto),\n    data,\n  );\n  dist.allocate();\n  return dist;\n}\n","const trainerPrototype = /** @lends withEMTraining */ {\n  /**\n   * Train the model from the given training set, using the\n   * Expectation-Maximisation algorithm.\n   *\n   * @param  {TrainingSet} trainingSet Training Set\n   * @return {Object} Parameters of the trained model\n   */\n  train(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) {\n      throw new Error('The training set is empty');\n    }\n\n    this.initTraining(trainingSet);\n\n    let logLikelihood = -Infinity;\n    let iterations = 0;\n    let previousLogLikelihood = logLikelihood;\n\n    while (!this.converged(iterations, logLikelihood, previousLogLikelihood)) {\n      previousLogLikelihood = logLikelihood;\n      logLikelihood = this.updateTraining(trainingSet);\n\n      const pctChg =\n        100 * Math.abs((logLikelihood - previousLogLikelihood) / previousLogLikelihood);\n      if (Number.isNaN(pctChg) && iterations > 1) {\n        throw new Error('An error occured during training');\n      }\n\n      iterations += 1;\n    }\n\n    this.terminateTraining();\n    return this.params;\n  },\n\n  /**\n   * Return `true` if the training has converged according to the criteria\n   * specified at the creation\n   *\n   * @param  {number} iteration       Current iteration\n   * @param  {number} logProb         Current log-likelihood of the training set\n   * @param  {number} previousLogProb Previous log-likelihood of the training\n   * set\n   * @return {boolean}\n   *\n   * @private\n   */\n  converged(iteration, logProb, previousLogProb) {\n    if (iteration >= this.convergenceCriteria.maxIterations) return true;\n    if (this.convergenceCriteria.maxIterations >= this.convergenceCriteria.minIterations) {\n      return iteration >= this.convergenceCriteria.maxIterations;\n    }\n    if (iteration < this.convergenceCriteria.minIterations) return false;\n    const percentChange = 100 * Math.abs((logProb - previousLogProb) / logProb);\n    return percentChange <= this.convergenceCriteria.percentChange;\n  },\n};\n\n/**\n * Add ABSTRACT training capabilities to a model for which the training process\n * use the Expectation-Maximisation (EM) algorithm. This is used in particular\n * for training GMMs and HMMs.\n *\n * The final instance needs to implement `initTraining`, `updateTraining` and\n * `terminateTraining` methods. `updateTraining` will be called until the\n * convergence criteria are met. Convergence depends on\n * - A minimum number of iterations\n * - A maximum number of iterations\n * - A threshold on the relative change of the log-likelihood of the training\n * data between successive iterations.\n *\n * @todo details\n *\n * @param  {Object} [o]                   Source object\n * @param  {Object} [convergenceCriteria] Set of convergence criteria\n * @param  {number} [convergenceCriteria.percentChange=1e-3] Threshold in % of\n * the relative change of the log-likelihood, under which the training stops.\n * @param  {number} [convergenceCriteria.minIterations=5]    minimum number of iterations\n * @param  {number} [convergenceCriteria.maxIterations=100]  maximum number of iterations\n * @return {Object}\n */\nexport default function withEMTraining(\n  o,\n  convergenceCriteria = {\n    percentChange: 1e-3,\n    minIterations: 5,\n    maxIterations: 100,\n  },\n) {\n  return Object.assign(o, trainerPrototype, { convergenceCriteria });\n}\n","import { isBaseModel } from '../core/model_base_mixin';\nimport GaussianDistribution from '../common/gaussian_distribution';\n\n/**\n * GMM Base prototype\n * @type {Object}\n * @ignore\n */\nconst gmmBasePrototype = /** @lends withGMMBase */ {\n  /**\n   * Allocate the training variables\n   * @private\n   */\n  allocate() {\n    this.params.components = Array.from(\n      Array(this.params.gaussians),\n      () => new GaussianDistribution(\n        this.params.inputDimension,\n        this.params.outputDimension,\n        this.params.covarianceMode,\n      ),\n    );\n    this.params.mixtureCoeffs = Array(this.params.gaussians).fill(0);\n    this.beta = new Array(this.params.gaussians).fill(0);\n  },\n\n  /**\n   * Compute the likelihood of an observation given the GMM's parameters\n   * @param  {Array<Number>} observation Observation vector\n   * @return {Number}\n   */\n  likelihood(observation) {\n    let likelihood = 0;\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.beta[c] = this.componentLikelihood(observation, c);\n      likelihood += this.beta[c];\n    }\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.beta[c] /= likelihood;\n    }\n\n    return likelihood;\n  },\n\n  /**\n   * Compute the likelihood of an observation for a single component\n   * @param  {Array<Number>} observation Observation vector\n   * @param  {Number} mixtureComponent Component index\n   * @return {Number}\n   * @private\n   */\n  componentLikelihood(observation, mixtureComponent) {\n    if (mixtureComponent >= this.params.gaussians) {\n      throw new Error('The index of the Gaussian Mixture Component is out of bounds');\n    }\n    return this.params.mixtureCoeffs[mixtureComponent] *\n        this.params.components[mixtureComponent].likelihood(observation);\n  },\n\n  /**\n   * Update the inverse covariance of each Gaussian component\n   * @private\n   */\n  updateInverseCovariances() {\n    this.params.components.forEach((c) => {\n      c.updateInverseCovariance();\n    });\n    try {\n      this.params.components.forEach((c) => {\n        c.updateInverseCovariance();\n      });\n    } catch (e) {\n      throw new Error('Matrix inversion error: varianceoffset must be too small');\n    }\n  },\n\n  /**\n   * Normalize the mixing coefficients of the Gaussian mixture\n   * @private\n   */\n  normalizeMixtureCoeffs() {\n    let normConst = 0;\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      normConst += this.params.mixtureCoeffs[c];\n    }\n    if (normConst > 0) {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.params.mixtureCoeffs[c] /= normConst;\n      }\n    } else {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.params.mixtureCoeffs[c] = 1 / this.params.gaussians;\n      }\n    }\n  },\n\n  /**\n   * Regularize the covariances\n   * @private\n   */\n  regularize() {\n    this.params.components.forEach((c) => {\n      c.regularize(this.currentRegularization);\n    });\n  },\n};\n\n/**\n * Bimodal (regression) GMM Prototype\n * @type {Object}\n * @ignore\n */\nconst gmmBimodalPrototype = /** @lends withGMMBase */ {\n  /**\n   * Estimate the output values corresponding to the input observation, by\n   * regression given the GMM's parameters. This method is called Gaussian\n   * Mixture Regression (GMR).\n   *\n   * @param  {Array<Number>} inputObservation Observation on the input modality\n   * @return {Array<Number>} Output values (length = outputDimension)\n   */\n  regression(inputObservation) {\n    this.results.outputValues = Array(this.params.outputDimension).fill(0);\n    this.results.outputCovariance = Array(this.params.covarianceMode === 'full' ? this.params.outputDimension ** 2 : this.params.outputDimension).fill(0);\n    let tmpOutputValues;\n\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      tmpOutputValues = this.params.components[c].regression(inputObservation);\n      for (let d = 0; d < this.params.outputDimension; d += 1) {\n        this.results.outputValues[d] += this.beta[c] * tmpOutputValues[d];\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.outputDimension; d2 += 1) {\n            this.results.outputCovariance[(d * this.params.outputDimension) + d2] +=\n              (this.beta[c] ** 2) *\n              this.params.components[c].outputCovariance[(d * this.params.outputDimension) + d2];\n          }\n        } else {\n          this.results.outputCovariance[d] +=\n            (this.beta[c] ** 2) * this.params.components[c].outputCovariance[d];\n        }\n      }\n    }\n    return this.results.outputValues;\n  },\n};\n\n/**\n * Add basic GMM capabilities to a single-class model. This enables the\n * computation of the likelihoods and regression operations common to\n * training and prediction\n *\n * @see withGMMTraining\n * @see withGMMPrediction\n *\n * @param  {ModelBase} o Source Model\n * @return {GMMBaseModel}\n *\n * @throws {Error} is o is not a ModelBase\n */\nexport default function withGMMBase(o) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  return Object.assign(\n    o,\n    gmmBasePrototype,\n    o.params.bimodal ? gmmBimodalPrototype : {},\n  );\n}\n","import ModelBase from '../core/model_base_mixin';\nimport withKMeansTraining from '../kmeans/kmeans_training_mixin';\n\n/**\n * GMM Training Prototype\n * @type {Object}\n * @ignore\n */\nconst gmmTrainerPrototype = /** @lends withGMMTraining */ {\n  /**\n   * Initialize the EM Training process\n   * @param  {TrainingSet} trainingSet Training set\n   */\n  initTraining(trainingSet) {\n    this.allocate();\n    this.initParametersToDefault(trainingSet.standardDeviation());\n    this.initMeansWithKMeans(trainingSet);\n    this.initCovariances(trainingSet);\n    this.regularize();\n    this.updateInverseCovariances();\n  },\n\n  /**\n   * Initialize the model parameters to their default values\n   * @param  {Array<Number>} dataStddev Standard deviation of the training data\n   * @private\n   */\n  initParametersToDefault(dataStddev) {\n    let normCoeffs = 0;\n    this.currentRegularization = dataStddev.map(std => Math.max(\n      this.params.regularization.absolute,\n      this.params.regularization.relative * std,\n    ));\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      if (this.params.covarianceMode === 'full') {\n        this.params.components[c].covariance = Array(this.params.dimension ** 2)\n          .fill(this.params.regularization.absolute / 2);\n      } else {\n        this.params.components[c].covariance = Array(this.params.dimension).fill(0);\n      }\n      this.params.components[c].regularize(this.currentRegularization);\n      this.params.mixtureCoeffs[c] = 1 / this.params.gaussians;\n      normCoeffs += this.params.mixtureCoeffs[c];\n    }\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.params.mixtureCoeffs[c] /= normCoeffs;\n    }\n  },\n\n  /**\n   * Initialize the means of the model using a K-Means algorithm\n   *\n   * @see withKMeansTraining\n   *\n   * @param  {TrainingSet} trainingSet training set\n   * @private\n   */\n  initMeansWithKMeans(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) return;\n    const kmeans = withKMeansTraining(\n      ModelBase({\n        inputDimension: this.params.inputDimension,\n        outputDimension: this.params.outputDimension,\n      }),\n      this.params.gaussians,\n      { initialization: 'data' },\n    );\n    const kmeansParams = kmeans.train(trainingSet);\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.params.components[c].mean = kmeansParams.centers[c];\n    }\n  },\n\n  /**\n   * Initialize the covariances of the model from the training set\n   *\n   * @param  {TrainingSet} trainingSet training set\n   * @private\n   */\n  initCovariances(trainingSet) {\n    // TODO: simplify with covariance symmetricity\n    // TODO: If Kmeans, covariances from cluster members\n    if (!trainingSet || trainingSet.empty()) return;\n\n    for (let n = 0; n < this.params.gaussians; n += 1) {\n      this.params.components[n].covariance = Array((this.params.covarianceMode === 'full') ? this.params.dimension ** 2 : this.params.dimension).fill(0);\n    }\n\n    const gmeans = Array(this.params.gaussians * this.params.dimension).fill(0);\n    const factor = Array(this.params.gaussians).fill(0);\n    trainingSet.forEach((phrase) => {\n      const step = Math.floor(phrase.length / this.params.gaussians);\n      let offset = 0;\n      for (let n = 0; n < this.params.gaussians; n += 1) {\n        for (let t = 0; t < step; t += 1) {\n          for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n            gmeans[(n * this.params.dimension) + d1] += phrase.get(offset + t, d1);\n            if (this.params.covarianceMode === 'full') {\n              for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n                this.params.components[n]\n                  .covariance[(d1 * this.params.dimension) + d2] +=\n                  phrase.get(offset + t, d1) * phrase.get(offset + t, d2);\n              }\n            } else {\n              this.params.components[n].covariance[d1] +=\n                phrase.get(offset + t, d1) ** 2;\n            }\n          }\n        }\n        offset += step;\n        factor[n] += step;\n      }\n    });\n\n    for (let n = 0; n < this.params.gaussians; n += 1) {\n      for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n        gmeans[(n * this.params.dimension) + d1] /= factor[n];\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n            this.params.components[n].covariance[(d1 * this.params.dimension) + d2] /= factor[n];\n          }\n        } else {\n          this.params.components[n].covariance[d1] /= factor[n];\n        }\n      }\n    }\n\n    for (let n = 0; n < this.params.gaussians; n += 1) {\n      for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n            this.params.components[n].covariance[(d1 * this.params.dimension) + d2] -=\n              gmeans[(n * this.params.dimension) + d1] *\n              gmeans[(n * this.params.dimension) + d2];\n          }\n        } else {\n          this.params.components[n].covariance[d1] -=\n            gmeans[(n * this.params.dimension) + d1] ** 2;\n        }\n      }\n    }\n  },\n\n  /**\n   * Update the EM Training process (1 EM iteration).\n   * @param  TrainingSet trainingSet training set\n   */\n  updateTraining(trainingSet) {\n    let logProb = 0;\n    let totalLength = 0;\n    trainingSet.forEach((phrase) => {\n      totalLength += phrase.length;\n    });\n    const phraseIndices = Object.keys(trainingSet.phrases);\n\n    const p = Array.from(\n      Array(this.params.gaussians),\n      () => new Array(totalLength).fill(0),\n    );\n    const E = Array(this.params.gaussians).fill(0);\n    let tbase = 0;\n\n    trainingSet.forEach((phrase) => {\n      for (let t = 0; t < phrase.length; t += 1) {\n        let normConst = 0;\n        for (let c = 0; c < this.params.gaussians; c += 1) {\n          p[c][tbase + t] = this.componentLikelihood(phrase.getFrame(t), c);\n\n          if (p[c][tbase + t] === 0 ||\n            Number.isNaN(p[c][tbase + t]) ||\n            p[c][tbase + t] === +Infinity) {\n            p[c][tbase + t] = 1e-100;\n          }\n          normConst += p[c][tbase + t];\n        }\n        for (let c = 0; c < this.params.gaussians; c += 1) {\n          p[c][tbase + t] /= normConst;\n          E[c] += p[c][tbase + t];\n        }\n        logProb += Math.log(normConst);\n      }\n      tbase += phrase.length;\n    });\n\n    // Estimate Mixture coefficients\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      this.params.mixtureCoeffs[c] = E[c] / totalLength;\n    }\n\n    // Estimate means\n    for (let c = 0; c < this.params.gaussians; c += 1) {\n      for (let d = 0; d < this.params.dimension; d += 1) {\n        this.params.components[c].mean[d] = 0;\n        tbase = 0;\n        for (let pix = 0; pix < phraseIndices.length; pix += 1) {\n          const phrase = trainingSet.phrases[phraseIndices[pix]];\n          for (let t = 0; t < phrase.length; t += 1) {\n            this.params.components[c].mean[d] +=\n              p[c][tbase + t] * phrase.get(t, d);\n          }\n          tbase += phrase.length;\n        }\n        this.params.components[c].mean[d] /= E[c];\n      }\n    }\n\n    // estimate covariances\n    if (this.params.covarianceMode === 'full') {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n          for (let d2 = d1; d2 < this.params.dimension; d2 += 1) {\n            this.params.components[c].covariance[(d1 * this.params.dimension) + d2] = 0;\n            tbase = 0;\n            for (let pix = 0; pix < phraseIndices.length; pix += 1) {\n              const phrase = trainingSet.phrases[phraseIndices[pix]];\n              for (let t = 0; t < phrase.length; t += 1) {\n                this.params.components[c].covariance[(d1 * this.params.dimension) + d2] +=\n                  p[c][tbase + t] *\n                  (phrase.get(t, d1) - this.params.components[c].mean[d1]) *\n                  (phrase.get(t, d2) - this.params.components[c].mean[d2]);\n              }\n              tbase += phrase.length;\n            }\n            this.params.components[c].covariance[(d1 * this.params.dimension) + d2] /= E[c];\n            if (d1 !== d2) {\n              this.params.components[c].covariance[(d2 * this.params.dimension) + d1] =\n                this.params.components[c].covariance[(d1 * this.params.dimension) + d2];\n            }\n          }\n        }\n      }\n    } else {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n          this.params.components[c].covariance[d1] = 0;\n          tbase = 0;\n          for (let pix = 0; pix < phraseIndices.length; pix += 1) {\n            const phrase = trainingSet.phrases[phraseIndices[pix]];\n            for (let t = 0; t < phrase.length; t += 1) {\n              const value = (phrase.get(t, d1) - this.params.components[c].mean[d1]);\n              this.params.components[c].covariance[d1] +=\n                    p[c][tbase + t] * value * value;\n            }\n            tbase += phrase.length;\n          }\n          this.params.components[c].covariance[d1] /= E[c];\n        }\n      }\n    }\n\n    this.regularize();\n    this.updateInverseCovariances();\n\n    return logProb;\n  },\n\n  /**\n   * Terminate the EM Training process\n   */\n  terminateTraining() {},\n};\n\n/**\n * Add GMM Training capabilities to a GMM Model\n * @param  {GMMBase} o               Source GMM Model\n * @param  {Number} [gaussians=1]    Number of Gaussian components\n * @param  {Object} [regularization] Regularization parameters\n * @param  {Number} [regularization.absolute=1e-3] Absolute regularization\n * @param  {Number} [regularization.relative=1e-2] Relative Regularization\n (relative to the training set's variance along each dimension)\n * @param  {String} [covarianceMode='full'] Covariance mode ('full' or diagonal)\n * @return {BMMBase}\n */\nexport default function withGMMTraining(\n  o,\n  gaussians = 1,\n  regularization = { absolute: 1e-3, relative: 1e-2 },\n  covarianceMode = 'full',\n) {\n  if (!Object.keys(o).includes('params')) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  return Object.assign(\n    o,\n    gmmTrainerPrototype,\n    {\n      params: {\n        ...o.params,\n        gaussians,\n        regularization,\n        covarianceMode,\n      },\n    },\n  );\n}\n","import ModelBase from './model_base_mixin';\n\n/**\n * Multiclass Models Mixin\n * @type {Object}\n * @ignore\n */\nconst MulticlassBasePrototype = /** @lends MulticlassModelBase */{\n  /**\n   * Get the number of classes in the model\n   * @return {number} number of classes\n   */\n  size() {\n    return Object.keys(this.models).length;\n  },\n\n  /**\n   * Check if a class with the given label exists\n   * @param  {string} label Class label\n   * @return {boolean}\n   */\n  includes(label) {\n    return Object.keys(this.models).includes(label);\n  },\n\n  /**\n   * Remove a class by label\n   * @param  {string} label Class label\n   */\n  remove(label) {\n    if (this.includes(label)) {\n      delete this.models[label];\n    }\n  },\n};\n\n/**\n * Create an abstract Multiclass Model\n * @param       {number]} inputDimension  input dimension\n * @param       {number]} outputDimension output dimension\n * @param       {Object} parameters       additional parameters to copy\n * @function\n */\nexport default function MulticlassModelBase({\n  inputDimension,\n  outputDimension,\n  ...parameters\n}) {\n  return Object.assign(\n    ModelBase({ inputDimension, outputDimension, ...parameters }),\n    MulticlassBasePrototype,\n  );\n}\n","/**\n * Add multiclass training capabilities to a model. It takes as argument\n * the training function called to train each class of the training set.\n *\n * @param  {MulticlassModelBase} o Source model\n * @param  {Function}  trainingFunction Training function for a single class\n * @return {MulticlassModelBase}\n */\nexport default function withMulticlassTraining(\n  o,\n  trainingFunction,\n) {\n  return Object.assign(\n    o,\n    /** @lends withMulticlassTraining */ {\n      /**\n       * Train the model, optionally specifying a set of classes to train\n       *\n       * @param  {TrainingSet} trainingSet   Training data set\n       * @param  {undefined|Array<String>} [labels=undefined] Labels\n       * corresponding to the classes to be trained (all if unspecified)\n       * @return {Object} the parameters of the trained model\n       *\n       * @throws {Error} if the training set is empty\n       * @throws {Error} if one of the specified class does not exist\n       */\n      train(trainingSet, labels = undefined) {\n        if (!trainingSet || trainingSet.empty()) {\n          throw new Error('The training set is empty');\n        }\n        if (labels) {\n          labels.forEach((l) => {\n            if (!this.includes(l)) {\n              throw new Error(`Class labeled ${l} does not exist`);\n            }\n          });\n        }\n\n        this.params.classes = {};\n        const labs = labels || trainingSet.labels();\n        labs.forEach((label) => {\n          const ts = trainingSet.getPhrasesOfClass(label);\n          // console.log(ts);\n          this.params.classes[label] = trainingFunction(ts);\n        });\n        return this.params;\n      },\n    },\n  );\n}\n","/**\n * Circular Buffer prototype\n *\n * @property {number}  capacity Buffer capacity\n * @property {number}  length Current buffer length\n * @property {boolean} full Specifies if the buffer is full\n *\n * @ignore\n */\nconst circularBufferPrototype = /** @lends CircularBuffer */ {\n  /**\n   * Clear the buffer contents\n   */\n  clear() {\n    this.length = 0;\n    this.index = 0;\n    this.full = false;\n    this.buffer = [];\n  },\n\n  /**\n   * Push a value to the buffer\n   * @param  {*} value data value (any type)\n   */\n  push(value) {\n    if (this.full) {\n      this.buffer[this.index] = value;\n      this.index = (this.index + 1) % this.capacity;\n    } else {\n      this.buffer.push(value);\n      this.length += 1;\n      this.full = (this.length === this.capacity);\n    }\n  },\n\n  /**\n   * Get the value at a given index\n   * @param  {number} idx data index\n   * @return {anything}   value at index\n   */\n  get(idx) {\n    return this.buffer[(idx + this.index) % this.capacity];\n  },\n\n  /**\n   * Fill the buffer with a constant value\n   * @param  {*} value data value (any type)\n   */\n  fill(value) {\n    this.length = this.capacity;\n    this.index = 0;\n    this.full = true;\n    this.buffer = Array(this.capacity).fill(value);\n  },\n\n  /**\n   * Iterate over the buffer's data\n   * @param  {Function} callback Callback function\n   * (@see Array.prototype.forEach).\n   */\n  forEach(callback) {\n    for (let i = 0; i < this.length; i += 1) {\n      callback(this.buffer[(i + this.index) % this.capacity], i);\n    }\n  },\n\n  /**\n   * Get an array of the buffer current values (ordered)\n   * @return {Array} Buffer contents\n   */\n  values() {\n    return this.buffer.slice(this.index)\n      .concat(this.buffer.slice(0, this.index));\n  },\n};\n\n/**\n * Circular Buffer Data Structure (any data type)\n * @param  {number} capacity Buffer capacity\n * @return {circularBufferPrototype}\n * @function\n *\n * @property {number}  capacity Buffer capacity\n * @property {number}  length Current buffer length\n * @property {boolean} full Specifies if the buffer is full\n */\nexport default function CircularBuffer(capacity) {\n  const buffer = Object.create(circularBufferPrototype);\n  buffer.capacity = capacity;\n  buffer.clear();\n  return buffer;\n}\n","import { isBaseModel } from './model_base_mixin';\nimport CircularBuffer from '../common/circular_buffer';\n\n/**\n * Prototype for models with prediction capabilities\n * @param  {Boolean} bimodal Specifies whether the model is bimodal\n * @return {Object}\n * @ignore\n */\nconst predictionBasePrototype = bimodal => (/** @lends withAbtractPrediction */{\n  /**\n   * Likelihood Buffer\n   * @type {CircularBuffer}\n   * @private\n   */\n  likelihoodBuffer: CircularBuffer(1),\n\n  /**\n   * Likelihood Window (used to smooth the log-likelihoods over several frames)\n   * @param {Number} [lw] Size (in frames) of the likelihood smoothing window\n   */\n  setLikelihoodWindow(lw) {\n    this.likelihoodWindow = lw;\n    this.likelihoodBuffer = CircularBuffer(lw);\n  },\n\n  /**\n   * Reset the prediction process\n   * @return {Modelbase} the model\n   */\n  reset() {\n    this.likelihoodBuffer.clear();\n    return this;\n  },\n\n  /**\n   * Update the predictions with a new observation\n   * @param  {Array<Number>} observation Observation vector\n   * @return {Object} Prediction results\n   *\n   * @todo document results data structure\n   */\n  predict(observation) {\n    const likelihood = this.likelihood(observation);\n    if (bimodal) {\n      this.regression(observation);\n    }\n    this.updateResults(likelihood);\n    return this.results;\n  },\n\n  /**\n   * Update the prediction results\n   * @param  {Number} instantLikelihood Instantaneous likelihood\n   * @private\n   */\n  updateResults(instantLikelihood) {\n    this.results.instantLikelihood = instantLikelihood;\n    this.likelihoodBuffer.push(Math.log(instantLikelihood));\n    this.results.logLikelihood = 0;\n    const bufSize = this.likelihoodBuffer.length;\n    for (let i = 0; i < bufSize; i += 1) {\n      this.results.logLikelihood += this.likelihoodBuffer.get(i);\n    }\n    this.results.logLikelihood /= bufSize;\n  },\n});\n\n/**\n * Add ABSTRACT prediction capabilities to an existing model\n * @param  {Modelbase} o                 Source model\n * @param  {Number} [likelihoodWindow=1] Size of the likelihood smoothing window\n * @return {Modelbase}\n */\nexport default function withAbtractPrediction(o, likelihoodWindow = 1) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  const results = Object.assign(\n    { instantLikelihood: 0, logLikelihood: 0 },\n    o.params.bimodal ? { outputValues: [], outputCovariance: [] } : {},\n  );\n  return Object.assign(\n    o,\n    predictionBasePrototype(o.params.bimodal),\n    { results, likelihoodBuffer: CircularBuffer(likelihoodWindow) },\n  );\n}\n","/**\n * Check if the specification is respected for a given parameter and value,\n * and clip if relevant.\n *\n * @ignore\n *\n * @param  {String}        model      Stream Operator Name (for logging)\n * @param  {String}        parameter     Attribute name\n * @param  {Specification} specification Attribute specification\n * @param  {*}             value         Attribute value\n * @return {*}                           Type-checked parameter value\n */\nfunction checkSpec(model, parameter, specification, value) {\n  if (!specification) return;\n  if (specification.constructor === Array && !specification.includes(value)) {\n    throw new Error(`Attribute '${parameter}' (value: '${value}') is not allowed for model '${model}' (options: [${specification}]).`);\n  } else if (specification.constructor === Object) {\n    if (Object.keys(specification).includes('min') && value < specification.min) {\n      throw new Error(`Attribute '${parameter}' (value: ${value}) is inferior to the minimum required value of ${specification.min} for model '${model}'.`);\n    }\n    if (Object.keys(specification).includes('max') && value > specification.max) {\n      throw new Error(`Attribute '${parameter}' (value: ${value}) is superior to the maximum required value of ${specification.min} for model '${model}'.`);\n    }\n  } else if (typeof specification === 'function') {\n    if (!specification(value)) {\n      throw new Error(`Attribute '${parameter}' (value: ${value}) is incompatible with model '${model}'.`);\n    }\n  }\n}\n\n/**\n * Check the parameters of a model and return the parameters of the\n * output stream.\n *\n * The specification should be a structure of the form:\n * ```\n * const streamSpecification = {\n *   <parameter name>: {\n *     required: <boolean>,\n *     check: <null || Array || { min: <minimum value>, max: <maximum value>} || Function >,\n *     transform: Function,\n *   },\n * };\n * ```\n *\n * @param  {String} model      Name of the model for logging\n * @param  {Object} specification I/O Stream Specification\n * @param  {Object} values        Attributes of the input stream\n * @return {Object}               Attributes of the output stream\n *\n * @example\n * import setupStreamAttributes from 'stream';\n *\n * const specification = {\n *   type: {\n *     required: false,\n *     check: null,\n *     transform: x => x || null,\n *   },\n *   format: {\n *     required: true,\n *     check: ['scalar', 'vector'],\n *     transform: x => x,\n *   },\n *   size: {\n *     required: true,\n *     check: { min: 1 },\n *     transform: x => 2 * x,\n *   },\n *   stuff: {\n *     required: true,\n *     check: x => Math.log2(x) === Math.floor(Math.log2(x)),\n *     transform: x => Math.log2(x),\n *   },\n * };\n *\n * const values = {\n *   type: 'anything',\n *   format: 'vector',\n *   size: 3,\n *   stuff: 8,\n *   another: 'one',\n * };\n *\n * setupStreamAttributes('module name', specification, values);\n * // Returns:\n * // {\n * //   type: 'anything',\n * //   format: 'vector',\n * //   size: 6,\n * //   stuff: 3,\n * //   another: 'one',\n * // }\n */\nexport default function validateParameters(model, specification, values) {\n  const parameters = Object.assign({}, values);\n  Object.keys(specification).forEach((attr) => {\n    const spec = specification[attr];\n\n    // Check for required parameters\n    if (spec.required && !Object.keys(values).includes(attr)) {\n      throw new Error(`Stream parameter '${attr}' is required for model '${model}'.`);\n    }\n\n    // Check the validity of the input parameters\n    checkSpec(model, attr, spec.check, values[attr]);\n\n    parameters[attr] = spec.transform ?\n      spec.transform(values[attr]) :\n      values[attr];\n  });\n  return parameters;\n}\n","import validateParameters from '../common/validation';\nimport { isBaseModel } from '../core/model_base_mixin';\n\nconst gmmParameterSpec = gaussians => ({\n  gaussians: {\n    required: true,\n    check: { min: 1 },\n  },\n  regularization: {\n    required: true,\n    check: ({ absolute, relative }) =>\n      (absolute && relative && absolute > 0 && relative > 0),\n  },\n  covarianceMode: {\n    required: true,\n    check: ['full', 'diagonal'],\n  },\n  mixtureCoeffs: {\n    required: true,\n    check: m => m.length === gaussians,\n  },\n  components: {\n    required: true,\n    check: c => c.length === gaussians,\n  },\n});\n\n/**\n * Add GMM prediction capabilities to a single-class model. Mostly, this checks\n * the validity of the model parameters\n *\n * @todo validate gaussian components\n *\n * @param  {GMMBaseModel} o Source Model\n * @return {GMMBaseModel}\n *\n * @throws {Error} is o is not a ModelBase\n */\nexport default function withGMMPrediction(o) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  validateParameters('GMM', gmmParameterSpec(o.params.gaussians), o.params);\n  return Object.assign(\n    o,\n    { beta: new Array(o.params.gaussians).fill(0) },\n  );\n}\n","import { isBaseModel } from './model_base_mixin';\n\n/**\n * Multiclass prediction mixin\n * @type {Object}\n * @ignore\n */\nconst MulticlassPredictionBasePrototype = /** @lends withMulticlassPrediction */ {\n  /**\n   * Likelihood Window (used to smooth the log-likelihoods over several frames)\n   * @return {Number}\n   */\n  getLikelihoodWindow() {\n    return this.likelihoodWindow;\n  },\n\n  /**\n   * Likelihood Window (used to smooth the log-likelihoods over several frames)\n   * @param {Number} [lw] Size (in frames) of the likelihood smoothing window\n   */\n  setLikelihoodWindow(lw) {\n    this.likelihoodWindow = lw;\n    Object.keys(this.models).forEach((label) => {\n      this.models[label].setLikelihoodWindow(lw);\n    });\n  },\n\n  /**\n   * Reset the prediction process. This is particularly important for temporal\n   * models such as HMMs, that depends on previous observations.\n   */\n  reset() {\n    Object.values(this.models).forEach(m => m.reset());\n    this.results = {\n      labels: [],\n      instantLikelihoods: [],\n      smoothedLikelihoods: [],\n      smoothedLogLikelihoods: [],\n      smoothedNormalizedLikelihoods: [],\n      likeliest: null,\n      classes: {},\n    };\n    if (this.params.bimodal) {\n      this.resetBimodal();\n    }\n  },\n\n  /**\n   * Make a prediction from a new observation (updates the results member)\n   * @param  {Array<Number>} observation Observation vector\n   */\n  predict(observation) {\n    Object.values(this.models).forEach(m => m.predict(observation));\n    this.updateResults();\n  },\n\n  updateResults() {\n    const labs = Object.keys(this.models).sort();\n    this.results.labels = labs;\n    let normInstant = 0;\n    let normSmoothed = 0;\n    let maxLogLikelihood = -Infinity;\n    this.results.classes = labs\n      .map((lab, i) => {\n        this.results.instantLikelihoods[i] =\n          this.models[lab].results.instantLikelihood;\n        this.results.smoothedLogLikelihoods[i] =\n          this.models[lab].results.logLikelihood;\n        this.results.smoothedLikelihoods[i] =\n          Math.exp(this.results.smoothedLogLikelihoods[i]);\n        normInstant += this.results.instantLikelihoods[i];\n        normSmoothed += this.results.smoothedLikelihoods[i];\n        if (this.results.smoothedLogLikelihoods[i] > maxLogLikelihood) {\n          maxLogLikelihood = this.results.smoothedLogLikelihoods[i];\n          this.results.likeliest = lab;\n        }\n        return { [lab]: this.models[lab].results };\n      })\n      .reduce((o, x) => ({ ...o, ...x }), {});\n    this.results.smoothedNormalizedLikelihoods =\n      this.results.smoothedLikelihoods.map(x => x / normSmoothed);\n    this.results.instantNormalizedLikelihoods =\n      this.results.instantLikelihoods.map(x => x / normInstant);\n    if (this.params.bimodal) {\n      this.updateRegressionResults();\n    }\n  },\n};\n\nconst MulticlassPredictionBimodalPrototype = {\n  resetBimodal() {\n    this.results.outputValues = [];\n    this.results.outputCovariance = [];\n  },\n\n  updateRegressionResults() {\n    if (this.params.multiClassRegressionEstimator === 'likeliest') {\n      this.results.outputValues =\n        this.models[this.results.likeliest].results.outputValues;\n      this.results.outputCovariance =\n        this.models[this.results.likeliest].results.outputCovariance;\n    } else if (this.params.multiClassRegressionEstimator === 'mixture') {\n      this.results.outputValues = Array(this.outputDimension).fill(0);\n      this.results.outputCovariance = Array(this.outputDimension ** (this.configuration.covarianceMode === 'full' ? 2 : 1)).fill(0);\n      this.results.labels.forEach((lab) => {\n        this.results.outputValues.map((x, i) => x + (\n          this.results.smoothedNormalizedLikelihoods[i] *\n          this.models[lab].results.outputValues[i]\n        ));\n        this.results.outputCovariance.map((x, i) => x + (\n          this.results.smoothedNormalizedLikelihoods[i] *\n          this.models[lab].results.outputCovariance[i]\n        ));\n      });\n    } else {\n      throw new Error('Unknown regression estimator, use `likeliest` or `mixture`');\n    }\n  },\n};\n\n/**\n * Add multiclass prediction capabilities to a multiclass model\n * @param  {MulticlassModelBase} o Source model\n * @param  {String} [multiClassRegressionEstimator='likeliest'] Type of\n * regression estimator:\n * - `likeliest` selects the output values from the likeliest class\n * - `mixture` computes the output values as the weighted sum of the\n * contributions of each class, weighed by their normalized likelihood\n * @return {MulticlassPredictionBasePrototype}\n * @function\n */\nexport default function withMulticlassPrediction(o, multiClassRegressionEstimator = 'likeliest') {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  const m = Object.assign(\n    o,\n    MulticlassPredictionBasePrototype,\n    o.params.bimodal ? MulticlassPredictionBimodalPrototype : {},\n  );\n  m.params.multiClassRegressionEstimator = multiClassRegressionEstimator;\n  return m;\n}\n","import GaussianDistribution from '../common/gaussian_distribution';\nimport ModelBase from '../core/model_base_mixin';\nimport withEMTraining from '../core/em_training_mixin';\nimport withGMMBase from './gmm_base_mixin';\nimport withGMMTraining from './gmm_training_mixin';\nimport MulticlassModelBase from '../core/multiclass_mixin';\nimport withMulticlassTraining from '../core/multiclass_training_mixin';\nimport withAbtractPrediction from '../core/prediction_mixin';\nimport withGMMPrediction from './gmm_prediction_mixin';\nimport withMulticlassPrediction from '../core/multiclass_prediction_mixin';\n\n/**\n * @typedef {Object} GMMParameters\n * @property {Boolean} bimodal Specifies if the model is bimodal\n * @property {Number} inputDimension Dimension of the input modality\n * @property {Number} outputDimension Dimension of the output modality\n * @property {Number} dimension Total dimension\n * @property {Number} gaussians Number of gaussian components in the mixture\n * @property {String} covarianceMode Covariance mode ('full' or 'diagonal')\n * @property {Array<Number>} mixtureCoeffs mixture coefficients ('weight' of\n * each gaussian component)\n * @property {Array<GaussianDistribution>} components Gaussian components\n */\n\n/**\n * Train a single-class GMM Model.\n *\n * @todo GMM details\n *\n * @param  {TrainingSet} trainingSet                training set\n * @param  {Object} configuration                   Training configuration\n * @param  {Object} [convergenceCriteria=undefined] Convergence criteria of the\n * EM algorithm\n * @return {GMMParameters} Parameters of the trained GMM\n */\nexport function trainGMM(\n  trainingSet,\n  configuration,\n  convergenceCriteria = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const { gaussians, regularization, covarianceMode } = configuration;\n  const model = withGMMTraining(\n    withEMTraining(\n      withGMMBase(ModelBase({\n        inputDimension,\n        outputDimension,\n        ...configuration,\n      })),\n      convergenceCriteria,\n    ),\n    gaussians,\n    regularization,\n    covarianceMode,\n  );\n  return model.train(trainingSet);\n}\n\n/**\n * Train a multi-class GMM Model.\n *\n * @todo GMM details\n *\n * @param  {TrainingSet} trainingSet                training set\n * @param  {Object} configuration                   Training configuration\n * @param  {Object} [convergenceCriteria=undefined] Convergence criteria of the\n * EM algorithm\n * @return {Object} Parameters of the trained GMM\n */\nexport function trainMulticlassGMM(\n  trainingSet,\n  configuration,\n  convergenceCriteria = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const model = withMulticlassTraining(\n    MulticlassModelBase({ inputDimension, outputDimension, ...configuration }),\n    ts => trainGMM(ts, configuration, convergenceCriteria),\n  );\n  return model.train(trainingSet);\n}\n\n/**\n * Create a GMM Predictor from a full set of parameters (generated by trainGMM).\n * @param       {Object} params                       Model parameters\n * @param       {number} [likelihoodWindow=undefined] Likelihoow window size\n * @function\n */\nexport function GMMPredictor(\n  params,\n  likelihoodWindow = undefined,\n) {\n  const model = withGMMPrediction(withAbtractPrediction(\n    withGMMBase(ModelBase(params)),\n    likelihoodWindow,\n  ));\n  params.components.forEach((c, i) => {\n    model.params.components[i] = Object.assign(GaussianDistribution(\n      params.inputDimension,\n      params.outputDimension,\n      params.covarianceMode,\n    ), c);\n  });\n  model.reset();\n  return model;\n}\n\n/**\n * Create a Multiclass GMM Predictor from a full set of parameters\n * (generated by trainMulticlassGMM).\n * @param       {Object} params                       Model parameters\n * @param       {number} [likelihoodWindow=undefined] Likelihoow window size\n * @function\n */\nexport function MulticlassGMMPredictor(\n  params,\n  likelihoodWindow = undefined,\n) {\n  const model = withMulticlassPrediction(MulticlassModelBase(params));\n  model.models = {};\n  Object.keys(params.classes).forEach((label) => {\n    model.models[label] = GMMPredictor(params.classes[label], likelihoodWindow);\n  });\n  model.reset();\n  return model;\n}\n","import { isBaseModel } from '../core/model_base_mixin';\n\n//\n// TODO: hierarchical + exit probabilities methods.\n//\n\n/**\n * HMM Base prototype\n * @type {Object}\n * @ignore\n */\nconst hmmBasePrototype = /** @lends withHMMBase */ {\n  /**\n   * Specifies if the forward algorithm has been initialized\n   * @type {Boolean}\n   * @private\n   */\n  forwardInitialized: false,\n\n  /**\n   * Specifies if the containing multiclass model is isHierarchical\n   * @todo check that\n   * @type {Boolean}\n   * @private\n   */\n  isHierarchical: false,\n\n  /**\n   * Initialize the forward algorithm (See rabiner, 1989)\n   * @param  {Array<Number>} observation Observation vector\n   * @return {Number}                    `ct` (inverse likelihood)\n   */\n  initializeForwardAlgorithm(observation) {\n    let normConst = 0;\n    if (this.params.transitionMode === 'ergodic') {\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.alpha[i] = this.params.prior[i] *\n          this.params.xStates[i].likelihood(observation);\n        normConst += this.alpha[i];\n      }\n    } else {\n      this.alpha = new Array(this.params.states).fill(0);\n      this.alpha[0] = this.params.xStates[0].likelihood(observation);\n      normConst += this.alpha[0];\n    }\n    this.forwardInitialized = true;\n    if (normConst > 0) {\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.alpha[i] /= normConst;\n      }\n      return 1 / normConst;\n    }\n    for (let j = 0; j < this.params.states; j += 1) {\n      this.alpha[j] = 1 / this.params.states;\n    }\n    return 1;\n  },\n\n  /**\n   * Update the forward algorithm (See rabiner, 1989)\n   * @param  {Array<Number>} observation Observation vector\n   * @return {Number}                    `ct` (inverse likelihood)\n   */\n  updateForwardAlgorithm(observation) {\n    let normConst = 0;\n    this.previousAlpha = this.alpha.slice();\n    for (let j = 0; j < this.params.states; j += 1) {\n      this.alpha[j] = 0;\n      if (this.params.transitionMode === 'ergodic') {\n        for (let i = 0; i < this.params.states; i += 1) {\n          this.alpha[j] += this.previousAlpha[i] *\n            this.params.transition[i][j];\n        }\n      } else {\n        this.alpha[j] += this.previousAlpha[j] * this.params.transition[j * 2];\n        if (j > 0) {\n          this.alpha[j] += this.previousAlpha[j - 1] *\n            this.params.transition[((j - 1) * 2) + 1];\n        } else {\n          this.alpha[0] += this.previousAlpha[this.params.states - 1] *\n            this.params.transition[(this.params.states * 2) - 1];\n        }\n      }\n      this.alpha[j] *= this.params.xStates[j].likelihood(observation);\n      normConst += this.alpha[j];\n    }\n    if (normConst > 1e-300) {\n      for (let j = 0; j < this.params.states; j += 1) {\n        this.alpha[j] /= normConst;\n      }\n      return 1 / normConst;\n    }\n    return 0;\n  },\n};\n\n/**\n * Add basic HMM capabilities to a single-class model. This enables the\n * computation of the likelihoods and regression operations common to\n * training and prediction\n *\n * @see withHMMTraining\n * @see withHMMPrediction\n *\n * @param  {ModelBase} o Source Model\n * @return {HMMBaseModel}\n *\n * @throws {Error} is o is not a ModelBase\n */\nexport default function withHMMBase(o) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  return Object.assign(o, hmmBasePrototype);\n}\n","import TrainingSet from '../training_set';\nimport ModelBase from '../core/model_base_mixin';\nimport withGMMBase from '../gmm/gmm_base_mixin';\nimport { trainGMM } from '../gmm';\n\nconst TRANSITION_REGULARIZATION = 1e-5;\n\n/**\n * HMM Training Prototype\n * @type {Object}\n * @ignore\n */\nconst hmmTrainerPrototype = /** @lends withHMMTraining */ {\n  /**\n   * Initialize the EM Training process\n   * @param  {TrainingSet} trainingSet Training set\n   */\n  initTraining(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) return;\n\n    this.allocate(trainingSet);\n    this.initParametersToDefault(trainingSet.standardDeviation());\n    if (this.params.gaussians > 1) {\n      this.initMeansCovariancesWithGMMEM(trainingSet);\n    } else {\n      this.initMeansWithAllPhrases(trainingSet);\n      this.initCovariancesFullyObserved(trainingSet);\n    }\n  },\n\n  /**\n   * Allocate the model's parameters and training variables\n   * @param  {TrainingSet} trainingSet The training set\n   * @private\n   */\n  allocate(trainingSet) {\n    const {\n      inputDimension,\n      outputDimension,\n      gaussians,\n      regularization,\n      covarianceMode,\n    } = this.params;\n    this.params.xStates = Array.from(\n      new Array(this.params.states),\n      () => withGMMBase(ModelBase({\n        inputDimension,\n        outputDimension,\n        gaussians,\n        regularization,\n        covarianceMode,\n      })),\n    );\n    this.params.xStates.forEach(s => s.allocate());\n    this.alpha = new Array(this.params.states).fill(0);\n    this.previousAlpha = new Array(this.params.states).fill(0);\n    this.beta = new Array(this.params.states).fill(0);\n    this.previousBeta = new Array(this.params.states).fill(0);\n\n    // Initialize Algorithm variables\n    // ---------------------------------------\n    const nbPhrases = trainingSet.size();\n    this.gammaSequence = new Array(nbPhrases).fill(null);\n    this.epsilonSequence = new Array(nbPhrases).fill(null);\n    this.gammaSequenceperMixture = new Array(nbPhrases).fill(null);\n    let maxT = 0;\n    let i = 0;\n    trainingSet.forEach((phrase) => {\n      const T = phrase.length;\n      this.gammaSequence[i] = Array.from(\n        new Array(T),\n        () => new Array(this.params.states).fill(0),\n      );\n      if (this.params.transitionMode === 'ergodic') {\n        this.epsilonSequence[i] = Array.from(\n          new Array(T),\n          () => Array.from(\n            new Array(this.params.states),\n            () => new Array(this.params.states).fill(0),\n          ),\n        );\n      } else {\n        this.epsilonSequence[i] = Array.from(\n          new Array(T),\n          () => new Array(this.params.states * 2).fill(0),\n        );\n      }\n      this.gammaSequenceperMixture[i] =\n        new Array(this.params.gaussians).fill(0);\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.gammaSequenceperMixture[i][c] =\n          Array.from(\n            new Array(T),\n            () => new Array(this.params.states).fill(0),\n          );\n      }\n      if (T > maxT) {\n        maxT = T;\n      }\n      i += 1;\n    });\n\n    this.gammaSum = new Array(this.params.states).fill(0);\n    this.gammaSumPerMixture = new Array(this.params.states * this.params.gaussians).fill(0);\n  },\n\n  /**\n   * Update the EM Training process (1 EM iteration).\n   * @param  TrainingSet trainingSet training set\n   */\n  updateTraining(trainingSet) {\n    let logProb = 0;\n\n    // Forward-backward for each phrase\n    // =================================================\n    let phraseIndex = 0;\n    trainingSet.forEach((phrase) => {\n      if (phrase.length > 0) {\n        logProb += this.baumWelchForwardBackward(phrase, phraseIndex);\n      }\n      phraseIndex += 1;\n    });\n    this.baumWelchGammaSum(trainingSet);\n\n    // Re-estimate model parameters\n    // =================================================\n\n    // set covariance and mixture coefficients to zero for each state\n    for (let i = 0; i < this.params.states; i += 1) {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.params.xStates[i].params.mixtureCoeffs[c] = 0;\n        if (this.params.covarianceMode === 'full') {\n          this.params.xStates[i].params.components[c].covariance =\n            new Array(this.params.dimension ** 2).fill(0);\n        } else {\n          this.params.xStates[i].params.components[c].covariance =\n            new Array(this.params.dimension).fill(0);\n        }\n      }\n    }\n\n    this.baumWelchEstimateMixtureCoefficients(trainingSet);\n    this.baumWelchEstimateMeans(trainingSet);\n    this.baumWelchEstimateCovariances(trainingSet);\n    if (this.params.transitionMode === 'ergodic') {\n      this.baumWelchEstimatePrior(trainingSet);\n    }\n    this.baumWelchEstimateTransitions(trainingSet);\n    return logProb;\n  },\n\n  /**\n   * terminate the EM Training process\n   * @param  TrainingSet trainingSet training set\n   */\n  terminateTraining() {\n    this.normalizeTransitions();\n    this.gammaSequence = null;\n    this.epsilonSequence = null;\n    this.gammaSequenceperMixture = null;\n    this.alphaSeq = null;\n    this.betaSeq = null;\n    this.gammaSum = null;\n    this.gammaSumPerMixture = null;\n    this.params.xStates = this.params.xStates.map(s => s.params);\n  },\n\n  /**\n   * Initialize the model parameters to their default values\n   * @param  {Array<Number>} dataStddev Standard deviation of the training data\n   * @private\n   */\n  initParametersToDefault(dataStddev) {\n    if (this.params.transitionMode === 'ergodic') {\n      this.setErgodic();\n    } else {\n      this.setLeftRight();\n    }\n    const currentRegularization = dataStddev.map(std => Math.max(\n      this.params.regularization.absolute,\n      this.params.regularization.relative * std,\n    ));\n    const initCovariance = (this.params.covarianceMode === 'full') ?\n      () => new Array(this.params.dimension ** 2)\n        .fill(this.params.regularization.absolute / 2) :\n      () => new Array(this.params.dimension)\n        .fill(0);\n    for (let i = 0; i < this.params.states; i += 1) {\n      // this.params.xStates[i].initParametersToDefault(dataStddev);\n      const s = this.params.xStates[i];\n      s.currentRegularization = currentRegularization;\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        s.params.components[c].covariance = initCovariance();\n        s.params.components[c].regularize(currentRegularization);\n        s.params.mixtureCoeffs[c] = 1 / this.params.gaussians;\n      }\n    }\n  },\n\n  /**\n   * Initialize the means of each state using all available phrases in the\n   * training set\n   * @param  {TrainingSet} trainingSet Training set\n   * @private\n   */\n  initMeansWithAllPhrases(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) return;\n\n    for (let n = 0; n < this.params.states; n += 1) {\n      for (let d = 0; d < this.params.dimension; d += 1) {\n        this.params.xStates[n].params.components[0].mean[d] = 0.0;\n      }\n    }\n\n    const factor = new Array(this.params.states).fill(0);\n    trainingSet.forEach((phrase) => {\n      const step = Math.floor(phrase.length / this.params.states);\n      let offset = 0;\n      for (let n = 0; n < this.params.states; n += 1) {\n        for (let t = 0; t < step; t += 1) {\n          for (let d = 0; d < this.params.dimension; d += 1) {\n            this.params.xStates[n].params.components[0].mean[d] +=\n              phrase.get(offset + t, d);\n          }\n        }\n        offset += step;\n        factor[n] += step;\n      }\n    });\n    for (let n = 0; n < this.params.states; n += 1) {\n      for (let d = 0; d < this.params.dimension; d += 1) {\n        this.params.xStates[n].params.components[0].mean[d] /= factor[n];\n      }\n    }\n  },\n\n  /**\n   * Initialize the covariance by direct (fully-observed) estimation from the\n   * training data.\n   * @param  {[type]} trainingSet [description]\n   * @private\n   */\n  initCovariancesFullyObserved(trainingSet) {\n    if (!trainingSet || trainingSet.empty()) return;\n\n    for (let n = 0; n < this.params.states; n += 1) {\n      this.params.xStates[n].params.components[0].covariance =\n        new Array(this.params.dimension ** (this.params.covarianceMode === 'full' ? 2 : 1)).fill(0);\n    }\n\n    const factor = new Array(this.params.states).fill(0);\n    const othermeans = new Array(this.params.states * this.params.dimension)\n      .fill(0);\n    trainingSet.forEach((phrase) => {\n      const step = Math.floor(phrase.length / this.params.states);\n      let offset = 0;\n      for (let n = 0; n < this.params.states; n += 1) {\n        for (let t = 0; t < step; t += 1) {\n          for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n            othermeans[((n * this.params.dimension)) + d1] +=\n                phrase.get(offset + t, d1);\n            if (this.params.covarianceMode === 'full') {\n              for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n                this.params.xStates[n].params.components[0]\n                  .covariance[(d1 * this.params.dimension) + d2] +=\n                    phrase.get(offset + t, d1) *\n                    phrase.get(offset + t, d2);\n              }\n            } else {\n              this.params.xStates[n].params.components[0].covariance[d1] +=\n                phrase.get(offset + t, d1) ** 2;\n            }\n          }\n        }\n        offset += step;\n        factor[n] += step;\n      }\n    });\n\n    for (let n = 0; n < this.params.states; n += 1) {\n      for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n        othermeans[(n * this.params.dimension) + d1] /= factor[n];\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n            this.params.xStates[n].params.components[0]\n              .covariance[(d1 * this.params.dimension) + d2] /=\n                factor[n];\n          }\n        } else {\n          this.params.xStates[n].params.components[0].covariance[d1] /= factor[n];\n        }\n      }\n    }\n\n    for (let n = 0; n < this.params.states; n += 1) {\n      for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n        if (this.params.covarianceMode === 'full') {\n          for (let d2 = 0; d2 < this.params.dimension; d2 += 1) {\n            this.params.xStates[n].params.components[0]\n              .covariance[(d1 * this.params.dimension) + d2] -=\n                othermeans[(n * this.params.dimension) + d1] *\n                othermeans[(n * this.params.dimension) + d2];\n          }\n        } else {\n          this.params.xStates[n].params.components[0].covariance[d1] -=\n            othermeans[(n * this.params.dimension) + d1] *\n            othermeans[(n * this.params.dimension) + d1];\n        }\n      }\n      this.params.xStates[n].regularize();\n      this.params.xStates[n].updateInverseCovariances();\n    }\n  },\n\n  /**\n   * Initialize the means and covariance of each state's observation probability\n   * distribution using the Expectation-Maximization algorithm for GMMs\n   * @param  {[type]} trainingSet [description]\n   * @private\n   */\n  initMeansCovariancesWithGMMEM(trainingSet) {\n    for (let n = 0; n < this.params.states; n += 1) {\n      const ts = TrainingSet(this.params);\n      // eslint-disable-next-line no-loop-func\n      trainingSet.forEach((phrase, phraseIndex) => {\n        const step = Math.floor(phrase.length / this.params.states);\n        if (step > 0) {\n          ts.push(phraseIndex, phrase.label);\n          for (let t = n * step; t < (n + 1) * step; t += 1) {\n            ts.getPhrase(phraseIndex).push(phrase.getFrame(t));\n          }\n        }\n      });\n      if (!ts.empty()) {\n        const gmmParams = trainGMM(ts, this.params);\n        for (let c = 0; c < this.params.gaussians; c += 1) {\n          this.params.xStates[n].params.components[c].mean =\n            gmmParams.components[c].mean;\n          this.params.xStates[n].params.components[c].covariance =\n            gmmParams.components[c].covariance;\n          this.params.xStates[n].updateInverseCovariances();\n        }\n      }\n    }\n  },\n\n  /**\n   * Initialize the transition matrix to an ergodic transition matrix\n   * @private\n   */\n  setErgodic() {\n    const p = 1 / this.params.states;\n    this.params.prior = new Array(this.params.states).fill(p);\n    this.params.transition = Array.from(\n      new Array(this.params.states),\n      () => new Array(this.params.states).fill(p),\n    );\n  },\n\n  /**\n   * Initialize the transition matrix to a left-right transition matrix\n   * @private\n   */\n  setLeftRight() {\n    this.params.prior = new Array(this.params.states).fill(0);\n    this.params.prior[0] = 1;\n    this.params.transition = new Array(this.params.states * 2).fill(0.5);\n    this.params.transition[(this.params.states - 1) * 2] = 1;\n    this.params.transition[((this.params.states - 1) * 2) + 1] = 0;\n  },\n\n  /**\n   * Normalize the hidden state transition parameters\n   * (prior + transition matrix)\n   * @private\n   */\n  normalizeTransitions() {\n    if (this.params.transitionMode === 'ergodic') {\n      const normPrior = this.params.prior.reduce((a, b) => a + b, 0);\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.params.prior[i] /= normPrior;\n        let transitionNorm = 0;\n        for (let j = 0; j < this.params.states; j += 1) {\n          transitionNorm += this.params.transition[i][j];\n        }\n        for (let j = 0; j < this.params.states; j += 1) {\n          this.params.transition[i][j] /= transitionNorm;\n        }\n      }\n    } else {\n      for (let i = 0; i < this.params.states; i += 1) {\n        const transitionNorm = this.params.transition[i * 2] + this.params.transition[(i * 2) + 1];\n        this.params.transition[i * 2] /= transitionNorm;\n        this.params.transition[(i * 2) + 1] /= transitionNorm;\n      }\n    }\n  },\n\n  /**\n   * Initialize the backward algorithm (see rabiner, 1989)\n   * @param  {Number} ct Inverse probability at time T - 1 (last observation of\n   * the sequence)\n   * @private\n   */\n  initializeBackwardAlgorithm(ct) {\n    for (let i = 0; i < this.params.states; i += 1) {\n      this.beta[i] = ct;\n    }\n  },\n\n  /**\n   * Initialize the backward algorithm (see rabiner, 1989)\n   * @param  {Number} ct Inverse probability at time t\n   * @param  {Array<Number>} observation Observation vector\n   * @private\n   */\n  updateBackwardAlgorithm(ct, observation) {\n    this.previousBeta = this.beta.slice();\n    for (let i = 0; i < this.params.states; i += 1) {\n      this.beta[i] = 0;\n      if (this.params.transitionMode === 'ergodic') {\n        for (let j = 0; j < this.params.states; j += 1) {\n          this.beta[i] += this.params.transition[i][j] *\n            this.previousBeta[j] *\n            this.params.xStates[j].likelihood(observation);\n        }\n      } else {\n        this.beta[i] += this.params.transition[i * 2] *\n          this.previousBeta[i] *\n          this.params.xStates[i].likelihood(observation);\n        if (i < this.params.states - 1) {\n          this.beta[i] += this.params.transition[(i * 2) + 1] *\n            this.previousBeta[i + 1] *\n            this.params.xStates[i + 1].likelihood(observation);\n        }\n      }\n      this.beta[i] *= ct;\n      if (Number.isNaN(this.beta[i]) || Math.abs(this.beta[i]) === +Infinity) {\n        this.beta[i] = 1e100;\n      }\n    }\n  },\n\n  /**\n   * Forward algorithm update step for the Baum-Welch algorithms. It is similar\n   * to `updateForwardAlgorithm` except it takes precomputed observation\n   * likelihoods as argument.\n   * @param  {Array<Number>} observationLikelihoods observation likelihoods\n   * @private\n   */\n  baumWelchForwardUpdate(observationLikelihoods) {\n    let normConst = 0;\n    this.previousAlpha = this.alpha.slice();\n    for (let j = 0; j < this.params.states; j += 1) {\n      this.alpha[j] = 0;\n      if (this.params.transitionMode === 'ergodic') {\n        for (let i = 0; i < this.params.states; i += 1) {\n          this.alpha[j] += this.previousAlpha[i] *\n            this.params.transition[i][j];\n        }\n      } else {\n        this.alpha[j] += this.previousAlpha[j] * this.params.transition[j * 2];\n        if (j > 0) {\n          this.alpha[j] += this.previousAlpha[j - 1] *\n            this.params.transition[((j - 1) * 2) + 1];\n        } else {\n          this.alpha[0] += this.previousAlpha[this.params.states - 1] *\n            this.params.transition[(this.params.states * 2) - 1];\n        }\n      }\n      this.alpha[j] *= observationLikelihoods[j];\n      normConst += this.alpha[j];\n    }\n    if (Number.isNaN(normConst)) {\n      throw new Error('Holy molly');\n    }\n    if (normConst > 1e-300) {\n      for (let j = 0; j < this.params.states; j += 1) {\n        this.alpha[j] /= normConst;\n      }\n      return 1 / normConst;\n    }\n    return 0;\n  },\n\n  /**\n   * Backward algorithm update step for the Baum-Welch algorithms. It is similar\n   * to `updatebackwardAlgorithm` except it takes precomputed observation\n   * likelihoods as argument.\n   * @param  {Number} ct Inverse probability at time t\n   * @param  {Array<Number>} observationLikelihoods observation likelihoods\n   * @private\n   */\n  baumWelchBackwardUpdate(ct, observationLikelihoods) {\n    this.previousBeta = this.beta.slice();\n    for (let i = 0; i < this.params.states; i += 1) {\n      this.beta[i] = 0;\n      if (this.params.transitionMode === 'ergodic') {\n        for (let j = 0; j < this.params.states; j += 1) {\n          this.beta[i] +=\n            this.params.transition[i][j] *\n            this.previousBeta[j] *\n            observationLikelihoods[j];\n        }\n      } else {\n        this.beta[i] += this.params.transition[i * 2] *\n          this.previousBeta[i] *\n          observationLikelihoods[i];\n        if (i < this.params.states - 1) {\n          this.beta[i] += this.params.transition[(i * 2) + 1] *\n            this.previousBeta[i + 1] *\n            observationLikelihoods[i + 1];\n        }\n      }\n      this.beta[i] *= ct;\n      if (Number.isNaN(this.beta[i]) || Math.abs(this.beta[i]) === +Infinity) {\n        this.beta[i] = 1e100;\n      }\n    }\n  },\n\n  /**\n   * Forward-Backward algorithm for the Baum-Welch training algorithm\n   * @param  {Phrase} currentPhrase Current data phrase\n   * @param  {Number} phraseIndex   Current phrase index\n   * @return {Number} Log-likelihood\n   * @private\n   */\n  baumWelchForwardBackward(currentPhrase, phraseIndex) {\n    const T = currentPhrase.length;\n\n    const ct = new Array(T).fill(0);\n    let logProb;\n    this.alphaSeq = [];\n    this.betaSeq = [];\n\n    const observationProbabilities = Array.from(\n      new Array(T),\n      () => new Array(this.params.states).fill(0),\n    );\n    for (let t = 0; t < T; t += 1) {\n      for (let i = 0; i < this.params.states; i += 1) {\n        observationProbabilities[t][i] =\n          this.params.xStates[i].likelihood(currentPhrase.getFrame(t));\n      }\n    }\n\n    // Forward algorithm\n    ct[0] = this.initializeForwardAlgorithm(currentPhrase.getFrame(0));\n    logProb = -Math.log(ct[0]);\n    this.alphaSeq.push(this.alpha.slice());\n\n    for (let t = 1; t < T; t += 1) {\n      ct[t] = this.baumWelchForwardUpdate(observationProbabilities[t]);\n      logProb -= Math.log(ct[t]);\n      this.alphaSeq.push(this.alpha.slice());\n    }\n\n    // Backward algorithm\n    this.initializeBackwardAlgorithm(ct[T - 1]);\n    this.betaSeq.push(this.beta.slice());\n\n    for (let t = T - 2; t >= 0; t -= 1) {\n      this.baumWelchBackwardUpdate(ct[t], observationProbabilities[t + 1]);\n      this.betaSeq.push(this.beta.slice());\n    }\n    this.betaSeq.reverse();\n\n    // Compute Gamma Variable\n    for (let t = 0; t < T; t += 1) {\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.gammaSequence[phraseIndex][t][i] =\n          (this.alphaSeq[t][i] * this.betaSeq[t][i]) / ct[t];\n      }\n    }\n\n    // Compute Gamma variable for each mixture component\n    let normConst;\n\n    for (let t = 0; t < T; t += 1) {\n      for (let i = 0; i < this.params.states; i += 1) {\n        normConst = 0;\n        if (this.params.gaussians === 1) {\n          const oo = observationProbabilities[t][i];\n          this.gammaSequenceperMixture[phraseIndex][0][t][i] =\n            this.gammaSequence[phraseIndex][t][i] * oo;\n          normConst += oo;\n        } else {\n          for (let c = 0; c < this.params.gaussians; c += 1) {\n            const oo = this.params.xStates[i]\n              .componentLikelihood(currentPhrase.getFrame(t), c);\n            this.gammaSequenceperMixture[phraseIndex][c][t][i] =\n              this.gammaSequence[phraseIndex][t][i] *\n              oo;\n            normConst += oo;\n          }\n        }\n        if (normConst > 0) {\n          for (let c = 0; c < this.params.gaussians; c += 1) {\n            this.gammaSequenceperMixture[phraseIndex][c][t][i] /= normConst;\n          }\n        }\n      }\n    }\n\n    // Compute Epsilon Variable\n    if (this.params.transitionMode === 'ergodic') {\n      for (let t = 0; t < T - 1; t += 1) {\n        for (let i = 0; i < this.params.states; i += 1) {\n          for (let j = 0; j < this.params.states; j += 1) {\n            this.epsilonSequence[phraseIndex][t][i][j] =\n              this.alphaSeq[t][i] *\n              this.params.transition[i][j] *\n              this.betaSeq[t + 1][j];\n            this.epsilonSequence[phraseIndex][t][i][j] *=\n              observationProbabilities[t + 1][j];\n          }\n        }\n      }\n    } else {\n      for (let t = 0; t < T - 1; t += 1) {\n        for (let i = 0; i < this.params.states; i += 1) {\n          this.epsilonSequence[phraseIndex][t][i * 2] =\n            this.alphaSeq[t][i] *\n            this.params.transition[i * 2] *\n            this.betaSeq[t + 1][i];\n          this.epsilonSequence[phraseIndex][t][i * 2] *=\n            observationProbabilities[t + 1][i];\n          if (i < this.params.states - 1) {\n            this.epsilonSequence[phraseIndex][t][(i * 2) + 1] =\n              this.alphaSeq[t][i] *\n              this.params.transition[(i * 2) + 1] *\n              this.betaSeq[t + 1][i + 1];\n            this.epsilonSequence[phraseIndex][t][(i * 2) + 1] *=\n              observationProbabilities[t + 1][i + 1];\n          }\n        }\n      }\n    }\n\n    return logProb;\n  },\n\n  /**\n   * Sums the Gamma variables used for parameter estimation during training\n   * @param  {TrainingSet} trainingSet Training Set\n   * @private\n   */\n  baumWelchGammaSum(trainingSet) {\n    for (let i = 0; i < this.params.states; i += 1) {\n      this.gammaSum[i] = 0;\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.gammaSumPerMixture[(i * this.params.gaussians) + c] = 0;\n      }\n    }\n\n    let phraseIndex = 0;\n    trainingSet.forEach((phrase) => {\n      for (let i = 0; i < this.params.states; i += 1) {\n        for (let t = 0; t < phrase.length; t += 1) {\n          this.gammaSum[i] +=\n            this.gammaSequence[phraseIndex][t][i];\n          for (let c = 0; c < this.params.gaussians; c += 1) {\n            this.gammaSumPerMixture[(i * this.params.gaussians) + c] +=\n              this.gammaSequenceperMixture[phraseIndex][c][t][i];\n          }\n        }\n      }\n      phraseIndex += 1;\n    });\n  },\n\n  /**\n   * Estimate the mixture coefficients of the GMM observation probability\n   * distribution at each state.\n   * @param  {TrainingSet} trainingSet Training Set\n   * @private\n   */\n  baumWelchEstimateMixtureCoefficients(trainingSet) {\n    let phraseIndex = 0;\n    trainingSet.forEach((phrase) => {\n      for (let i = 0; i < this.params.states; i += 1) {\n        for (let t = 0; t < phrase.length; t += 1) {\n          for (let c = 0; c < this.params.gaussians; c += 1) {\n            this.params.xStates[i].params.mixtureCoeffs[c] +=\n              this.gammaSequenceperMixture[phraseIndex][c][t][i];\n          }\n        }\n      }\n      phraseIndex += 1;\n    });\n\n    // Scale mixture coefficients\n    for (let i = 0; i < this.params.states; i += 1) {\n      this.params.xStates[i].normalizeMixtureCoeffs();\n    }\n  },\n\n  /**\n   * Estimate the means of the GMM observation probability\n   * distribution at each state.\n   * @param  {TrainingSet} trainingSet Training Set\n   * @private\n   */\n  baumWelchEstimateMeans(trainingSet) {\n    for (let i = 0; i < this.params.states; i += 1) {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        this.params.xStates[i].params.components[c].mean.fill(0);\n      }\n    }\n\n    // Re-estimate Mean\n    let phraseIndex = 0;\n    trainingSet.forEach((phrase) => {\n      for (let i = 0; i < this.params.states; i += 1) {\n        for (let t = 0; t < phrase.length; t += 1) {\n          for (let c = 0; c < this.params.gaussians; c += 1) {\n            for (let d = 0; d < this.params.dimension; d += 1) {\n              this.params.xStates[i].params.components[c].mean[d] +=\n                this.gammaSequenceperMixture[phraseIndex][c][t][i] *\n                phrase.get(t, d);\n            }\n          }\n        }\n      }\n      phraseIndex += 1;\n    });\n\n    // Normalize mean\n    for (let i = 0; i < this.params.states; i += 1) {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        for (let d = 0; d < this.params.dimension; d += 1) {\n          if (this.gammaSumPerMixture[(i * this.params.gaussians) + c] > 0) {\n            this.params.xStates[i].params.components[c].mean[d] /=\n              this.gammaSumPerMixture[(i * this.params.gaussians) + c];\n          }\n          if (Number.isNaN(this.params.xStates[i].params.components[c].mean[d])) {\n            throw new Error('Convergence Error');\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   * Estimate the covariances of the GMM observation probability\n   * distribution at each state.\n   * @param  {TrainingSet} trainingSet Training Set\n   * @private\n   */\n  baumWelchEstimateCovariances(trainingSet) {\n    let phraseIndex = 0;\n    trainingSet.forEach((phrase) => {\n      for (let i = 0; i < this.params.states; i += 1) {\n        for (let t = 0; t < phrase.length; t += 1) {\n          for (let c = 0; c < this.params.gaussians; c += 1) {\n            for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n              if (this.params.covarianceMode === 'full') {\n                for (let d2 = d1; d2 < this.params.dimension; d2 += 1) {\n                  this.params.xStates[i].params.components[c]\n                    .covariance[(d1 * this.params.dimension) + d2] +=\n                    this.gammaSequenceperMixture[phraseIndex][c][t][i] *\n                    (phrase.get(t, d1) -\n                      this.params.xStates[i].params.components[c].mean[d1]) *\n                    (phrase.get(t, d2) -\n                      this.params.xStates[i].params.components[c].mean[d2]);\n                }\n              } else {\n                const value = phrase.get(t, d1) -\n                  this.params.xStates[i].params.components[c].mean[d1];\n                this.params.xStates[i].params.components[c].covariance[d1] +=\n                  this.gammaSequenceperMixture[phraseIndex][c][t][i] *\n                  (value ** 2);\n              }\n            }\n          }\n        }\n      }\n      phraseIndex += 1;\n    });\n\n    // Scale covariance\n    for (let i = 0; i < this.params.states; i += 1) {\n      for (let c = 0; c < this.params.gaussians; c += 1) {\n        if (this.gammaSumPerMixture[(i * this.params.gaussians) + c] > 0) {\n          for (let d1 = 0; d1 < this.params.dimension; d1 += 1) {\n            if (this.params.covarianceMode === 'full') {\n              for (let d2 = d1; d2 < this.params.dimension; d2 += 1) {\n                this.params.xStates[i].params.components[c]\n                  .covariance[(d1 * this.params.dimension) + d2] /=\n                  this.gammaSumPerMixture[(i * this.params.gaussians) + c];\n                if (d1 !== d2) {\n                  this.params.xStates[i].params.components[c]\n                    .covariance[(d2 * this.params.dimension) + d1] =\n                    this.params.xStates[i].params.components[c]\n                      .covariance[(d1 * this.params.dimension) + d2];\n                }\n              }\n            } else {\n              this.params.xStates[i].params.components[c].covariance[d1] /=\n                this.gammaSumPerMixture[(i * this.params.gaussians) + c];\n            }\n          }\n        }\n      }\n      this.params.xStates[i].regularize();\n      this.params.xStates[i].updateInverseCovariances();\n    }\n  },\n\n  /**\n   * Estimate the prior probabilities of the model\n   * @param  {TrainingSet} trainingSet Training Set\n   * @private\n   */\n  baumWelchEstimatePrior(trainingSet) {\n    this.params.prior.fill(0);\n\n    // Re-estimate Prior probabilities\n    let sumprior = 0;\n    for (let phraseIndex = 0;\n      phraseIndex < trainingSet.size();\n      phraseIndex += 1) {\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.params.prior[i] += this.gammaSequence[phraseIndex][0][i];\n        sumprior += this.params.prior[i];\n      }\n    }\n\n    // Scale Prior vector\n    if (sumprior > 0) {\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.params.prior[i] /= sumprior;\n      }\n    } else {\n      throw new Error('The Prior is all ZERO.....');\n    }\n  },\n\n  /**\n   * Estimate the transition probabilities of the model\n   * @param  {TrainingSet} trainingSet Training Set\n   * @private\n   */\n  baumWelchEstimateTransitions(trainingSet) {\n    // Set transition matrix to 0\n    this.params.transition = this.params.transitionMode === 'ergodic' ?\n      Array.from(\n        new Array(this.params.states),\n        () => new Array(this.params.states).fill(0),\n      ) :\n      new Array(this.params.states * 2).fill(0);\n\n    // Re-estimate Transition probabilities\n    let phraseIndex = 0;\n    trainingSet.forEach((phrase) => {\n      if (phrase.length > 0) {\n        for (let i = 0; i < this.params.states; i += 1) {\n          // Experimental: A bit of regularization (sometimes avoids\n          // numerical errors)\n          if (this.params.transitionMode === 'leftright') {\n            this.params.transition[i * 2] += TRANSITION_REGULARIZATION;\n            if (i < this.params.states - 1) {\n              this.params.transition[(i * 2) + 1] += TRANSITION_REGULARIZATION;\n            } else {\n              this.params.transition[i * 2] += TRANSITION_REGULARIZATION;\n            }\n          }\n          // End Regularization\n          if (this.params.transitionMode === 'ergodic') {\n            for (let j = 0; j < this.params.states; j += 1) {\n              for (let t = 0; t < phrase.length - 1; t += 1) {\n                this.params.transition[i][j] +=\n                  this.epsilonSequence[phraseIndex][t][i][j];\n              }\n            }\n          } else {\n            for (let t = 0; t < phrase.length - 1; t += 1) {\n              this.params.transition[i * 2] +=\n                this.epsilonSequence[phraseIndex][t][i * 2];\n            }\n            if (i < this.params.states - 1) {\n              for (let t = 0; t < phrase.length - 1; t += 1) {\n                this.params.transition[(i * 2) + 1] +=\n                  this.epsilonSequence[phraseIndex][t][(i * 2) + 1];\n              }\n            }\n          }\n        }\n      }\n      phraseIndex += 1;\n    });\n\n    // Scale transition matrix\n    if (this.params.transitionMode === 'ergodic') {\n      for (let i = 0; i < this.params.states; i += 1) {\n        for (let j = 0; j < this.params.states; j += 1) {\n          this.params.transition[i][j] /=\n            (this.gammaSum[i] + (2 * TRANSITION_REGULARIZATION));\n          if (Number.isNaN(this.params.transition[i][j])) {\n            throw new Error('Convergence Error. Check your training data or increase the variance offset');\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < this.params.states; i += 1) {\n        this.params.transition[i * 2] /=\n          (this.gammaSum[i] + (2 * TRANSITION_REGULARIZATION));\n        if (Number.isNaN(this.params.transition[i * 2])) {\n          throw new Error('Convergence Error. Check your training data or increase the variance offset');\n        }\n        if (i < this.params.states - 1) {\n          this.params.transition[(i * 2) + 1] /=\n            (this.gammaSum[i] + (2 * TRANSITION_REGULARIZATION));\n          if (Number.isNaN(this.params.transition[(i * 2) + 1])) {\n            throw new Error('Convergence Error. Check your training data or increase the variance offset');\n          }\n        }\n      }\n    }\n  },\n};\n\n/**\n * Add HMM Training capabilities to a HMM Model\n * @param  {HMMBase} o               Source HMM Model\n * @param  {Number} [states=1]       Number of hidden states\n * @param  {Number} [gaussians=1]    Number of Gaussian components\n * @param  {Object} [regularization] Regularization parameters\n * @param  {Number} [regularization.absolute=1e-3] Absolute regularization\n * @param  {Number} [regularization.relative=1e-2] Relative Regularization\n (relative to the training set's variance along each dimension)\n * @param  {String} [transitionMode='ergodic'] Structure of the transition\n * matrix ('ergodic' or 'left-right').\n * @param  {String} [covarianceMode='full'] Covariance mode ('full' or diagonal)\n * @return {BMMBase}\n */\nexport default function withHMMTraining(\n  o,\n  states = 1,\n  gaussians = 1,\n  regularization = { absolute: 1e-3, relative: 1e-2 },\n  transitionMode = 'leftright',\n  covarianceMode = 'full',\n) {\n  if (!Object.keys(o).includes('params')) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  return Object.assign(\n    o,\n    hmmTrainerPrototype,\n    {\n      params: {\n        ...o.params,\n        states,\n        gaussians,\n        regularization,\n        transitionMode,\n        covarianceMode,\n      },\n    },\n  );\n}\n","import validateParameters from '../common/validation';\nimport { isBaseModel } from '../core/model_base_mixin';\nimport { GMMPredictor } from '../gmm';\n\nconst hmmParameterSpec = (states, transitionMode) => ({\n  states: {\n    required: true,\n    check: { min: 1 },\n  },\n  gaussians: {\n    required: true,\n    check: { min: 1 },\n  },\n  regularization: {\n    required: true,\n    check: ({ absolute, relative }) =>\n      (absolute && relative && absolute > 0 && relative > 0),\n  },\n  transitionMode: {\n    required: true,\n    check: ['ergodic', 'leftright'],\n  },\n  covarianceMode: {\n    required: true,\n    check: ['full', 'diagonal'],\n  },\n  prior: {\n    required: true,\n    check: m => transitionMode === 'leftright' || m.length === states,\n  },\n  transition: {\n    required: true,\n    check: m => (transitionMode === 'leftright' ?\n      m.length === 2 * states :\n      m.length === states),\n  },\n  xStates: {\n    required: true,\n    check: m => m.length === states,\n  },\n});\n\n\n/**\n * HMM Base prototype\n * @type {Object}\n * @ignore\n */\nconst hmmPredictionPrototype = /** @lends withHMMPrediction */ {\n  forwardInitialized: false,\n  isHierarchical: false,\n\n  /**\n   * Setup the Model by allocating GMM predictors to each of the hidden states\n   * @return {HMMBaseModel} the model\n   * @private\n   */\n  setup() {\n    this.params.xStates = this.params.xStates.map(s => GMMPredictor(s).reset());\n    return this;\n  },\n\n  /**\n   * Reset the prediction process\n   * @return {HMMBaseModel} the model\n   */\n  reset() {\n    this.likelihoodBuffer.clear();\n    this.params.xStates.forEach((s) => { s.reset(); });\n    return this;\n  },\n\n  /**\n   * Compute the likelihood of an observation given the HMM's parameters\n   * @param  {Array<Number>} observation Observation vector\n   * @return {Number}\n   */\n  likelihood(observation) {\n    const ct = (this.forwardInitialized) ?\n      this.updateForwardAlgorithm(observation) :\n      this.initializeForwardAlgorithm(observation);\n    this.updateAlphaWindow();\n    this.updateProgress();\n    return 1 / ct;\n  },\n\n  updateProgress() {\n    this.results.progress = 0.0;\n    for (let i = this.windowMinindex; i < this.windowMaxindex; i += 1) {\n      if (this.isHierarchical) {\n        this.results.progress += (this.alpha[i] + this.alpha1[i] + this.alpha2[i]) *\n          (i / this.windowNormalizationConstant);\n      } else {\n        this.results.progress += (this.alpha[i] * i) /\n          this.windowNormalizationConstant;\n      }\n    }\n    this.results.progress /= this.params.states - 1;\n  },\n\n  /**\n   * Update the state probabilities filtering window (for multiclass\n   * hierarchical HMM I think...)\n   * @private\n   */\n  updateAlphaWindow() {\n    this.results.likeliestState = 0;\n    // Get likeliest State\n    let bestAlpha = this.isHierarchical ?\n      (this.alpha[0] + this.alpha1[0]) :\n      this.alpha[0];\n    for (let i = 1; i < this.params.states; i += 1) {\n      if (this.isHierarchical) {\n        if ((this.alpha[i] + this.alpha1[i]) > bestAlpha) {\n          bestAlpha = this.alpha[i] + this.alpha1[i];\n          this.results.likeliestState = i;\n        }\n      } else if (this.alpha[i] > bestAlpha) {\n        bestAlpha = this.alpha[i];\n        this.results.likeliestState = i;\n      }\n    }\n\n    // Compute Window\n    this.windowMinindex = this.results.likeliestState - Math.floor(this.params.states / 2);\n    this.windowMaxindex = this.results.likeliestState + Math.floor(this.params.states / 2);\n    this.windowMinindex = (this.windowMinindex >= 0) ? this.windowMinindex : 0;\n    this.windowMaxindex = (this.windowMaxindex <= this.params.states) ?\n      this.windowMaxindex : this.params.states;\n    this.windowNormalizationConstant = 0.0;\n    for (let i = this.windowMinindex; i < this.windowMaxindex; i += 1) {\n      this.windowNormalizationConstant += this.isHierarchical ?\n        (this.alpha[i] + this.alpha1[i]) :\n        this.alpha[i];\n    }\n  },\n};\n\n/**\n * Bimodal (regression) HMM Prototype\n * @type {Object}\n * @ignore\n */\nconst hmmBimodalPredictionPrototype = /** @lends withHMMPrediction */ {\n  /**\n   * Estimate the output values corresponding to the input observation, by\n   * regression given the HMM's parameters. This method is called Hidden\n   * Mixture Regression (GMR).\n   *\n   * @param  {Array<Number>} inputObservation Observation on the input modality\n   * @return {Array<Number>} Output values (length = outputDimension)\n   */\n  regression(inputObservation) {\n    this.results.outputValues = Array(this.params.outputDimension).fill(0);\n    this.results.outputCovariance = Array(this.params.covarianceMode === 'full' ? this.params.outputDimension ** 2 : this.params.outputDimension).fill(0);\n\n    if (this.params.regressionEstimator === 'likeliest') {\n      this.params.xStates[this.results.likeliestState].predict(inputObservation);\n      this.results.outputValues =\n        this.params.xStates[this.results.likeliestState].results.outputValues;\n      return this.results.outputValues;\n    }\n\n    const clipMinState = (this.params.regressionEstimator === 'full') ?\n      0 : this.windowMinindex;\n    const clipMaxState = (this.params.regressionEstimator === 'full') ?\n      this.params.states : this.windowMaxindex;\n    let normalizationConstant = (this.params.regressionEstimator === 'full') ?\n      1 : this.windowNormalizationConstant;\n\n    if (normalizationConstant <= 0.0) normalizationConstant = 1;\n\n    // Compute Regression\n    for (let i = clipMinState; i < clipMaxState; i += 1) {\n      this.params.xStates[i].likelihood(inputObservation);\n      this.params.xStates[i].regression(inputObservation);\n      const tmpPredictedOutput = this.params.xStates[i].results.outputValues;\n      for (let d = 0; d < this.params.outputDimension; d += 1) {\n        if (this.isHierarchical) {\n          this.results.outputValues[d] +=\n            (this.alpha[i] + this.alpha1[i]) *\n            (tmpPredictedOutput[d] / normalizationConstant);\n          if (this.params.covarianceMode === 'full') {\n            for (let d2 = 0; d2 < this.params.outputDimension; d2 += 1) {\n              this.results.outputCovariance[(d * this.params.outputDimension) + d2] +=\n                (this.alpha[i] + this.alpha1[i]) *\n                (this.alpha[i] + this.alpha1[i]) *\n                (this.params.xStates[i].results\n                  .outputCovariance[(d * this.params.outputDimension) + d2] /\n                normalizationConstant);\n            }\n          } else {\n            this.results.outputCovariance[d] +=\n              (this.alpha[i] + this.alpha1[i]) *\n              (this.alpha[i] + this.alpha1[i]) *\n              (this.params.xStates[i].results.outputCovariance[d] /\n              normalizationConstant);\n          }\n        } else {\n          this.results.outputValues[d] += this.alpha[i] *\n            (tmpPredictedOutput[d] / normalizationConstant);\n          if (this.params.covarianceMode === 'full') {\n            for (let d2 = 0; d2 < this.params.outputDimension; d2 += 1) {\n              this.results.outputCovariance[(d * this.params.outputDimension) + d2] +=\n                (this.alpha[i] ** 2) *\n                (this.params.xStates[i].results\n                  .outputCovariance[(d * this.params.outputDimension) + d2] /\n                normalizationConstant);\n            }\n          } else {\n            this.results.outputCovariance[d] +=\n              ((this.alpha[i] ** 2) *\n              this.params.xStates[i].results.outputCovariance[d]) /\n              normalizationConstant;\n          }\n        }\n      }\n    }\n    return this.results.outputValues;\n  },\n};\n\n/**\n * Add HMM prediction capabilities to a single-class model. Mostly, this checks\n * the validity of the model parameters\n *\n * @todo validate gaussian components\n *\n * @param  {HMMBaseModel} o Source Model\n * @return {HMMBaseModel}\n *\n * @throws {Error} is o is not a ModelBase\n */\nexport default function withHMMPrediction(o) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  validateParameters('HMM', hmmParameterSpec(o.params.states, o.params.transitionMode), o.params);\n  return Object.assign(\n    o,\n    hmmPredictionPrototype,\n    o.params.bimodal ? hmmBimodalPredictionPrototype : {},\n    {\n      alpha: new Array(o.params.states).fill(0),\n      previous_alpha_: new Array(o.params.states).fill(0),\n    },\n  ).setup();\n}\n","import { isBaseModel } from '../core/model_base_mixin';\n\nconst DEFAULT_EXITPROBABILITY_LAST_STATE = 0.1;\n\n/**\n * Hierarchical HMM Base prototype\n * @type {Object}\n * @ignore\n */\nconst hierarchicalHmmPredictionPrototype =\n/** @lends withHierarchicalHMMPrediction */\n{\n  /**\n   * Specificies if the forward algorithm has been initialized\n   * @type {Boolean}\n   * @private\n   */\n  forwardInitialized: false,\n\n  /**\n   * Setup the model (allocate transition parameters)\n   * @return {HierarchicalHMM} [description]\n   * @private\n   */\n  setup() {\n    const numClasses = this.size();\n    this.params.prior = new Array(numClasses).fill(1 / numClasses);\n    this.params.transition = Array.from(\n      new Array(numClasses),\n      () => new Array(numClasses).fill(1 / numClasses),\n    );\n    this.params.exitTransition = new Array(numClasses).fill(0.1);\n    Object.values(this.models).forEach((model) => {\n      const m = model;\n      m.isHierarchical = true;\n    });\n    this.updateExitProbabilities();\n    return this;\n  },\n\n  /**\n   * Update the exit probabilities of each sub-Markov model\n   * @param  {Array<Number>|undefined} [exitProbabilities=undefined] Vector of\n   * exit probabilities (optional)\n   * @private\n   */\n  updateExitProbabilities(exitProbabilities = undefined) {\n    const exitProb = (exitProbabilities !== undefined) ?\n      exitProbabilities :\n      new Array(this.params.states - 1).fill(0)\n        .concat([DEFAULT_EXITPROBABILITY_LAST_STATE]);\n    Object.keys(this.models).forEach((label) => {\n      this.models[label].params.exitProbabilities = exitProb.slice();\n    });\n  },\n\n  /**\n   * Reset the prediction process. This is particularly important for temporal\n   * models such as HMMs, that depends on previous observations.\n   */\n  reset() {\n    Object.values(this.models).forEach(m => m.reset());\n    this.results = {\n      labels: [],\n      instantLikelihoods: [],\n      smoothedLikelihoods: [],\n      smoothedLogLikelihoods: [],\n      smoothedNormalizedLikelihoods: [],\n      exitLikelihood: [],\n      likeliest: null,\n      classes: {},\n    };\n    if (this.params.bimodal) {\n      this.resetBimodal();\n    }\n    this.forwardInitialized = false;\n  },\n\n  /**\n   * Make a prediction from a new observation (updates the results member)\n   * @param  {Array<Number>} observation Observation vector\n   */\n  predict(observation) {\n    if (this.forwardInitialized) {\n      this.updateForwardAlgorithm(observation);\n    } else {\n      this.initializeForwardAlgorithm(observation);\n    }\n    Object.keys(this.models).sort().forEach((label) => {\n      const model = this.models[label];\n      model.updateAlphaWindow();\n      model.updateProgress();\n      model.updateResults(model.results.instantLikelihood);\n    });\n    this.updateResults();\n\n    if (this.params.bimodal) {\n      Object.values(this.models).forEach(m => m.regression(observation));\n\n      if (this.params.multiClassRegressionEstimator === 'likeliest') {\n        this.results.outputValues =\n          this.models[this.results.likeliest].results.outputValues;\n        this.results.outputCovariance =\n          this.models[this.results.likeliest].results.outputCovariance;\n      } else {\n        this.results.outputValues = new Array(this.outputDimension).fill(0);\n        this.results.outputCovariance =\n          new Array(this.params.covarianceMode === 'full' ?\n            this.outputDimension ** 2 :\n            this.outputDimension).fill(0);\n\n        let modelIndex = 0;\n        Object.values(this.models).forEach((model) => {\n          for (let d = 0; d < this.outputDimension; d += 1) {\n            this.results.outputValues[d] +=\n              this.results.smoothedNormalizedLikelihoods[modelIndex] *\n              model.second.results.outputValues[d];\n\n            if (this.params.covarianceMode === 'full') {\n              for (let d2 = 0; d2 < this.outputDimension; d2 += 1) {\n                this.results.outputCovariance[(d * this.outputDimension) + d2] +=\n                  this.results.smoothedNormalizedLikelihoods[modelIndex] *\n                  model.results.outputCovariance[(d * this.outputDimension) + d2];\n              }\n            } else {\n              this.results.outputCovariance[d] +=\n                this.results.smoothedNormalizedLikelihoods[modelIndex] *\n                model.second.results.outputCovariance[d];\n            }\n          }\n          modelIndex += 1;\n        });\n      }\n    }\n  },\n\n  /**\n   * Initialize the forward algorithm of the hierarchical HMM\n   * @param  {Array<Number>} observation Observation vector\n   * @private\n   */\n  initializeForwardAlgorithm(observation) {\n    let normConst = 0;\n    let modelIndex = 0;\n    const classes = Object.keys(this.models).sort();\n    classes.forEach((label) => {\n      const model = this.models[label];\n      const N = model.params.states;\n      model.alpha1 = new Array(N).fill(0);\n      model.alpha2 = new Array(N).fill(0);\n\n      // Compute Emission probability and initialize on the first state of\n      // the primitive\n      if (model.params.transitionMode === 'ergodic') {\n        model.results.instantLikelihood = 0;\n        for (let i = 0; i < N; i += 1) {\n          model.alpha[i] = this.params.prior[modelIndex] *\n            model.params.prior[i] *\n            model.params.xStates[i].likelihood(observation);\n          model.results.instantLikelihood += model.alpha[i];\n        }\n      } else {\n        model.alpha[0] = this.params.prior[modelIndex] *\n          model.params.xStates[0].likelihood(observation);\n        [model.results.instantLikelihood] = model.alpha;\n      }\n      normConst += model.results.instantLikelihood;\n      modelIndex += 1;\n    });\n\n    classes.forEach((label) => {\n      const model = this.models[label];\n      const N = model.params.states;\n      for (let i = 0; i < N; i += 1) {\n        model.alpha[i] /= normConst;\n      }\n    });\n\n\n    this.frontierV1 = new Array(this.size).fill(0);\n    this.frontierV2 = new Array(this.size).fill(0);\n    this.forwardInitialized = true;\n  },\n\n  /**\n   * Update the forward algorithm of the hierarchical HMM\n   * @param  {Array<Number>} observation Observation vector\n   * @private\n   */\n  updateForwardAlgorithm(observation) {\n    let normConst = 0;\n\n    // Frontier Algorithm: variables\n    let tmp = 0;\n\n    // Intermediate variables: compute the sum of probabilities of making a\n    // transition to a new primitive\n    this.frontierV1 = this.likelihoodAlpha(1);\n    this.frontierV2 = this.likelihoodAlpha(2);\n\n    // FORWARD UPDATE\n    // --------------------------------------\n    let dstModelIndex = 0;\n    const classes = Object.keys(this.models).sort();\n    classes.forEach((label) => {\n      const dstModel = this.models[label];\n      const N = dstModel.params.states;\n\n      // 1) COMPUTE FRONTIER VARIABLE\n      //    --------------------------------------\n      // frontier variable : intermediate computation variable\n      const front = new Array(N).fill(0);\n\n      if (dstModel.params.transitionMode === 'ergodic') {\n        for (let k = 0; k < N; k += 1) {\n          for (let j = 0; j < N; j += 1) {\n            front[k] += (dstModel.params.transition[j][k] /\n              (1 - dstModel.params.exitProbabilities[j]))\n              * dstModel.alpha[j];\n          }\n\n          for (\n            let srcModelIndex = 0;\n            srcModelIndex < this.size();\n            srcModelIndex += 1\n          ) {\n            front[k] += dstModel.params.prior[k] * (\n              (this.frontierV1[srcModelIndex] *\n              this.params.transition[srcModelIndex][dstModelIndex]) +\n              (this.params.prior[dstModelIndex] *\n              this.frontierV2[srcModelIndex])\n            );\n          }\n        }\n      } else {\n        // k=0: first state of the primitive\n        front[0] = dstModel.params.transition[0] * dstModel.alpha[0];\n\n        for (\n          let srcModelIndex = 0;\n          srcModelIndex < this.size();\n          srcModelIndex += 1\n        ) {\n          front[0] += (this.frontierV1[srcModelIndex] *\n            this.params.transition[srcModelIndex][dstModelIndex]) +\n            (this.params.prior[dstModelIndex] *\n              this.frontierV2[srcModelIndex]);\n        }\n\n        // k>0: rest of the primitive\n        for (let k = 1; k < N; k += 1) {\n          front[k] += (dstModel.params.transition[k * 2] /\n            (1 - dstModel.params.exitProbabilities[k])) *\n            dstModel.alpha[k];\n          front[k] += (dstModel.params.transition[((k - 1) * 2) + 1] /\n            (1 - dstModel.params.exitProbabilities[k - 1])) *\n            dstModel.alpha[k - 1];\n        }\n\n        for (let k = 0; k < N; k += 1) {\n          dstModel.alpha[k] = 0;\n          dstModel.alpha1[k] = 0;\n          dstModel.alpha2[k] = 0;\n        }\n      }\n\n      // 2) UPDATE FORWARD VARIABLE\n      //    --------------------------------------\n      dstModel.results.exitLikelihood = 0.0;\n      dstModel.results.instantLikelihood = 0.0;\n\n      // end of the primitive: handle exit states\n      for (let k = 0; k < N; k += 1) {\n        tmp = dstModel.params.xStates[k].likelihood(observation) * front[k];\n        dstModel.alpha2[k] = this.params.exitTransition[dstModelIndex] *\n          dstModel.params.exitProbabilities[k] * tmp;\n        dstModel.alpha1[k] = (1 - this.params.exitTransition[dstModelIndex]) *\n          dstModel.params.exitProbabilities[k] * tmp;\n        dstModel.alpha[k] = (1 - dstModel.params.exitProbabilities[k]) * tmp;\n\n        dstModel.results.exitLikelihood += dstModel.alpha1[k] + dstModel.alpha2[k];\n        dstModel.results.instantLikelihood += dstModel.alpha[k] +\n          dstModel.alpha1[k] + dstModel.alpha2[k];\n        normConst += tmp;\n      }\n\n      dstModel.results.exitRatio = dstModel.results.exitLikelihood /\n        dstModel.results.instantLikelihood;\n\n      dstModelIndex += 1;\n    });\n\n    classes.forEach((label) => {\n      const model = this.models[label];\n      const N = model.params.states;\n      for (let k = 0; k < N; k += 1) {\n        model.alpha[k] /= normConst;\n        model.alpha1[k] /= normConst;\n        model.alpha2[k] /= normConst;\n      }\n    });\n  },\n\n  /**\n   * Compute the likelihood of a given probability.\n   * @param  {Number} exitNum Exit level number\n   * @return {Array<Number>}\n   */\n  likelihoodAlpha(exitNum) {\n    const likelihoodVector = new Array(this.size()).fill(0);\n    if (exitNum < 0) {\n      // Likelihood over all exit states\n      let modelIndex = 0;\n      Object.keys(this.models).sort().forEach((label) => {\n        const model = this.models[label];\n        likelihoodVector[modelIndex] = 0.0;\n        for (let k = 0; k < model.params.states; k += 1) {\n          likelihoodVector[modelIndex] += model.second.alpha[k] +\n            model.second.alpha1[k] +\n            model.second.alpha2[k];\n        }\n        modelIndex += 1;\n      });\n    } else {\n      // Likelihood for exit state \"exitNum\"\n      let modelIndex = 0;\n      Object.keys(this.models).sort().forEach((label) => {\n        const model = this.models[label];\n        likelihoodVector[modelIndex] = 0;\n        let { alpha } = model;\n        if (exitNum === 1) {\n          alpha = model.alpha1;\n        }\n        if (exitNum === 2) {\n          alpha = model.alpha2;\n        }\n        for (let k = 0; k < model.params.states; k += 1) {\n          likelihoodVector[modelIndex] += alpha[k];\n        }\n        modelIndex += 1;\n      });\n    }\n    return likelihoodVector;\n  },\n};\n\n/**\n * Add Hierarchical HMM prediction capabilities to a multi-class model.\n *\n * @todo algorithmic details\n * @todo validate parameters\n * @todo validate gaussian components\n *\n * @param  {MulticlassBaseModel} o Source Model\n * @return {HierarchicalHMM}\n *\n * @extends withMulticlassPrediction\n *\n * @throws {Error} is o is not a ModelBase\n */\nexport default function withHierarchicalHMMPrediction(o) {\n  if (!isBaseModel(o)) {\n    throw new Error('The base object must include a standard set of parameters (`params` key), @see `ModelBase`.');\n  }\n  // validateParameters(\n  //   'Hierarchical HMM',\n  //   hierarchicalHmmParameterSpec(o.params.states, o.params.transitionMode),\n  //   o.params,\n  // );\n  return Object.assign(\n    o,\n    hierarchicalHmmPredictionPrototype,\n    {\n      // alpha: new Array(o.params.states).fill(0),\n      // previous_alpha_: new Array(o.params.states).fill(0),\n    },\n  ).setup();\n}\n","import ModelBase from '../core/model_base_mixin';\nimport withEMTraining from '../core/em_training_mixin';\nimport withHMMBase from './hmm_base_mixin';\nimport withHMMTraining from './hmm_training_mixin';\nimport MulticlassModelBase from '../core/multiclass_mixin';\nimport withMulticlassTraining from '../core/multiclass_training_mixin';\nimport withAbtractPrediction from '../core/prediction_mixin';\nimport withHMMPrediction from './hmm_prediction_mixin';\nimport withMulticlassPrediction from '../core/multiclass_prediction_mixin';\nimport withHierarchicalHMMPrediction from './hierarchical_hmm_prediction_mixin';\n\n/**\n * @typedef {Object} HMMParameters\n * @property {Boolean} bimodal Specifies if the model is bimodal\n * @property {Number} inputDimension Dimension of the input modality\n * @property {Number} outputDimension Dimension of the output modality\n * @property {Number} dimension Total dimension\n * @property {Number} states Number of hidden states in the Markov model\n * @property {Number} gaussians Number of components in the Gaussian mixture\n * observation distribution of each state\n * @property {String} transitionMode Transition matrix mode ('ergodic' or 'leftright')\n * @property {String} covarianceMode Covariance mode ('full' or 'diagonal')\n * @property {Array<Number>} mixtureCoeffs mixture coefficients ('weight' of\n * each gaussian component)\n * @property {Array<GaussianDistribution>} components Gaussian components\n */\n\n/**\n * Train a single-class HMM Model.\n *\n * @todo HMM details\n *\n * @param  {TrainingSet} trainingSet                training set\n * @param  {Object} configuration                   Training configuration\n * @param  {Object} [convergenceCriteria=undefined] Convergence criteria of the\n * EM algorithm\n * @return {HMMParameters} Parameters of the trained HMM\n */\nexport function trainHMM(\n  trainingSet,\n  configuration,\n  convergenceCriteria = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const {\n    states,\n    gaussians,\n    regularization,\n    transitionMode,\n    covarianceMode,\n  } = configuration;\n  const model = withHMMTraining(\n    withEMTraining(\n      withHMMBase(ModelBase({\n        inputDimension,\n        outputDimension,\n        ...configuration,\n      })),\n      convergenceCriteria,\n    ),\n    states,\n    gaussians,\n    regularization,\n    transitionMode,\n    covarianceMode,\n  );\n  return model.train(trainingSet);\n}\n\n/**\n * Train a multi-class HMM Model.\n *\n * @todo HMM details\n *\n * @param  {TrainingSet} trainingSet                training set\n * @param  {Object} configuration                   Training configuration\n * @param  {Object} [convergenceCriteria=undefined] Convergence criteria of the\n * EM algorithm\n * @return {Object} Parameters of the trained HMM\n */\nexport function trainMulticlassHMM(\n  trainingSet,\n  configuration,\n  convergenceCriteria = undefined,\n) {\n  const { inputDimension, outputDimension } = trainingSet;\n  const model = withMulticlassTraining(\n    MulticlassModelBase({ inputDimension, outputDimension, ...configuration }),\n    ts => trainHMM(ts, configuration, convergenceCriteria),\n  );\n  return model.train(trainingSet);\n}\n\n/**\n * Create a HMM Predictor from a full set of parameters (generated by trainHMM).\n * @param       {Object} params                       Model parameters\n * @param       {number} [likelihoodWindow=undefined] Likelihoow window size\n * @function\n */\nexport function HMMPredictor(\n  params,\n  likelihoodWindow = undefined,\n) {\n  const model = withHMMPrediction(withAbtractPrediction(\n    withHMMBase(ModelBase(params)),\n    likelihoodWindow,\n  ));\n  model.reset();\n  return model;\n}\n\n/**\n * Create a Multiclass HMM Predictor from a full set of parameters\n * (generated by trainMulticlassHMM).\n * @param       {Object} params                       Model parameters\n * @param       {number} [likelihoodWindow=undefined] Likelihoow window size\n * @function\n */\nexport function MulticlassHMMPredictor(\n  params,\n  likelihoodWindow = undefined,\n) {\n  const model = withMulticlassPrediction(MulticlassModelBase(params));\n  model.models = {};\n  Object.keys(params.classes).forEach((label) => {\n    model.models[label] = HMMPredictor(params.classes[label], likelihoodWindow);\n  });\n  model.reset();\n  return model;\n}\n\n/**\n * Create a Multiclass HMM Predictor from a full set of parameters\n * (generated by trainMulticlassHMM).\n * @param       {Object} params                       Model parameters\n * @param       {number} [likelihoodWindow=undefined] Likelihoow window size\n * @function\n */\nexport function HierarchicalHMMPredictor(\n  params,\n  likelihoodWindow = undefined,\n) {\n  let model = MulticlassModelBase(params);\n  model.models = {};\n  Object.keys(params.classes).forEach((label) => {\n    model.models[label] = HMMPredictor(params.classes[label], likelihoodWindow);\n  });\n  model = withHierarchicalHMMPrediction(withMulticlassPrediction(model));\n  model.reset();\n  return model;\n}\n"],"names":["phrasePrototype","index","dim","Math","floor","Error","dimension","bimodal","inputDimension","inputData","length","outputData","concat","observation","push","slice","size","trim","outputDimension","mean","Array","fill","d","t","get","stddev","sqrt","minmax","from","min","Infinity","max","Phrase","Object","assign","create","columnNames","trainingSetPrototype","keys","phrases","phraseIndex","includes","toString","callback","forEach","label","undefined","phrase","p","filter","i","map","reduce","x","ts","TrainingSet","ll","sum","totalLength","ModelBase","parameters","isBaseModel","o","key","params","a","b","euclidean","v1","v2","x1","kMeansTrainingPrototype","trainingSet","empty","centers","clusters","trainingConfig","initialization","initializeClustersRandom","initializeClustersForgy","initClustersWithFirstPhrase","trainingNbIterations","maxIterations","previousCenters","updateCenters","meanClusterDistance","maxRelativeCenterVariation","k","l","relativeDistanceThreshold","getPhrase","indices","step","offset","c","random","pointsPerCluster","ppc","clustIdx","_","getFrame","numFramesPerCluster","frame","minDistance","clusterMembership","distance","withKMeansTraining","trainingConfiguration","model","trainKmeans","train","kEpsilonPseudoInverse","matrixPrototype","data","out","Matrix","ncols","nrows","j","mat","gaussJordanInverse","transp","transpose","prod","product","determinant","matrix","dst","newMat","n","abs","swapLines","ii","tmp","nc","baseGaussianPrototype","covarianceMode","covariance","inverseCovariance","allocateBimodal","covarianceDeterminant","inputLikelihood","euclideanDistance","exp","PI","Number","isNaN","regularization","covMatrix","inv","pinv","updateInverseCovarianceBimodal","dimension1","dimension2","gaussianEllipse","y","trace","eigenVal1","eigenVal2","width","height","angle","atan","tantheta","tan","updateInverseCovariance","bimodalGaussianPrototype","inverseCovarianceInput","inputObservation","covarianceDeterminantInput","prediction","e","f","covMatrixInput","d1","d2","invInput","updateOutputCovariance","outputCovariance","covarianceGS","covarianceSG","tmptmptmp","covarianceMod","GaussianDistribution","proto","dist","allocate","trainerPrototype","initTraining","logLikelihood","iterations","previousLogLikelihood","converged","updateTraining","pctChg","terminateTraining","iteration","logProb","previousLogProb","convergenceCriteria","minIterations","percentChange","withEMTraining","gmmBasePrototype","components","gaussians","mixtureCoeffs","beta","likelihood","componentLikelihood","mixtureComponent","normConst","regularize","currentRegularization","gmmBimodalPrototype","results","outputValues","tmpOutputValues","regression","withGMMBase","gmmTrainerPrototype","initParametersToDefault","standardDeviation","initMeansWithKMeans","initCovariances","updateInverseCovariances","dataStddev","normCoeffs","std","absolute","relative","kmeans","kmeansParams","gmeans","factor","phraseIndices","E","tbase","log","pix","value","withGMMTraining","MulticlassBasePrototype","models","MulticlassModelBase","withMulticlassTraining","trainingFunction","labels","classes","labs","getPhrasesOfClass","circularBufferPrototype","full","buffer","capacity","idx","CircularBuffer","clear","predictionBasePrototype","lw","likelihoodWindow","likelihoodBuffer","updateResults","instantLikelihood","bufSize","withAbtractPrediction","checkSpec","parameter","specification","constructor","validateParameters","values","attr","spec","required","check","transform","gmmParameterSpec","m","withGMMPrediction","MulticlassPredictionBasePrototype","setLikelihoodWindow","reset","resetBimodal","predict","sort","normInstant","normSmoothed","maxLogLikelihood","lab","instantLikelihoods","smoothedLogLikelihoods","smoothedLikelihoods","likeliest","smoothedNormalizedLikelihoods","instantNormalizedLikelihoods","updateRegressionResults","MulticlassPredictionBimodalPrototype","multiClassRegressionEstimator","configuration","withMulticlassPrediction","trainGMM","trainMulticlassGMM","GMMPredictor","MulticlassGMMPredictor","hmmBasePrototype","transitionMode","states","alpha","prior","xStates","forwardInitialized","previousAlpha","transition","withHMMBase","TRANSITION_REGULARIZATION","hmmTrainerPrototype","initMeansCovariancesWithGMMEM","initMeansWithAllPhrases","initCovariancesFullyObserved","s","previousBeta","nbPhrases","gammaSequence","epsilonSequence","gammaSequenceperMixture","T","gammaSum","gammaSumPerMixture","baumWelchForwardBackward","baumWelchGammaSum","baumWelchEstimateMixtureCoefficients","baumWelchEstimateMeans","baumWelchEstimateCovariances","baumWelchEstimatePrior","baumWelchEstimateTransitions","normalizeTransitions","alphaSeq","betaSeq","setErgodic","setLeftRight","initCovariance","othermeans","gmmParams","normPrior","transitionNorm","ct","observationLikelihoods","currentPhrase","observationProbabilities","initializeForwardAlgorithm","baumWelchForwardUpdate","initializeBackwardAlgorithm","baumWelchBackwardUpdate","reverse","oo","normalizeMixtureCoeffs","sumprior","withHMMTraining","hmmParameterSpec","hmmPredictionPrototype","updateForwardAlgorithm","updateAlphaWindow","updateProgress","progress","windowMinindex","windowMaxindex","isHierarchical","alpha1","alpha2","windowNormalizationConstant","likeliestState","bestAlpha","hmmBimodalPredictionPrototype","regressionEstimator","clipMinState","clipMaxState","normalizationConstant","tmpPredictedOutput","withHMMPrediction","setup","DEFAULT_EXITPROBABILITY_LAST_STATE","hierarchicalHmmPredictionPrototype","numClasses","exitTransition","updateExitProbabilities","exitProbabilities","exitProb","modelIndex","second","N","frontierV1","frontierV2","likelihoodAlpha","dstModelIndex","dstModel","front","srcModelIndex","exitLikelihood","exitRatio","exitNum","likelihoodVector","withHierarchicalHMMPrediction","trainHMM","trainMulticlassHMM","HMMPredictor","MulticlassHMMPredictor","HierarchicalHMMPredictor"],"mappings":"AAAA;;;;AAIA,MAAMA,sCAAuC;;;;;;;MAOvCC,KAAJ,EAAWC,GAAX,EAAgB;QACV,OAAOD,KAAP,KAAiB,QAAjB,IAA6BE,KAAKC,KAAL,CAAWH,KAAX,MAAsBA,KAAvD,EAA8D;YACtD,IAAII,KAAJ,CAAU,8BAAV,CAAN;;QAEEH,OAAO,KAAKI,SAAhB,EAA2B;YACnB,IAAID,KAAJ,CAAU,iCAAV,CAAN;;QAEE,KAAKE,OAAT,EAAkB;UACZL,MAAM,KAAKM,cAAf,EAA+B;YACzBP,SAAS,KAAKQ,SAAL,CAAeC,MAA5B,EAAoC;gBAC5B,IAAIL,KAAJ,CAAU,6BAAV,CAAN;;eAEK,KAAKI,SAAL,CAAeR,KAAf,EAAsBC,GAAtB,CAAP;;UAEED,SAAS,KAAKU,UAAL,CAAgBD,MAA7B,EAAqC;cAC7B,IAAIL,KAAJ,CAAU,6BAAV,CAAN;;aAEK,KAAKM,UAAL,CAAgBV,KAAhB,EAAuBC,MAAM,KAAKM,cAAlC,CAAP;;QAEEP,SAAS,KAAKS,MAAlB,EAA0B;YAClB,IAAIL,KAAJ,CAAU,6BAAV,CAAN;;QAEE,CAAC,KAAKI,SAAL,CAAeR,KAAf,CAAL,EAA4B;YACpB,IAAII,KAAJ,CAAU,MAAV,CAAN;;WAEK,KAAKI,SAAL,CAAeR,KAAf,EAAsBC,GAAtB,CAAP;GAhCyC;;;;;;;;WAyClCD,KAAT,EAAgB;QACVA,SAAS,KAAKS,MAAlB,EAA0B;YAClB,IAAIL,KAAJ,CAAU,6BAAV,CAAN;;QAEE,KAAKE,OAAT,EAAkB;aACT,KAAKE,SAAL,CAAeR,KAAf,EAAsBW,MAAtB,CAA6B,KAAKD,UAAL,CAAgBV,KAAhB,CAA7B,CAAP;;WAEK,KAAKQ,SAAL,CAAeR,KAAf,CAAP;GAhDyC;;;;;;;;OAyDtCY,WAAL,EAAkB;;QAEZA,YAAYH,MAAZ,KAAuB,KAAKJ,SAAhC,EAA2C;YACnC,IAAID,KAAJ,CAAU,iCAAV,CAAN;;;QAGE,KAAKE,OAAT,EAAkB;WACXE,SAAL,CAAeK,IAAf,CAAoBD,YAAYE,KAAZ,CAAkB,CAAlB,EAAqB,KAAKP,cAA1B,CAApB;WACKG,UAAL,CAAgBG,IAAhB,CAAqBD,YAAYE,KAAZ,CAAkB,KAAKP,cAAvB,EAAuC,KAAKF,SAA5C,CAArB;KAFF,MAGO;WACAG,SAAL,CAAeK,IAAf,CAAoBD,WAApB;;;SAGGH,MAAL,IAAe,CAAf;GAtEyC;;;;;;;;;YAgFjCG,WAAV,EAAuB;QACjB,CAAC,KAAKN,OAAV,EAAmB;YACX,IAAIF,KAAJ,CAAU,qCAAV,CAAN;;QAEEQ,YAAYG,IAAZ,OAAuB,KAAKR,cAAhC,EAAgD;YACxC,IAAIH,KAAJ,CAAU,iCAAV,CAAN;;;SAGGI,SAAL,CAAeK,IAAf,CAAoBD,WAApB;SACKI,IAAL;GAzFyC;;;;;;;;;aAmGhCJ,WAAX,EAAwB;QAClB,CAAC,KAAKN,OAAV,EAAmB;YACX,IAAIF,KAAJ,CAAU,qCAAV,CAAN;;QAEEQ,YAAYG,IAAZ,OAAuB,KAAKE,eAAhC,EAAiD;YACzC,IAAIb,KAAJ,CAAU,iCAAV,CAAN;;;SAGGM,UAAL,CAAgBG,IAAhB,CAAqBD,WAArB;SACKI,IAAL;GA5GyC;;;;;UAkHnC;SACDP,MAAL,GAAc,CAAd;SACKD,SAAL,GAAiB,EAAjB;SACKE,UAAL,GAAkB,EAAlB;GArHyC;;;;;eA2H9B;SACNF,SAAL,GAAiB,EAAjB;SACKQ,IAAL;GA7HyC;;;;;gBAmI7B;SACPN,UAAL,GAAkB,EAAlB;SACKM,IAAL;GArIyC;;;;;;;SA6IpC;UACCE,OAAOC,MAAM,KAAKd,SAAX,EAAsBe,IAAtB,CAA2B,CAA3B,CAAb;SACK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,SAAzB,EAAoCgB,KAAK,CAAzC,EAA4C;WACrC,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKb,MAAzB,EAAiCa,KAAK,CAAtC,EAAyC;aAClCD,CAAL,KAAW,KAAKE,GAAL,CAASD,CAAT,EAAYD,CAAZ,CAAX;;WAEGA,CAAL,KAAW,KAAKZ,MAAhB;;WAEKS,IAAP;GArJyC;;;;;;;sBA6JvB;UACZM,SAASL,MAAM,KAAKd,SAAX,EAAsBe,IAAtB,CAA2B,CAA3B,CAAf;UACMF,OAAO,KAAKA,IAAL,EAAb;SACK,IAAIG,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,SAAzB,EAAoCgB,KAAK,CAAzC,EAA4C;WACrC,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKb,MAAzB,EAAiCa,KAAK,CAAtC,EAAyC;eAChCD,CAAP,KAAa,CAAC,KAAKE,GAAL,CAASD,CAAT,EAAYD,CAAZ,IAAiBH,KAAKG,CAAL,CAAlB,KAA8B,KAAKE,GAAL,CAASD,CAAT,EAAYD,CAAZ,IAAiBH,KAAKG,CAAL,CAA/C,CAAb;;aAEKA,CAAP,KAAa,KAAKZ,MAAlB;aACOY,CAAP,IAAYnB,KAAKuB,IAAL,CAAUD,OAAOH,CAAP,CAAV,CAAZ;;WAEKG,MAAP;GAvKyC;;;;;;;WA+KlC;UACDE,SAASP,MAAMQ,IAAN,CACbR,MAAM,KAAKd,SAAX,CADa,EAEb,OAAO,EAAEuB,KAAK,CAACC,QAAR,EAAkBC,KAAK,CAACD,QAAxB,EAAP,CAFa,CAAf;SAIK,IAAIR,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,SAAzB,EAAoCgB,KAAK,CAAzC,EAA4C;WACrC,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKb,MAAzB,EAAiCa,KAAK,CAAtC,EAAyC;eAChCD,CAAP,EAAUO,GAAV,GAAgB1B,KAAK0B,GAAL,CAAS,KAAKL,GAAL,CAASD,CAAT,EAAYD,CAAZ,CAAT,EAAyBK,OAAOL,CAAP,EAAUO,GAAnC,CAAhB;eACOP,CAAP,EAAUS,GAAV,GAAgB5B,KAAK4B,GAAL,CAAS,KAAKP,GAAL,CAASD,CAAT,EAAYD,CAAZ,CAAT,EAAyBK,OAAOL,CAAP,EAAUS,GAAnC,CAAhB;;;WAGGJ,MAAP;GA1LyC;;;;;;SAiMpC;QACD,KAAKpB,OAAT,EAAkB;WACXG,MAAL,GAAcP,KAAK0B,GAAL,CAAS,KAAKpB,SAAL,CAAeC,MAAxB,EAAgC,KAAKC,UAAL,CAAgBD,MAAhD,CAAd;;;CAnMN;;;;;;;;;;;;;;;;;;;;;;;;AA8NA,AAAe,SAASsB,MAAT,CAAgB;mBACZ,CADY;oBAEX,CAFW;gBAGf,IAHe;UAIrB;IACN,EALW,EAKP;QACA1B,YAAYE,iBAAiBU,eAAnC;SACOe,OAAOC,MAAP,CACLD,OAAOE,MAAP,CAAcnC,eAAd,CADK,EAEL;aACWkB,kBAAkB,CAD7B;kBAAA;mBAAA;aAAA;YAKU,CALV;SAAA;eAOa,EAPb;gBAQc,EARd;iBASekB,eAAehB,MAAMd,SAAN,EAAiBe,IAAjB,CAAsB,EAAtB;GAXzB,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvOF;;;;AAIA,MAAMgB,gDAAiD;;;;;SAK9C;WACEJ,OAAOK,IAAP,CAAY,KAAKC,OAAjB,EAA0B7B,MAAjC;GANmD;;;;;;UAa7C;WACC,KAAKA,MAAL,KAAgB,CAAvB;GAdmD;;;;;;;YAsB3C8B,WAAV,EAAuB;QACjBP,OAAOK,IAAP,CAAY,KAAKC,OAAjB,EAA0BE,QAA1B,CAAmCD,YAAYE,QAAZ,EAAnC,CAAJ,EAAgE;aACvD,KAAKH,OAAL,CAAaC,YAAYE,QAAZ,EAAb,CAAP;;WAEK,IAAP;GA1BmD;;;;;;;;;UAoC7CC,QAAR,EAAkB;WACTL,IAAP,CAAY,KAAKC,OAAjB,EAA0BK,OAA1B,CAAmCJ,WAAD,IAAiB;eACxC,KAAKD,OAAL,CAAaC,WAAb,CAAT,EAAoCA,WAApC,EAAiD,KAAKD,OAAtD;KADF;GArCmD;;;;;;;;;;OAkDhDC,WAAL,EAAkBK,QAAQC,SAA1B,EAAqCC,SAASD,SAA9C,EAAyD;UACjDE,IAAKD,WAAWD,SAAZ,GAAyBC,MAAzB,GAAkCf,OAAO;sBACjC,KAAKxB,cAD4B;uBAEhC,KAAKU,eAF2B;mBAGpC,KAAKkB,WAH+B;aAIzCS,UAAUC,SAAX,GAAwBD,KAAxB,GAAgCL,YAAYE,QAAZ;KAJG,CAA5C;SAMKH,OAAL,CAAaC,WAAb,IAA4BQ,CAA5B;WACOA,CAAP;GA1DmD;;;;;;SAiE9CR,WAAP,EAAoB;WACX,KAAKD,OAAL,CAAaC,WAAb,CAAP;GAlEmD;;;;;;cAyEzCK,KAAZ,EAAmB;SACZN,OAAL,GAAeN,OAAOK,IAAP,CAAY,KAAKC,OAAjB,EACZU,MADY,CACLC,KAAK,KAAKX,OAAL,CAAaW,CAAb,EAAgBL,KAAhB,KAA0BA,KAD1B,EAEZM,GAFY,CAERD,MAAM,EAAEA,GAAG,KAAKX,OAAL,CAAaW,CAAb,CAAL,EAAN,CAFQ,EAGZE,MAHY,CAGL,CAACC,CAAD,EAAIL,CAAJ,kBAAgBK,CAAhB,EAAsBL,CAAtB,CAHK,EAGuB,EAHvB,CAAf;GA1EmD;;;;;UAmF7C;SACDT,OAAL,GAAe,EAAf;GApFmD;;;;;;;oBA4FnCM,KAAlB,EAAyB;UACjBS,KAAKC,YAAY,IAAZ,CAAX,CADuB;OAEpBhB,OAAH,GAAaN,OAAOK,IAAP,CAAY,KAAKC,OAAjB,EACVU,MADU,CACHC,KAAK,KAAKX,OAAL,CAAaW,CAAb,EAAgBL,KAAhB,KAA0BA,KAD5B,EAEVM,GAFU,CAEND,MAAM,EAAEA,GAAG,KAAKX,OAAL,CAAaW,CAAb,CAAL,EAAN,CAFM,EAGVE,MAHU,CAGH,CAACC,CAAD,EAAIL,CAAJ,kBAAgBK,CAAhB,EAAsBL,CAAtB,CAHG,EAGyB,EAHzB,CAAb;WAIOM,EAAP;GAlGmD;;;;;;WAyG5C;WACArB,OAAOK,IAAP,CAAY,KAAKC,OAAjB,EACJY,GADI,CACAD,KAAK,KAAKX,OAAL,CAAaW,CAAb,EAAgBL,KADrB,EAEJO,MAFI,CAEG,CAACI,EAAD,EAAKH,CAAL,KAAYG,GAAGf,QAAH,CAAYY,CAAZ,IAAiBG,EAAjB,GAAsBA,GAAG5C,MAAH,CAAU,CAACyC,CAAD,CAAV,CAFrC,EAEsD,EAFtD,CAAP;GA1GmD;;;;;;YAmH3C;WACDpB,OAAOK,IAAP,CAAY,KAAKC,OAAjB,CAAP;GApHmD;;;;;;SA2H9C;UACCkB,MAAMrC,MAAM,KAAKd,SAAX,EAAsBe,IAAtB,CAA2B,CAA3B,CAAZ;QACIqC,cAAc,CAAlB;WACOpB,IAAP,CAAY,KAAKC,OAAjB,EAA0BK,OAA1B,CAAmCM,CAAD,IAAO;WAClC,IAAI5B,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,SAAzB,EAAoCgB,KAAK,CAAzC,EAA4C;aACrC,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKgB,OAAL,CAAaW,CAAb,EAAgBxC,MAApC,EAA4Ca,KAAK,CAAjD,EAAoD;cAC9CD,CAAJ,KAAU,KAAKiB,OAAL,CAAaW,CAAb,EAAgB1B,GAAhB,CAAoBD,CAApB,EAAuBD,CAAvB,CAAV;;;qBAGW,KAAKiB,OAAL,CAAaW,CAAb,EAAgBxC,MAA/B;KANF;;WASO+C,IAAIN,GAAJ,CAAQE,KAAKA,IAAIK,WAAjB,CAAP;GAvImD;;;;;;sBA8IjC;UACZjC,SAASL,MAAM,KAAKd,SAAX,EAAsBe,IAAtB,CAA2B,CAA3B,CAAf;UACMF,OAAO,KAAKA,IAAL,EAAb;QACIuC,cAAc,CAAlB;WACOpB,IAAP,CAAY,KAAKC,OAAjB,EAA0BK,OAA1B,CAAmCM,CAAD,IAAO;WAClC,IAAI5B,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,SAAzB,EAAoCgB,KAAK,CAAzC,EAA4C;aACrC,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKgB,OAAL,CAAaW,CAAb,EAAgBxC,MAApC,EAA4Ca,KAAK,CAAjD,EAAoD;iBAC3CD,CAAP,KAAa,CAAC,KAAKiB,OAAL,CAAaW,CAAb,EAAgB1B,GAAhB,CAAoBD,CAApB,EAAuBD,CAAvB,IAA4BH,KAAKG,CAAL,CAA7B,KAAyC,CAAtD;;;qBAGW,KAAKiB,OAAL,CAAaW,CAAb,EAAgBxC,MAA/B;KANF;;WASOe,OAAO0B,GAAP,CAAWE,KAAKlD,KAAKuB,IAAL,CAAU2B,IAAIK,WAAd,CAAhB,CAAP;GA3JmD;;;;;;WAkK5C;UACD/B,SAASP,MAAMQ,IAAN,CACbR,MAAM,KAAKd,SAAX,CADa,EAEb,OAAO,EAAEuB,KAAK,CAACC,QAAR,EAAkBC,KAAK,CAACD,QAAxB,EAAP,CAFa,CAAf;WAIOQ,IAAP,CAAY,KAAKC,OAAjB,EAA0BK,OAA1B,CAAmCM,CAAD,IAAO;WAClC,IAAI5B,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,SAAzB,EAAoCgB,KAAK,CAAzC,EAA4C;aACrC,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKgB,OAAL,CAAaW,CAAb,EAAgBxC,MAApC,EAA4Ca,KAAK,CAAjD,EAAoD;iBAC3CD,CAAP,EAAUO,GAAV,IAAiB1B,KAAK0B,GAAL,CAASF,OAAOL,CAAP,EAAUO,GAAnB,EAAwB,KAAKU,OAAL,CAAaW,CAAb,EAAgB1B,GAAhB,CAAoBD,CAApB,EAAuBD,CAAvB,CAAxB,CAAjB;iBACOA,CAAP,EAAUS,GAAV,IAAiB5B,KAAK4B,GAAL,CAASJ,OAAOL,CAAP,EAAUS,GAAnB,EAAwB,KAAKQ,OAAL,CAAaW,CAAb,EAAgB1B,GAAhB,CAAoBD,CAApB,EAAuBD,CAAvB,CAAxB,CAAjB;;;KAJN;WAQOK,MAAP;;CA/KJ;;;;;;;;;;;;;;;;;;;AAoMA,AAAe,SAAS4B,WAAT,CAAqB;mBACjB,CADiB;oBAEhB,CAFgB;gBAGpB;IACZ,EAJW,EAIP;QACAjD,YAAYE,iBAAiBU,eAAnC;SACOe,OAAOC,MAAP,CACLD,OAAOE,MAAP,CAAcE,oBAAd,CADK,EAEL;aACWnB,kBAAkB,CAD7B;kBAAA;mBAAA;aAAA;iBAKekB,eAAehB,MAAMd,SAAN,EAAiBe,IAAjB,CAAsB,EAAtB,CAL9B;aAMW;GARN,CAAP;;;AChNF;;;;;;;;;AASA,AAAe,SAASsC,SAAT,OAIZ;MAJ+B;kBAAA;;GAI/B;MADEC,UACF;;QACKZ,IAAIY,UAAV;SACOZ,EAAEzC,OAAT;SACOyC,EAAExC,cAAT;SACOwC,EAAE9B,eAAT;SACO8B,EAAE1C,SAAT;iCAC8B;2BAEvB0C,CADL;YAEMzC,OAAJ,GAAc;iBACLW,kBAAkB,CAAzB;SAHJ;YAKMV,cAAJ,GAAqB;iBACZA,cAAP;SANJ;YAQMU,eAAJ,GAAsB;iBACbA,eAAP;SATJ;YAWMZ,SAAJ,GAAgB;iBACPE,iBAAiBU,eAAxB;;;;;;;;;;;;AAWR,AAAO,SAAS2C,WAAT,CAAqBC,CAArB,EAAwB;MACzB,CAAC7B,OAAOK,IAAP,CAAYwB,CAAZ,EAAerB,QAAf,CAAwB,QAAxB,CAAL,EAAwC,OAAO,KAAP;QAClCH,OAAO,CAAC,SAAD,EAAY,gBAAZ,EAA8B,iBAA9B,EAAiD,WAAjD,CAAb;SACOA,KAAKa,GAAL,CAASY,OAAO9B,OAAOK,IAAP,CAAYwB,EAAEE,MAAd,EAAsBvB,QAAtB,CAA+BsB,GAA/B,CAAhB,EACJX,MADI,CACG,CAACa,CAAD,EAAIC,CAAJ,KAAUD,KAAKC,CADlB,EACqB,IADrB,CAAP;;;AC9CF;;;;;;AAMA,AAAe,SAASC,SAAT,CAAmBC,EAAnB,EAAuBC,EAAvB,EAA2B;SACjClE,KAAKuB,IAAL,CAAU0C,GACdjB,GADc,CACV,CAACmB,EAAD,EAAKpB,CAAL,KAAW,CAACoB,KAAKD,GAAGnB,CAAH,CAAN,KAAgB,CADjB,EAEdE,MAFc,CAEP,CAACa,CAAD,EAAIZ,CAAJ,KAAWY,IAAIZ,CAFR,EAEY,CAFZ,CAAV,CAAP;;;ACJF,MAAMkB,0BAA0B;QACxBC,WAAN,EAAmB;QACb,CAACA,WAAD,IAAgBA,YAAYC,KAAZ,EAApB,EAAyC;YACjC,IAAIpE,KAAJ,CAAU,2BAAV,CAAN;;;SAGG2D,MAAL,CAAYU,OAAZ,GAAsBtD,MAAMQ,IAAN,CACpBR,MAAM,KAAK4C,MAAL,CAAYW,QAAlB,CADoB,EAEpB,MAAM,IAAIvD,KAAJ,CAAU,KAAK4C,MAAL,CAAY1D,SAAtB,EAAiCe,IAAjC,CAAsC,CAAtC,CAFc,CAAtB;;;;;QAQI,KAAKuD,cAAL,CAAoBC,cAApB,KAAuC,QAA3C,EAAqD;WAC9CC,wBAAL,CAA8BN,WAA9B;KADF,MAEO,IAAI,KAAKI,cAAL,CAAoBC,cAApB,KAAuC,OAA3C,EAAoD;WACpDE,uBAAL,CAA6BP,WAA7B;KADK,MAEA,IAAI,KAAKI,cAAL,CAAoBC,cAApB,KAAuC,MAA3C,EAAmD;WACnDG,2BAAL,CAAiCR,WAAjC;KADK,MAEA;YACC,IAAInE,KAAJ,CAAU,qEAAV,CAAN;;;SAIA,IAAI4E,uBAAuB,CAD7B,EAEEA,uBAAuB,KAAKL,cAAL,CAAoBM,aAF7C,EAGED,wBAAwB,CAH1B,EAIE;YACME,kBAAkB,KAAKnB,MAAL,CAAYU,OAApC;;WAEKU,aAAL,CAAmBD,eAAnB,EAAoCX,WAApC;;UAEIa,sBAAsB,CAA1B;UACIC,6BAA6B,CAAjC;WACK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKvB,MAAL,CAAYW,QAAhC,EAA0CY,KAAK,CAA/C,EAAkD;aAC3C,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKxB,MAAL,CAAYW,QAAhC,EAA0Ca,KAAK,CAA/C,EAAkD;cAC5CD,MAAMC,CAAV,EAAa;mCACYrB,UACrB,KAAKH,MAAL,CAAYU,OAAZ,CAAoBa,CAApB,CADqB,EAErB,KAAKvB,MAAL,CAAYU,OAAZ,CAAoBc,CAApB,CAFqB,CAAvB;;;qCAMyBrF,KAAK4B,GAAL,CAC3BoC,UACEgB,gBAAgBI,CAAhB,CADF,EAEE,KAAKvB,MAAL,CAAYU,OAAZ,CAAoBa,CAApB,CAFF,CAD2B,EAK3BD,0BAL2B,CAA7B;;6BAQqB,KAAKtB,MAAL,CAAYW,QAAZ,IAAwB,KAAKX,MAAL,CAAYW,QAAZ,GAAuB,CAA/C,CAAvB;oCAC8B,KAAKX,MAAL,CAAYW,QAA1C;oCAC8BU,mBAA9B;UACIC,6BAA6B,KAAKV,cAAL,CAAoBa,yBAArD,EAAgF;;WAE3E,KAAKzB,MAAZ;GAzD4B;;8BA4DFQ,WAA5B,EAAyC;UACjCzB,SAASyB,YAAYkB,SAAZ,CAAsBlB,YAAYmB,OAAZ,GAAsB,CAAtB,CAAtB,CAAf;UACMC,OAAOzF,KAAKC,KAAL,CAAW2C,OAAOrC,MAAP,GAAgB,KAAKsD,MAAL,CAAYW,QAAvC,CAAb;;QAEIkB,SAAS,CAAb;SACK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAYW,QAAhC,EAA0CmB,KAAK,CAA/C,EAAkD;WAC3C9B,MAAL,CAAYU,OAAZ,CAAoBoB,CAApB,IAAyB,IAAI1E,KAAJ,CAAU,KAAK4C,MAAL,CAAY1D,SAAtB,EAAiCe,IAAjC,CAAsC,CAAtC,CAAzB;WACK,IAAIE,IAAI,CAAb,EAAgBA,IAAIqE,IAApB,EAA0BrE,KAAK,CAA/B,EAAkC;aAC3B,IAAID,IAAI,CAAb,EAAgBA,IAAI,KAAK0C,MAAL,CAAY1D,SAAhC,EAA2CgB,KAAK,CAAhD,EAAmD;eAC5C0C,MAAL,CAAYU,OAAZ,CAAoBoB,CAApB,EAAuBxE,CAAvB,KAA6ByB,OAAOvB,GAAP,CAAWqE,SAAStE,CAApB,EAAuBD,CAAvB,IAA4BsE,IAAzD;;;gBAGMA,IAAV;;GAxE0B;;2BA4ELpB,WAAzB,EAAsC;UAC9BzB,SAASyB,YAAYkB,SAAZ,CAAsBlB,YAAYmB,OAAZ,GAAsB,CAAtB,CAAtB,CAAf;UACMA,UAAUvE,MAAMQ,IAAN,CACdR,MAAM2B,OAAOrC,MAAb,CADc,EAEd,MAAMP,KAAKC,KAAL,CAAWD,KAAK4F,MAAL,KAAgB,KAAK/B,MAAL,CAAYW,QAAvC,CAFQ,CAAhB;UAIMqB,mBAAmBL,QAAQvC,MAAR,CACvB,CAAC6C,GAAD,EAAM/C,CAAN,KAAY;YACJF,IAAIiD,GAAV;QACE/C,CAAF,KAAQ,CAAR;aACOF,CAAP;KAJqB,EAMvB5B,MAAM,KAAK4C,MAAL,CAAYW,QAAlB,EAA4BtD,IAA5B,CAAiC,CAAjC,CANuB,CAAzB;SAQK,IAAI6B,IAAI,CAAb,EAAgBA,IAAIyC,QAAQjF,MAA5B,EAAoCwC,KAAK,CAAzC,EAA4C;YACpCgD,WAAWP,QAAQzC,CAAR,CAAjB;WACK,IAAI5B,IAAI,CAAb,EAAgBA,IAAI,KAAK0C,MAAL,CAAY1D,SAAhC,EAA2CgB,KAAK,CAAhD,EAAmD;aAC5C0C,MAAL,CAAYU,OAAZ,CAAoBwB,QAApB,EAA8B5E,CAA9B,KAAoCyB,OAAOvB,GAAP,CAAW0B,CAAX,EAAc5B,CAAd,CAApC;;;SAGC0C,MAAL,CAAYU,OAAZ,CAAoB9B,OAApB,CAA4B,CAACuD,CAAD,EAAIL,CAAJ,KAAU;WAC/B9B,MAAL,CAAYU,OAAZ,CAAoBoB,CAApB,IAAyB,KAAK9B,MAAL,CAAYU,OAAZ,CAAoBoB,CAApB,EACtB3C,GADsB,CAClBE,KAAKA,IAAI2C,iBAAiBF,CAAjB,CADS,CAAzB;KADF;GAhG4B;;0BAsGNtB,WAAxB,EAAqC;UAC7BzB,SAASyB,YAAYkB,SAAZ,CAAsBlB,YAAYmB,OAAZ,GAAsB,CAAtB,CAAtB,CAAf;UACMA,UAAUvE,MAAMQ,IAAN,CACdR,MAAM,KAAK4C,MAAL,CAAYW,QAAlB,CADc,EAEd,MAAMxE,KAAKC,KAAL,CAAWD,KAAK4F,MAAL,KAAgBhD,OAAOrC,MAAlC,CAFQ,CAAhB;SAIKsD,MAAL,CAAYU,OAAZ,GAAsBiB,QAAQxC,GAAR,CAAYD,KAAKH,OAAOqD,QAAP,CAAgBlD,CAAhB,CAAjB,CAAtB;GA5G4B;;gBA+GhBiC,eAAd,EAA+BX,WAA/B,EAA4C;SACrCR,MAAL,CAAYU,OAAZ,GAAsBtD,MAAMQ,IAAN,CAAWR,MAAM,KAAK4C,MAAL,CAAYW,QAAlB,CAAX,EAAwC,MAC5D,IAAIvD,KAAJ,CAAU,KAAK4C,MAAL,CAAY1D,SAAtB,EAAiCe,IAAjC,CAAsC,CAAtC,CADoB,CAAtB;UAEMgF,sBAAsBjF,MAAM,KAAK4C,MAAL,CAAYW,QAAlB,EAA4BtD,IAA5B,CAAiC,CAAjC,CAA5B;gBACYuB,OAAZ,CAAqBG,MAAD,IAAY;WACzB,IAAIxB,IAAI,CAAb,EAAgBA,IAAIwB,OAAOrC,MAA3B,EAAmCa,KAAK,CAAxC,EAA2C;cACnC+E,QAAQvD,OAAOqD,QAAP,CAAgB7E,CAAhB,CAAd;YACIgF,cAAcpC,UAAUmC,KAAV,EAAiBnB,gBAAgB,CAAhB,CAAjB,CAAlB;YACIqB,oBAAoB,CAAxB;aACK,IAAIjB,IAAI,CAAb,EAAgBA,IAAI,KAAKvB,MAAL,CAAYW,QAAhC,EAA0CY,KAAK,CAA/C,EAAkD;gBAC1CkB,WAAWtC,UACfmC,KADe,EAEfnB,gBAAgBI,CAAhB,CAFe,EAGf,KAAKvB,MAAL,CAAY1D,SAHG,CAAjB;cAKImG,WAAWF,WAAf,EAA4B;gCACNhB,CAApB;0BACckB,QAAd;;;4BAGgBD,iBAApB,KAA0C,CAA1C;aACK,IAAIlF,IAAI,CAAb,EAAgBA,IAAI,KAAK0C,MAAL,CAAY1D,SAAhC,EAA2CgB,KAAK,CAAhD,EAAmD;eAC5C0C,MAAL,CAAYU,OAAZ,CAAoB8B,iBAApB,EAAuClF,CAAvC,KAA6CyB,OAAOvB,GAAP,CAAWD,CAAX,EAAcD,CAAd,CAA7C;;;KAlBN;SAsBK,IAAIiE,IAAI,CAAb,EAAgBA,IAAI,KAAKvB,MAAL,CAAYW,QAAhC,EAA0CY,KAAK,CAA/C,EAAkD;UAC5Cc,oBAAoBd,CAApB,IAAyB,CAA7B,EAAgC;aACzB,IAAIjE,IAAI,CAAb,EAAgBA,IAAI,KAAK0C,MAAL,CAAY1D,SAAhC,EAA2CgB,KAAK,CAAhD,EAAmD;eAC5C0C,MAAL,CAAYU,OAAZ,CAAoBa,CAApB,EAAuBjE,CAAvB,KAA6B+E,oBAAoBd,CAApB,CAA7B;;;;;CA5IV;;AAmJA,AAAe,SAASmB,kBAAT,CACb5C,CADa,EAEba,QAFa,EAGbgC,wBAAwB,EAHX,EAIb;MACI,CAAC9C,YAAYC,CAAZ,CAAL,EAAqB;UACb,IAAIzD,KAAJ,CAAU,6FAAV,CAAN;;QAEIuE,iBAAiB3C,OAAOC,MAAP,CAAc;oBACnB,QADmB;+BAER,IAFQ;mBAGpB,CAHoB;mBAIpB;GAJM,EAKpByE,qBALoB,CAAvB;QAMMC,QAAQ3E,OAAOC,MAAP,CAAc4B,CAAd,EAAiBS,uBAAjB,EAA0C;;GAA1C,CAAd;QAGMP,MAAN,CAAaW,QAAb,GAAwBA,QAAxB;SACOiC,KAAP;;;ACrKF;;;;;;;;;;AAUA,AAAe,SAASC,WAAT,CACbrC,WADa,EAEbG,QAFa,EAGbC,iBAAiB9B,SAHJ,EAIb;QACM,EAAEtC,cAAF,EAAkBU,eAAlB,KAAsCsD,WAA5C;QACMoC,QAAQF,mBACZ/C,UAAU;kBAAA;;GAAV,CADY,EAKZgB,QALY,EAMZC,cANY,CAAd;SAQOgC,MAAME,KAAN,CAAYtC,WAAZ,CAAP;;;AC3BF;AACA,MAAMuC,wBAAwB,MAA9B;;;;;;;;;;;AAWA,MAAMC,sCAAuC;;;;;QAKrC;WACG,KAAKC,IAAL,CAAU7D,MAAV,CAAiB,CAACa,CAAD,EAAIC,CAAJ,KAAUD,IAAIC,CAA/B,EAAkC,CAAlC,CAAP;GANyC;;;;;;cAa/B;UACJgD,MAAMC,OAAO,KAAKC,KAAZ,EAAmB,KAAKC,KAAxB,CAAZ;SACK,IAAInE,IAAI,CAAb,EAAgBA,IAAI,KAAKkE,KAAzB,EAAgClE,KAAK,CAArC,EAAwC;WACjC,IAAIoE,IAAI,CAAb,EAAgBA,IAAI,KAAKD,KAAzB,EAAgCC,KAAK,CAArC,EAAwC;YAClCL,IAAJ,CAAU/D,IAAI,KAAKmE,KAAV,GAAmBC,CAA5B,IAAiC,KAAKL,IAAL,CAAWK,IAAI,KAAKF,KAAV,GAAmBlE,CAA7B,CAAjC;;;WAGGgE,GAAP;GApByC;;;;;;;UA4BnCK,GAAR,EAAa;QACP,KAAKH,KAAL,KAAeG,IAAIF,KAAvB,EAA8B;YACtB,IAAIhH,KAAJ,CAAU,qCAAV,CAAN;;UAEI6G,MAAMC,OAAO,KAAKE,KAAZ,EAAmBE,IAAIH,KAAvB,CAAZ;SACK,IAAIlE,IAAI,CAAb,EAAgBA,IAAI,KAAKmE,KAAzB,EAAgCnE,KAAK,CAArC,EAAwC;WACjC,IAAIoE,IAAI,CAAb,EAAgBA,IAAIC,IAAIH,KAAxB,EAA+BE,KAAK,CAApC,EAAuC;YACjCL,IAAJ,CAAU/D,IAAIqE,IAAIH,KAAT,GAAkBE,CAA3B,IAAgC,CAAhC;aACK,IAAI/B,IAAI,CAAb,EAAgBA,IAAI,KAAK6B,KAAzB,EAAgC7B,KAAK,CAArC,EAAwC;cAClC0B,IAAJ,CAAU/D,IAAIqE,IAAIH,KAAT,GAAkBE,CAA3B,KACE,KAAKL,IAAL,CAAW/D,IAAI,KAAKkE,KAAV,GAAmB7B,CAA7B,IAAkCgC,IAAIN,IAAJ,CAAU1B,IAAIgC,IAAIH,KAAT,GAAkBE,CAA3B,CADpC;;;;WAKCJ,GAAP;GA1CyC;;;;;;;SAkDpC;QACD,KAAKG,KAAL,KAAe,KAAKD,KAAxB,EAA+B;aACtB,KAAKI,kBAAL,EAAP;;;UAGIC,SAAS,KAAKC,SAAL,EAAf;QACI,KAAKL,KAAL,IAAc,KAAKD,KAAvB,EAA8B;YACtBO,OAAOF,OAAOG,OAAP,CAAe,IAAf,CAAb;YACM,EAAEC,WAAF,EAAeC,QAAQC,GAAvB,KAA+BJ,KAAKH,kBAAL,EAArC;aACO,EAAEK,WAAF,EAAeC,QAAQC,IAAIH,OAAJ,CAAYH,MAAZ,CAAvB,EAAP;;UAEIE,OAAO,KAAKC,OAAL,CAAaH,MAAb,CAAb;UACM,EAAEI,WAAF,EAAeC,QAAQC,GAAvB,KAA+BJ,KAAKH,kBAAL,EAArC;WACO,EAAEK,WAAF,EAAeC,QAAQL,OAAOG,OAAP,CAAeG,GAAf,CAAvB,EAAP;GA/DyC;;;;;;;uBAuEtB;QACf,KAAKV,KAAL,KAAe,KAAKD,KAAxB,EAA+B;YACvB,IAAI/G,KAAJ,CAAU,yDAAV,CAAN;;QAEEwH,cAAc,CAAlB;UACMN,MAAMJ,OAAO,KAAKE,KAAZ,EAAmB,KAAKD,KAAL,GAAa,CAAhC,CAAZ;UACMY,SAASb,OAAO,KAAKE,KAAZ,EAAmB,KAAKD,KAAL,GAAa,CAAhC,CAAf;UACMa,IAAI,KAAKZ,KAAf;;;SAGK,IAAInE,IAAI,CAAb,EAAgBA,IAAI+E,CAApB,EAAuB/E,KAAK,CAA5B,EAA+B;WACxB,IAAIoE,IAAI,CAAb,EAAgBA,IAAIW,CAApB,EAAuBX,KAAK,CAA5B,EAA+B;YACzBL,IAAJ,CAAU/D,IAAI,CAAJ,GAAQ+E,CAAT,GAAcX,CAAvB,IAA4B,KAAKL,IAAL,CAAW/D,IAAI+E,CAAL,GAAUX,CAApB,CAA5B;;UAEEL,IAAJ,CAAU/D,IAAI,CAAJ,GAAQ+E,CAAT,GAAcA,CAAd,GAAkB/E,CAA3B,IAAgC,CAAhC;;;SAGG,IAAIqC,IAAI,CAAb,EAAgBA,IAAI0C,CAApB,EAAuB1C,KAAK,CAA5B,EAA+B;UACzBrC,IAAIqC,CAAR;aACOpF,KAAK+H,GAAL,CAASX,IAAIN,IAAJ,CAAU/D,IAAI,CAAJ,GAAQ+E,CAAT,GAAc1C,CAAvB,CAAT,IAAsCwB,qBAA7C,EAAoE;aAC7D,CAAL;YACI7D,MAAM+E,CAAV,EAAa;gBACL,IAAI5H,KAAJ,CAAU,uBAAV,CAAN;;;qBAGWkH,IAAIN,IAAJ,CAAU/D,IAAI,CAAJ,GAAQ+E,CAAT,GAAc1C,CAAvB,CAAf;;;UAGIrC,MAAMqC,CAAV,EAAa;YACP4C,SAAJ,CAAcjF,CAAd,EAAiBqC,CAAjB;;;aAGK0B,IAAP,GAAcM,IAAIN,IAAJ,CAASlG,KAAT,EAAd;;WAEK,IAAIuG,IAAI,CAAb,EAAgBA,IAAI,IAAIW,CAAxB,EAA2BX,KAAK,CAAhC,EAAmC;eAC1BL,IAAP,CAAa1B,IAAI,CAAJ,GAAQ0C,CAAT,GAAcX,CAA1B,KAAgCC,IAAIN,IAAJ,CAAU1B,IAAI,CAAJ,GAAQ0C,CAAT,GAAc1C,CAAvB,CAAhC;;WAEG,IAAI6C,KAAK,CAAd,EAAiBA,KAAKH,CAAtB,EAAyBG,MAAM,CAA/B,EAAkC;YAC5BA,OAAO7C,CAAX,EAAc;eACP,IAAI+B,IAAI,CAAb,EAAgBA,IAAI,IAAIW,CAAxB,EAA2BX,KAAK,CAAhC,EAAmC;mBAC1BL,IAAP,CAAamB,KAAK,CAAL,GAASH,CAAV,GAAeX,CAA3B,KACIC,IAAIN,IAAJ,CAAUmB,KAAK,CAAL,GAASH,CAAV,GAAe1C,CAAxB,IACAyC,OAAOf,IAAP,CAAa1B,IAAI,CAAJ,GAAQ0C,CAAT,GAAcX,CAA1B,CAFJ;;;;UAMFL,IAAJ,GAAWe,OAAOf,IAAP,CAAYlG,KAAZ,EAAX;;;UAGIgH,MAAMZ,OAAO,KAAKE,KAAZ,EAAmB,KAAKD,KAAxB,CAAZ;SACK,IAAIlE,IAAI,CAAb,EAAgBA,IAAI+E,CAApB,EAAuB/E,KAAK,CAA5B,EAA+B;WACxB,IAAIoE,IAAI,CAAb,EAAgBA,IAAIW,CAApB,EAAuBX,KAAK,CAA5B,EAA+B;YACzBL,IAAJ,CAAU/D,IAAI+E,CAAL,GAAUX,CAAnB,IAAwBC,IAAIN,IAAJ,CAAU/D,IAAI,CAAJ,GAAQ+E,CAAT,GAAcA,CAAd,GAAkBX,CAA3B,CAAxB;;;WAGG,EAAEO,WAAF,EAAeC,QAAQC,GAAvB,EAAP;GA9HyC;;;;;;;;YAuIjC7E,CAAV,EAAaoE,CAAb,EAAgB;SACT,IAAI/B,IAAI,CAAb,EAAgBA,IAAI,KAAK6B,KAAzB,EAAgC7B,KAAK,CAArC,EAAwC;YAChC8C,MAAM,KAAKpB,IAAL,CAAW/D,IAAI,KAAKkE,KAAV,GAAmB7B,CAA7B,CAAZ;WACK0B,IAAL,CAAW/D,IAAI,KAAKkE,KAAV,GAAmB7B,CAA7B,IAAkC,KAAK0B,IAAL,CAAWK,IAAI,KAAKF,KAAV,GAAmB7B,CAA7B,CAAlC;WACK0B,IAAL,CAAWK,IAAI,KAAKF,KAAV,GAAmB7B,CAA7B,IAAkC8C,GAAlC;;GA3IuC;;;;;;;;cAqJ/BnF,CAAZ,EAAeoE,CAAf,EAAkB;SACX,IAAI/B,IAAI,CAAb,EAAgBA,IAAI,KAAK8B,KAAzB,EAAgC9B,KAAK,CAArC,EAAwC;YAChC8C,MAAM,KAAKpB,IAAL,CAAW1B,IAAI,KAAK6B,KAAV,GAAmBlE,CAA7B,CAAZ;WACK+D,IAAL,CAAW1B,IAAI,KAAK6B,KAAV,GAAmBlE,CAA7B,IAAkC,KAAK+D,IAAL,CAAW1B,IAAI,KAAK6B,KAAV,GAAmBE,CAA7B,CAAlC;WACKL,IAAL,CAAW1B,IAAI,KAAK6B,KAAV,GAAmBE,CAA7B,IAAkCe,GAAlC;;;CAzJN;;;;;;;;;;;;;;AA0KA,AAAe,SAASlB,MAAT,CAAgBE,QAAQ,CAAxB,EAA2BD,QAAQ,CAAC,CAApC,EAAuC;QAC9CkB,KAAKlB,QAAQ,CAAR,GAAYC,KAAZ,GAAoBD,KAA/B;SACOnF,OAAOC,MAAP,CACLD,OAAOE,MAAP,CAAc6E,eAAd,CADK;;SAEL;WAESsB,EAFT;UAGQlH,MAAMiG,QAAQiB,EAAd,EAAkBjH,IAAlB,CAAuB,CAAvB;GALH,CAAP;;;ACtLF;;;;;;;;;;;;;;;AAeA,MAAMkH,0DAA2D;;;;;aAKpD;SACJpH,IAAL,GAAY,IAAIC,KAAJ,CAAU,KAAKd,SAAf,EAA0Be,IAA1B,CAA+B,CAA/B,CAAZ;QACI,KAAKmH,cAAL,KAAwB,MAA5B,EAAoC;WAC7BC,UAAL,GAAkB,IAAIrH,KAAJ,CAAU,KAAKd,SAAL,IAAkB,CAA5B,EAA+Be,IAA/B,CAAoC,CAApC,CAAlB;WACKqH,iBAAL,GAAyB,IAAItH,KAAJ,CAAU,KAAKd,SAAL,IAAkB,CAA5B,EAA+Be,IAA/B,CAAoC,CAApC,CAAzB;KAFF,MAGO;WACAoH,UAAL,GAAkB,IAAIrH,KAAJ,CAAU,KAAKd,SAAf,EAA0Be,IAA1B,CAA+B,CAA/B,CAAlB;WACKqH,iBAAL,GAAyB,IAAItH,KAAJ,CAAU,KAAKd,SAAf,EAA0Be,IAA1B,CAA+B,CAA/B,CAAzB;;QAEE,KAAKd,OAAT,EAAkB;WACXoI,eAAL;;GAf2D;;;;;;;;;;;;aA6BpD9H,WAAX,EAAwB;QAClB,KAAK+H,qBAAL,KAA+B,CAAnC,EAAsC;YAC9B,IAAIvI,KAAJ,CAAU,qCAAV,CAAN;;QAEE,KAAKE,OAAL,IAAgBM,YAAYH,MAAZ,KAAuB,KAAKF,cAAhD,EAAgE;aACvD,KAAKqI,eAAL,CAAqBhI,WAArB,CAAP;;QAEEA,YAAYH,MAAZ,KAAuB,KAAKJ,SAAhC,EAA2C;YACnC,IAAID,KAAJ,CAAW,qEAAoE,KAAKC,SAAU,aAAYO,YAAYH,MAAO,IAA7H,CAAN;;;QAGEoI,oBAAoB,CAAxB;QACI,KAAKN,cAAL,KAAwB,MAA5B,EAAoC;WAC7B,IAAIhD,IAAI,CAAb,EAAgBA,IAAI,KAAKlF,SAAzB,EAAoCkF,KAAK,CAAzC,EAA4C;YACtC6C,MAAM,CAAV;aACK,IAAI9C,IAAI,CAAb,EAAgBA,IAAI,KAAKjF,SAAzB,EAAoCiF,KAAK,CAAzC,EAA4C;iBACnC,KAAKmD,iBAAL,CAAwBlD,IAAI,KAAKlF,SAAV,GAAuBiF,CAA9C,KACJ1E,YAAY0E,CAAZ,IAAiB,KAAKpE,IAAL,CAAUoE,CAAV,CADb,CAAP;;6BAGmB,CAAC1E,YAAY2E,CAAZ,IAAiB,KAAKrE,IAAL,CAAUqE,CAAV,CAAlB,IAAkC6C,GAAvD;;KAPJ,MASO;WACA,IAAI7C,IAAI,CAAb,EAAgBA,IAAI,KAAKlF,SAAzB,EAAoCkF,KAAK,CAAzC,EAA4C;6BACrB,KAAKkD,iBAAL,CAAuBlD,CAAvB,KAClB3E,YAAY2E,CAAZ,IAAiB,KAAKrE,IAAL,CAAUqE,CAAV,CADC,KAElB3E,YAAY2E,CAAZ,IAAiB,KAAKrE,IAAL,CAAUqE,CAAV,CAFC,CAArB;;;;QAMAxC,IAAI7C,KAAK4I,GAAL,CAAS,CAAC,GAAD,GAAOD,iBAAhB,IACN3I,KAAKuB,IAAL,CAAU,KAAKkH,qBAAL,GAA8B,CAAC,IAAIzI,KAAK6I,EAAV,KAAiB,KAAK1I,SAA9D,CADF;;QAGI0C,IAAI,MAAJ,IAAciG,OAAOC,KAAP,CAAalG,CAAb,CAAd,IAAiC7C,KAAK+H,GAAL,CAASlF,CAAT,MAAgB,CAAClB,QAAtD,EAAgE;UAC1D,MAAJ;;;WAGKkB,CAAP;GAjE6D;;;;;;;;;aA2EpDmG,cAAX,EAA2B;QACrB,KAAKX,cAAL,KAAwB,MAA5B,EAAoC;WAC7B,IAAIlH,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,SAAzB,EAAoCgB,KAAK,CAAzC,EAA4C;aACrCmH,UAAL,CAAiBnH,IAAI,KAAKhB,SAAV,GAAuBgB,CAAvC,KAA6C6H,eAAe7H,CAAf,CAA7C;;KAFJ,MAIO;WACA,IAAIA,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,SAAzB,EAAoCgB,KAAK,CAAzC,EAA4C;aACrCmH,UAAL,CAAgBnH,CAAhB,KAAsB6H,eAAe7H,CAAf,CAAtB;;;GAlFyD;;;;;;4BA2FrC;QACpB,KAAKkH,cAAL,KAAwB,MAA5B,EAAoC;YAC5BY,YAAYjC,OAAO,KAAK7G,SAAZ,EAAuB,KAAKA,SAA5B,CAAlB;;gBAEU2G,IAAV,GAAiB,KAAKwB,UAAL,CAAgB1H,KAAhB,EAAjB;YACMsI,MAAMD,UAAUE,IAAV,EAAZ;WACKV,qBAAL,GAA6BS,IAAIxB,WAAjC;WACKa,iBAAL,GAAyBW,IAAIvB,MAAJ,CAAWb,IAApC;KANF,MAOO;;WACA2B,qBAAL,GAA6B,CAA7B;WACK,IAAItH,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,SAAzB,EAAoCgB,KAAK,CAAzC,EAA4C;YACtC,KAAKmH,UAAL,CAAgBnH,CAAhB,KAAsB,CAA1B,EAA6B;gBACrB,IAAIjB,KAAJ,CAAU,uBAAV,CAAN;;aAEGqI,iBAAL,CAAuBpH,CAAvB,IAA4B,IAAI,KAAKmH,UAAL,CAAgBnH,CAAhB,CAAhC;aACKsH,qBAAL,IAA8B,KAAKH,UAAL,CAAgBnH,CAAhB,CAA9B;;;QAGA,KAAKf,OAAT,EAAkB;WACXgJ,8BAAL;;GA9G2D;;;;;;;;;YAyHrDC,UAAV,EAAsBC,UAAtB,EAAkC;QAC5BD,cAAc,KAAKlJ,SAAnB,IAAgCmJ,cAAc,KAAKnJ,SAAvD,EAAkE;YAC1D,IAAID,KAAJ,CAAU,yBAAV,CAAN;;;UAGIqJ,kBAAkB;SACnB,CADmB;SAEnB,CAFmB;aAGf,CAHe;cAId,CAJc;aAKf;KALT;oBAOgBrG,CAAhB,GAAoB,KAAKlC,IAAL,CAAUqI,UAAV,CAApB;oBACgBG,CAAhB,GAAoB,KAAKxI,IAAL,CAAUsI,UAAV,CAApB;;;;;QAKIxF,CAAJ;QACIC,CAAJ;QACI4B,CAAJ;QACI,KAAK0C,cAAL,KAAwB,MAA5B,EAAoC;UAC9B,KAAKC,UAAL,CAAiBe,aAAa,KAAKlJ,SAAnB,GAAgCkJ,UAAhD,CAAJ;UACI,KAAKf,UAAL,CAAiBe,aAAa,KAAKlJ,SAAnB,GAAgCmJ,UAAhD,CAAJ;UACI,KAAKhB,UAAL,CAAiBgB,aAAa,KAAKnJ,SAAnB,GAAgCmJ,UAAhD,CAAJ;KAHF,MAIO;UACD,KAAKhB,UAAL,CAAgBe,UAAhB,CAAJ;UACI,CAAJ;UACI,KAAKf,UAAL,CAAgBgB,UAAhB,CAAJ;;;;UAIIG,QAAQ3F,IAAI6B,CAAlB;UACM+B,cAAe5D,IAAI6B,CAAL,GAAW5B,IAAIA,CAAnC;UACM2F,YAAY,OAAOD,QAAQzJ,KAAKuB,IAAL,CAAWkI,SAAS,CAAV,GAAgB,IAAI/B,WAA9B,CAAf,CAAlB;UACMiC,YAAY,OAAOF,QAAQzJ,KAAKuB,IAAL,CAAWkI,SAAS,CAAV,GAAgB,IAAI/B,WAA9B,CAAf,CAAlB;oBACgBkC,KAAhB,GAAwB5J,KAAKuB,IAAL,CAAU,QAAQmI,SAAlB,CAAxB;oBACgBG,MAAhB,GAAyB7J,KAAKuB,IAAL,CAAU,QAAQoI,SAAlB,CAAzB;oBACgBG,KAAhB,GAAwB9J,KAAK+J,IAAL,CAAUhG,KAAK2F,YAAY/D,CAAjB,CAAV,CAAxB;QACImD,OAAOC,KAAP,CAAaQ,gBAAgBO,KAA7B,CAAJ,EAAyC;sBACvBA,KAAhB,GAAwB9J,KAAK6I,EAAL,GAAU,CAAlC;;;WAGKU,eAAP;GApK6D;;;;;;;;;;;cAgLnDA,eAAZ,EAA6BF,UAA7B,EAAyCC,UAAzC,EAAqD;QAC/CD,cAAc,KAAKlJ,SAAnB,IAAgCmJ,cAAc,KAAKnJ,SAAvD,EAAkE;YAC1D,IAAID,KAAJ,CAAU,yBAAV,CAAN;;;SAGGc,IAAL,CAAUqI,UAAV,IAAwBE,gBAAgBrG,CAAxC;SACKlC,IAAL,CAAUsI,UAAV,IAAwBC,gBAAgBC,CAAxC;;UAEME,YAAaH,gBAAgBK,KAAhB,GAAwBL,gBAAgBK,KAAzC,GAAkD,KAApE;UACMD,YAAaJ,gBAAgBM,MAAhB,GAAyBN,gBAAgBM,MAA1C,GAAoD,KAAtE;UACMG,WAAWhK,KAAKiK,GAAL,CAASV,gBAAgBO,KAAzB,CAAjB;UACM/F,IAAK,CAAC2F,YAAYC,SAAb,IAA0BK,QAA3B,IAAyCA,YAAY,CAAb,GAAkB,CAA1D,CAAV;UACMrE,IAAI+D,YAAa3F,IAAIiG,QAA3B;UACMlG,IAAI6F,YAAa5F,IAAIiG,QAA3B;;QAEI,KAAK3B,cAAL,KAAwB,MAA5B,EAAoC;WAC7BC,UAAL,CAAiBe,aAAa,KAAKlJ,SAAnB,GAAgCkJ,UAAhD,IAA8DvF,CAA9D;WACKwE,UAAL,CAAiBe,aAAa,KAAKlJ,SAAnB,GAAgCmJ,UAAhD,IAA8DvF,CAA9D;WACKuE,UAAL,CAAiBgB,aAAa,KAAKnJ,SAAnB,GAAgCkJ,UAAhD,IAA8DtF,CAA9D;WACKuE,UAAL,CAAiBgB,aAAa,KAAKnJ,SAAnB,GAAgCmJ,UAAhD,IAA8D3D,CAA9D;KAJF,MAKO;WACA2C,UAAL,CAAgBe,UAAhB,IAA8BvF,CAA9B;WACKwE,UAAL,CAAgBgB,UAAhB,IAA8B3D,CAA9B;;SAEGuE,uBAAL;;CAxMJ;;;;;;;;;;;;;;;;;;;AA6NA,MAAMC,6DAA8D;;;;;oBAKhD;QACZ,KAAK9B,cAAL,KAAwB,MAA5B,EAAoC;WAC7B+B,sBAAL,GAA8B,IAAInJ,KAAJ,CAAU,KAAKZ,cAAL,IAAuB,CAAjC,EAAoCa,IAApC,CAAyC,CAAzC,CAA9B;KADF,MAEO;WACAkJ,sBAAL,GAA8B,IAAInJ,KAAJ,CAAU,KAAKZ,cAAf,EAA+Ba,IAA/B,CAAoC,CAApC,CAA9B;;GAT8D;;;;;;;;;kBAoBlDmJ,gBAAhB,EAAkC;QAC5B,KAAKC,0BAAL,KAAoC,CAAxC,EAA2C;YACnC,IAAIpK,KAAJ,CAAU,uDAAV,CAAN;;;QAGEyI,oBAAoB,CAAxB;QACI,KAAKN,cAAL,KAAwB,MAA5B,EAAoC;WAC7B,IAAIhD,IAAI,CAAb,EAAgBA,IAAI,KAAKhF,cAAzB,EAAyCgF,KAAK,CAA9C,EAAiD;YAC3C6C,MAAM,CAAV;aACK,IAAI9C,IAAI,CAAb,EAAgBA,IAAI,KAAK/E,cAAzB,EAAyC+E,KAAK,CAA9C,EAAiD;iBACxC,KAAKgF,sBAAL,CAA6B/E,IAAI,KAAKhF,cAAV,GAA4B+E,CAAxD,KACJiF,iBAAiBjF,CAAjB,IAAsB,KAAKpE,IAAL,CAAUoE,CAAV,CADlB,CAAP;;6BAGmB,CAACiF,iBAAiBhF,CAAjB,IAAsB,KAAKrE,IAAL,CAAUqE,CAAV,CAAvB,IAAuC6C,GAA5D;;KAPJ,MASO;WACA,IAAI7C,IAAI,CAAb,EAAgBA,IAAI,KAAKhF,cAAzB,EAAyCgF,KAAK,CAA9C,EAAiD;6BAC1B,KAAKkD,iBAAL,CAAuBlD,CAAvB,KAClBgF,iBAAiBhF,CAAjB,IAAsB,KAAKrE,IAAL,CAAUqE,CAAV,CADJ,KAElBgF,iBAAiBhF,CAAjB,IAAsB,KAAKrE,IAAL,CAAUqE,CAAV,CAFJ,CAArB;;;;QAMAxC,IAAI7C,KAAK4I,GAAL,CAAS,CAAC,GAAD,GAAOD,iBAAhB,IACG3I,KAAKuB,IAAL,CAAU,KAAK+I,0BAAL,GACJ,CAAC,IAAItK,KAAK6I,EAAV,KAAiB,KAAKxI,cAD5B,CADX;;QAIIwC,IAAI,MAAJ,IAAciG,OAAOC,KAAP,CAAalG,CAAb,CAAd,IAAiC7C,KAAK+H,GAAL,CAASlF,CAAT,MAAgB,CAAClB,QAAtD,EAAgEkB,IAAI,MAAJ;;WAEzDA,CAAP;GAjDgE;;;;;;;;;;;aA6DvDwH,gBAAX,EAA6B;UACrBtJ,kBAAkB,KAAKZ,SAAL,GAAiB,KAAKE,cAA9C;UACMkK,aAAatJ,MAAMF,eAAN,EAAuBG,IAAvB,CAA4B,CAA5B,CAAnB;;QAEI,KAAKmH,cAAL,KAAwB,MAA5B,EAAoC;WAC7B,IAAIlH,IAAI,CAAb,EAAgBA,IAAIJ,eAApB,EAAqCI,KAAK,CAA1C,EAA6C;mBAChCA,CAAX,IAAgB,KAAKH,IAAL,CAAU,KAAKX,cAAL,GAAsBc,CAAhC,CAAhB;aACK,IAAIqJ,IAAI,CAAb,EAAgBA,IAAI,KAAKnK,cAAzB,EAAyCmK,KAAK,CAA9C,EAAiD;cAC3CtC,MAAM,CAAV;eACK,IAAIuC,IAAI,CAAb,EAAgBA,IAAI,KAAKpK,cAAzB,EAAyCoK,KAAK,CAA9C,EAAiD;mBACxC,KAAKL,sBAAL,CAA6BI,IAAI,KAAKnK,cAAV,GAA4BoK,CAAxD,KACJJ,iBAAiBI,CAAjB,IAAsB,KAAKzJ,IAAL,CAAUyJ,CAAV,CADlB,CAAP;;qBAGStJ,CAAX,KAAiB+G,MACf,KAAKI,UAAL,CAAiB,CAACnH,IAAI,KAAKd,cAAV,IAA4B,KAAKF,SAAlC,GAA+CqK,CAA/D,CADF;;;KATN,MAaO;WACA,IAAIrJ,IAAI,CAAb,EAAgBA,IAAIJ,eAApB,EAAqCI,KAAK,CAA1C,EAA6C;mBAChCA,CAAX,IAAgB,KAAKH,IAAL,CAAU,KAAKX,cAAL,GAAsBc,CAAhC,CAAhB;;;WAGGoJ,UAAP;GAnFgE;;;;;;mCA0FjC;QAC3B,KAAKlC,cAAL,KAAwB,MAA5B,EAAoC;YAC5BqC,iBAAiB1D,OAAO,KAAK3G,cAAZ,EAA4B,KAAKA,cAAjC,CAAvB;WACK,IAAIsK,KAAK,CAAd,EAAiBA,KAAK,KAAKtK,cAA3B,EAA2CsK,MAAM,CAAjD,EAAoD;aAC7C,IAAIC,KAAK,CAAd,EAAiBA,KAAK,KAAKvK,cAA3B,EAA2CuK,MAAM,CAAjD,EAAoD;yBACnC9D,IAAf,CAAqB6D,KAAK,KAAKtK,cAAX,GAA6BuK,EAAjD,IACE,KAAKtC,UAAL,CAAiBqC,KAAK,KAAKxK,SAAX,GAAwByK,EAAxC,CADF;;;YAIEC,WAAWH,eAAevB,IAAf,EAAjB;WACKmB,0BAAL,GAAkCO,SAASnD,WAA3C;WACK0C,sBAAL,GAA8BS,SAASlD,MAAT,CAAgBb,IAA9C;KAVF,MAWO;;WACAwD,0BAAL,GAAkC,CAAlC;WACK,IAAInJ,IAAI,CAAb,EAAgBA,IAAI,KAAKd,cAAzB,EAAyCc,KAAK,CAA9C,EAAiD;YAC3C,KAAKmH,UAAL,CAAgBnH,CAAhB,KAAsB,CAA1B,EAA6B;gBACrB,IAAIjB,KAAJ,CAAU,uBAAV,CAAN;;aAEGkK,sBAAL,CAA4BjJ,CAA5B,IAAiC,IAAI,KAAKmH,UAAL,CAAgBnH,CAAhB,CAArC;aACKmJ,0BAAL,IAAmC,KAAKhC,UAAL,CAAgBnH,CAAhB,CAAnC;;;SAGC2J,sBAAL;GAhHgE;;;;;;2BAuHzC;QACnB,KAAKzC,cAAL,KAAwB,UAA5B,EAAwC;WACjC0C,gBAAL,GAAwB,KAAKzC,UAAL,CAAgB1H,KAAhB,CAAsB,CAAtB,EAAyB,KAAKP,cAA9B,CAAxB;;;;;UAKIqK,iBAAiB1D,OAAO,KAAK3G,cAAZ,EAA4B,KAAKA,cAAjC,CAAvB;SACK,IAAIsK,KAAK,CAAd,EAAiBA,KAAK,KAAKtK,cAA3B,EAA2CsK,MAAM,CAAjD,EAAoD;WAC7C,IAAIC,KAAK,CAAd,EAAiBA,KAAK,KAAKvK,cAA3B,EAA2CuK,MAAM,CAAjD,EAAoD;uBACnC9D,IAAf,CAAqB6D,KAAK,KAAKtK,cAAX,GAA6BuK,EAAjD,IACE,KAAKtC,UAAL,CAAiBqC,KAAK,KAAKxK,SAAX,GAAwByK,EAAxC,CADF;;;UAIE1B,MAAMwB,eAAevB,IAAf,EAAZ;UACM6B,eAAehE,OAAO,KAAK3G,cAAZ,EAA4B,KAAKU,eAAjC,CAArB;SACK,IAAI4J,KAAK,CAAd,EAAiBA,KAAK,KAAKtK,cAA3B,EAA2CsK,MAAM,CAAjD,EAAoD;WAC7C,IAAIC,KAAK,CAAd,EAAiBA,KAAK,KAAK7J,eAA3B,EAA4C6J,MAAM,CAAlD,EAAqD;qBACtC9D,IAAb,CAAmB6D,KAAK,KAAK5J,eAAX,GAA8B6J,EAAhD,IACE,KAAKtC,UAAL,CAAiBqC,KAAK,KAAKxK,SAAX,GAAwB,KAAKE,cAA7B,GAA8CuK,EAA9D,CADF;;;UAIEK,eAAejE,OAAO,KAAKjG,eAAZ,EAA6B,KAAKV,cAAlC,CAArB;SACK,IAAIsK,KAAK,CAAd,EAAiBA,KAAK,KAAK5J,eAA3B,EAA4C4J,MAAM,CAAlD,EAAqD;WAC9C,IAAIC,KAAK,CAAd,EAAiBA,KAAK,KAAKvK,cAA3B,EAA2CuK,MAAM,CAAjD,EAAoD;qBACrC9D,IAAb,CAAmB6D,KAAK,KAAKtK,cAAX,GAA6BuK,EAA/C,IACE,KAAKtC,UAAL,CAAiB,CAAC,KAAKjI,cAAL,GAAsBsK,EAAvB,IAA6B,KAAKxK,SAAnC,GAAgDyK,EAAhE,CADF;;;UAIEM,YAAYhC,IAAIvB,MAAJ,CAAWF,OAAX,CAAmBuD,YAAnB,CAAlB;UACMG,gBAAgBF,aAAaxD,OAAb,CAAqByD,SAArB,CAAtB;SACKH,gBAAL,GAAwB9J,MAAM,KAAKF,eAAL,IAAwB,CAA9B,EAAiCG,IAAjC,CAAsC,CAAtC,CAAxB;SACK,IAAIyJ,KAAK,CAAd,EAAiBA,KAAK,KAAK5J,eAA3B,EAA4C4J,MAAM,CAAlD,EAAqD;WAC9C,IAAIC,KAAK,CAAd,EAAiBA,KAAK,KAAK7J,eAA3B,EAA4C6J,MAAM,CAAlD,EAAqD;aAC9CG,gBAAL,CAAuBJ,KAAK,KAAK5J,eAAX,GAA8B6J,EAApD,IACE,KAAKtC,UAAL,CAAiB,CAAC,KAAKjI,cAAL,GAAsBsK,EAAvB,IAA6B,KAAKxK,SAAnC,GACd,KAAKE,cADS,GACQuK,EADxB,IAEEO,cAAcrE,IAAd,CAAoB6D,KAAK,KAAK5J,eAAX,GAA8B6J,EAAjD,CAHJ;;;;CAzJR;;;;;;;;;;;;;;;;;;;;;;;AAuLA,AAAe,SAASQ,oBAAT,CACb/K,iBAAiB,CADJ,EAEbU,kBAAkB,CAFL,EAGbsH,iBAAiB,MAHJ,EAIb;QACMjI,UAAUW,kBAAkB,CAAlC;QACMZ,YAAYE,iBAAiBU,eAAnC;QACMsK,QAAQjL,UACZ0B,OAAOC,MAAP,CAAc,EAAd,EAAkBqG,qBAAlB,EAAyC+B,wBAAzC,CADY,GAEZ/B,qBAFF;QAGMtB,OAAOhF,OAAOC,MAAP,CACX;WAAA;aAAA;kBAAA;mBAAA;kBAAA;2BAMyB;GAPd,EASX3B,UAAU,EAAEkK,4BAA4B,CAA9B,EAAV,GAA8C,EATnC,CAAb;QAWMgB,OAAOxJ,OAAOC,MAAP,CACXD,OAAOE,MAAP,CAAcqJ,KAAd,CADW,EAEXvE,IAFW,CAAb;OAIKyE,QAAL;SACOD,IAAP;;;AC/bF,MAAME,+CAAgD;;;;;;;;QAQ9CnH,WAAN,EAAmB;QACb,CAACA,WAAD,IAAgBA,YAAYC,KAAZ,EAApB,EAAyC;YACjC,IAAIpE,KAAJ,CAAU,2BAAV,CAAN;;;SAGGuL,YAAL,CAAkBpH,WAAlB;;QAEIqH,gBAAgB,CAAC/J,QAArB;QACIgK,aAAa,CAAjB;QACIC,wBAAwBF,aAA5B;;WAEO,CAAC,KAAKG,SAAL,CAAeF,UAAf,EAA2BD,aAA3B,EAA0CE,qBAA1C,CAAR,EAA0E;8BAChDF,aAAxB;sBACgB,KAAKI,cAAL,CAAoBzH,WAApB,CAAhB;;YAEM0H,SACJ,MAAM/L,KAAK+H,GAAL,CAAS,CAAC2D,gBAAgBE,qBAAjB,IAA0CA,qBAAnD,CADR;UAEI9C,OAAOC,KAAP,CAAagD,MAAb,KAAwBJ,aAAa,CAAzC,EAA4C;cACpC,IAAIzL,KAAJ,CAAU,kCAAV,CAAN;;;oBAGY,CAAd;;;SAGG8L,iBAAL;WACO,KAAKnI,MAAZ;GAjCkD;;;;;;;;;;;;;;YAgD1CoI,SAAV,EAAqBC,OAArB,EAA8BC,eAA9B,EAA+C;QACzCF,aAAa,KAAKG,mBAAL,CAAyBrH,aAA1C,EAAyD,OAAO,IAAP;QACrD,KAAKqH,mBAAL,CAAyBrH,aAAzB,IAA0C,KAAKqH,mBAAL,CAAyBC,aAAvE,EAAsF;aAC7EJ,aAAa,KAAKG,mBAAL,CAAyBrH,aAA7C;;QAEEkH,YAAY,KAAKG,mBAAL,CAAyBC,aAAzC,EAAwD,OAAO,KAAP;UAClDC,gBAAgB,MAAMtM,KAAK+H,GAAL,CAAS,CAACmE,UAAUC,eAAX,IAA8BD,OAAvC,CAA5B;WACOI,iBAAiB,KAAKF,mBAAL,CAAyBE,aAAjD;;CAvDJ;;;;;;;;;;;;;;;;;;;;;;;;;AAkFA,AAAe,SAASC,cAAT,CACb5I,CADa,EAEbyI,sBAAsB;iBACL,IADK;iBAEL,CAFK;iBAGL;CALJ,EAOb;SACOtK,OAAOC,MAAP,CAAc4B,CAAd,EAAiB6H,gBAAjB,EAAmC,EAAEY,mBAAF,EAAnC,CAAP;;;ACvFF;;;;;AAKA,MAAMI,4CAA6C;;;;;aAKtC;SACJ3I,MAAL,CAAY4I,UAAZ,GAAyBxL,MAAMQ,IAAN,CACvBR,MAAM,KAAK4C,MAAL,CAAY6I,SAAlB,CADuB,EAEvB,MAAM,IAAItB,oBAAJ,CACJ,KAAKvH,MAAL,CAAYxD,cADR,EAEJ,KAAKwD,MAAL,CAAY9C,eAFR,EAGJ,KAAK8C,MAAL,CAAYwE,cAHR,CAFiB,CAAzB;SAQKxE,MAAL,CAAY8I,aAAZ,GAA4B1L,MAAM,KAAK4C,MAAL,CAAY6I,SAAlB,EAA6BxL,IAA7B,CAAkC,CAAlC,CAA5B;SACK0L,IAAL,GAAY,IAAI3L,KAAJ,CAAU,KAAK4C,MAAL,CAAY6I,SAAtB,EAAiCxL,IAAjC,CAAsC,CAAtC,CAAZ;GAf+C;;;;;;;aAuBtCR,WAAX,EAAwB;QAClBmM,aAAa,CAAjB;SACK,IAAIlH,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;WAC5CiH,IAAL,CAAUjH,CAAV,IAAe,KAAKmH,mBAAL,CAAyBpM,WAAzB,EAAsCiF,CAAtC,CAAf;oBACc,KAAKiH,IAAL,CAAUjH,CAAV,CAAd;;SAEG,IAAIA,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;WAC5CiH,IAAL,CAAUjH,CAAV,KAAgBkH,UAAhB;;;WAGKA,UAAP;GAjC+C;;;;;;;;;sBA2C7BnM,WAApB,EAAiCqM,gBAAjC,EAAmD;QAC7CA,oBAAoB,KAAKlJ,MAAL,CAAY6I,SAApC,EAA+C;YACvC,IAAIxM,KAAJ,CAAU,8DAAV,CAAN;;WAEK,KAAK2D,MAAL,CAAY8I,aAAZ,CAA0BI,gBAA1B,IACH,KAAKlJ,MAAL,CAAY4I,UAAZ,CAAuBM,gBAAvB,EAAyCF,UAAzC,CAAoDnM,WAApD,CADJ;GA/C+C;;;;;;6BAuDtB;SACpBmD,MAAL,CAAY4I,UAAZ,CAAuBhK,OAAvB,CAAgCkD,CAAD,IAAO;QAClCuE,uBAAF;KADF;QAGI;WACGrG,MAAL,CAAY4I,UAAZ,CAAuBhK,OAAvB,CAAgCkD,CAAD,IAAO;UAClCuE,uBAAF;OADF;KADF,CAIE,OAAOM,CAAP,EAAU;YACJ,IAAItK,KAAJ,CAAU,0DAAV,CAAN;;GAhE6C;;;;;;2BAwExB;QACnB8M,YAAY,CAAhB;SACK,IAAIrH,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;mBACpC,KAAK9B,MAAL,CAAY8I,aAAZ,CAA0BhH,CAA1B,CAAb;;QAEEqH,YAAY,CAAhB,EAAmB;WACZ,IAAIrH,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;aAC5C9B,MAAL,CAAY8I,aAAZ,CAA0BhH,CAA1B,KAAgCqH,SAAhC;;KAFJ,MAIO;WACA,IAAIrH,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;aAC5C9B,MAAL,CAAY8I,aAAZ,CAA0BhH,CAA1B,IAA+B,IAAI,KAAK9B,MAAL,CAAY6I,SAA/C;;;GAnF2C;;;;;;eA4FpC;SACN7I,MAAL,CAAY4I,UAAZ,CAAuBhK,OAAvB,CAAgCkD,CAAD,IAAO;QAClCsH,UAAF,CAAa,KAAKC,qBAAlB;KADF;;CA7FJ;;;;;;;AAwGA,MAAMC,+CAAgD;;;;;;;;;aASzC9C,gBAAX,EAA6B;SACtB+C,OAAL,CAAaC,YAAb,GAA4BpM,MAAM,KAAK4C,MAAL,CAAY9C,eAAlB,EAAmCG,IAAnC,CAAwC,CAAxC,CAA5B;SACKkM,OAAL,CAAarC,gBAAb,GAAgC9J,MAAM,KAAK4C,MAAL,CAAYwE,cAAZ,KAA+B,MAA/B,GAAwC,KAAKxE,MAAL,CAAY9C,eAAZ,IAA+B,CAAvE,GAA2E,KAAK8C,MAAL,CAAY9C,eAA7F,EAA8GG,IAA9G,CAAmH,CAAnH,CAAhC;QACIoM,eAAJ;;SAEK,IAAI3H,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;wBAC/B,KAAK9B,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B4H,UAA1B,CAAqClD,gBAArC,CAAlB;WACK,IAAIlJ,IAAI,CAAb,EAAgBA,IAAI,KAAK0C,MAAL,CAAY9C,eAAhC,EAAiDI,KAAK,CAAtD,EAAyD;aAClDiM,OAAL,CAAaC,YAAb,CAA0BlM,CAA1B,KAAgC,KAAKyL,IAAL,CAAUjH,CAAV,IAAe2H,gBAAgBnM,CAAhB,CAA/C;YACI,KAAK0C,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;eACpC,IAAIuC,KAAK,CAAd,EAAiBA,KAAK,KAAK/G,MAAL,CAAY9C,eAAlC,EAAmD6J,MAAM,CAAzD,EAA4D;iBACrDwC,OAAL,CAAarC,gBAAb,CAA+B5J,IAAI,KAAK0C,MAAL,CAAY9C,eAAjB,GAAoC6J,EAAlE,KACG,KAAKgC,IAAL,CAAUjH,CAAV,KAAgB,CAAjB,GACA,KAAK9B,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0BoF,gBAA1B,CAA4C5J,IAAI,KAAK0C,MAAL,CAAY9C,eAAjB,GAAoC6J,EAA/E,CAFF;;SAFJ,MAMO;eACAwC,OAAL,CAAarC,gBAAb,CAA8B5J,CAA9B,KACG,KAAKyL,IAAL,CAAUjH,CAAV,KAAgB,CAAjB,GAAsB,KAAK9B,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0BoF,gBAA1B,CAA2C5J,CAA3C,CADxB;;;;WAKC,KAAKiM,OAAL,CAAaC,YAApB;;CA9BJ;;;;;;;;;;;;;;;AA+CA,AAAe,SAASG,WAAT,CAAqB7J,CAArB,EAAwB;MACjC,CAACD,YAAYC,CAAZ,CAAL,EAAqB;UACb,IAAIzD,KAAJ,CAAU,6FAAV,CAAN;;SAEK4B,OAAOC,MAAP,CACL4B,CADK,EAEL6I,gBAFK,EAGL7I,EAAEE,MAAF,CAASzD,OAAT,GAAmB+M,mBAAnB,GAAyC,EAHpC,CAAP;;;AChKF;;;;;AAKA,MAAMM,mDAAoD;;;;;eAK3CpJ,WAAb,EAA0B;SACnBkH,QAAL;SACKmC,uBAAL,CAA6BrJ,YAAYsJ,iBAAZ,EAA7B;SACKC,mBAAL,CAAyBvJ,WAAzB;SACKwJ,eAAL,CAAqBxJ,WAArB;SACK4I,UAAL;SACKa,wBAAL;GAXsD;;;;;;;0BAmBhCC,UAAxB,EAAoC;QAC9BC,aAAa,CAAjB;SACKd,qBAAL,GAA6Ba,WAAW/K,GAAX,CAAeiL,OAAOjO,KAAK4B,GAAL,CACjD,KAAKiC,MAAL,CAAYmF,cAAZ,CAA2BkF,QADsB,EAEjD,KAAKrK,MAAL,CAAYmF,cAAZ,CAA2BmF,QAA3B,GAAsCF,GAFW,CAAtB,CAA7B;SAIK,IAAItI,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;UAC7C,KAAK9B,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;aACpCxE,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B2C,UAA1B,GAAuCrH,MAAM,KAAK4C,MAAL,CAAY1D,SAAZ,IAAyB,CAA/B,EACpCe,IADoC,CAC/B,KAAK2C,MAAL,CAAYmF,cAAZ,CAA2BkF,QAA3B,GAAsC,CADP,CAAvC;OADF,MAGO;aACArK,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B2C,UAA1B,GAAuCrH,MAAM,KAAK4C,MAAL,CAAY1D,SAAlB,EAA6Be,IAA7B,CAAkC,CAAlC,CAAvC;;WAEG2C,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0BsH,UAA1B,CAAqC,KAAKC,qBAA1C;WACKrJ,MAAL,CAAY8I,aAAZ,CAA0BhH,CAA1B,IAA+B,IAAI,KAAK9B,MAAL,CAAY6I,SAA/C;oBACc,KAAK7I,MAAL,CAAY8I,aAAZ,CAA0BhH,CAA1B,CAAd;;SAEG,IAAIA,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;WAC5C9B,MAAL,CAAY8I,aAAZ,CAA0BhH,CAA1B,KAAgCqI,UAAhC;;GArCoD;;;;;;;;;;sBAiDpC3J,WAApB,EAAiC;QAC3B,CAACA,WAAD,IAAgBA,YAAYC,KAAZ,EAApB,EAAyC;UACnC8J,SAAS7H,mBACb/C,UAAU;sBACQ,KAAKK,MAAL,CAAYxD,cADpB;uBAES,KAAKwD,MAAL,CAAY9C;KAF/B,CADa,EAKb,KAAK8C,MAAL,CAAY6I,SALC,EAMb,EAAEhI,gBAAgB,MAAlB,EANa,CAAf;UAQM2J,eAAeD,OAAOzH,KAAP,CAAatC,WAAb,CAArB;SACK,IAAIsB,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;WAC5C9B,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B3E,IAA1B,GAAiCqN,aAAa9J,OAAb,CAAqBoB,CAArB,CAAjC;;GA7DoD;;;;;;;;kBAuExCtB,WAAhB,EAA6B;;;QAGvB,CAACA,WAAD,IAAgBA,YAAYC,KAAZ,EAApB,EAAyC;;SAEpC,IAAIwD,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,MAAL,CAAY6I,SAAhC,EAA2C5E,KAAK,CAAhD,EAAmD;WAC5CjE,MAAL,CAAY4I,UAAZ,CAAuB3E,CAAvB,EAA0BQ,UAA1B,GAAuCrH,MAAO,KAAK4C,MAAL,CAAYwE,cAAZ,KAA+B,MAAhC,GAA0C,KAAKxE,MAAL,CAAY1D,SAAZ,IAAyB,CAAnE,GAAuE,KAAK0D,MAAL,CAAY1D,SAAzF,EAAoGe,IAApG,CAAyG,CAAzG,CAAvC;;;UAGIoN,SAASrN,MAAM,KAAK4C,MAAL,CAAY6I,SAAZ,GAAwB,KAAK7I,MAAL,CAAY1D,SAA1C,EAAqDe,IAArD,CAA0D,CAA1D,CAAf;UACMqN,SAAStN,MAAM,KAAK4C,MAAL,CAAY6I,SAAlB,EAA6BxL,IAA7B,CAAkC,CAAlC,CAAf;gBACYuB,OAAZ,CAAqBG,MAAD,IAAY;YACxB6C,OAAOzF,KAAKC,KAAL,CAAW2C,OAAOrC,MAAP,GAAgB,KAAKsD,MAAL,CAAY6I,SAAvC,CAAb;UACIhH,SAAS,CAAb;WACK,IAAIoC,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,MAAL,CAAY6I,SAAhC,EAA2C5E,KAAK,CAAhD,EAAmD;aAC5C,IAAI1G,IAAI,CAAb,EAAgBA,IAAIqE,IAApB,EAA0BrE,KAAK,CAA/B,EAAkC;eAC3B,IAAIuJ,KAAK,CAAd,EAAiBA,KAAK,KAAK9G,MAAL,CAAY1D,SAAlC,EAA6CwK,MAAM,CAAnD,EAAsD;mBAC5C7C,IAAI,KAAKjE,MAAL,CAAY1D,SAAjB,GAA8BwK,EAArC,KAA4C/H,OAAOvB,GAAP,CAAWqE,SAAStE,CAApB,EAAuBuJ,EAAvB,CAA5C;gBACI,KAAK9G,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;mBACpC,IAAIuC,KAAK,CAAd,EAAiBA,KAAK,KAAK/G,MAAL,CAAY1D,SAAlC,EAA6CyK,MAAM,CAAnD,EAAsD;qBAC/C/G,MAAL,CAAY4I,UAAZ,CAAuB3E,CAAvB,EACGQ,UADH,CACeqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAD7C,KAEEhI,OAAOvB,GAAP,CAAWqE,SAAStE,CAApB,EAAuBuJ,EAAvB,IAA6B/H,OAAOvB,GAAP,CAAWqE,SAAStE,CAApB,EAAuBwJ,EAAvB,CAF/B;;aAFJ,MAMO;mBACA/G,MAAL,CAAY4I,UAAZ,CAAuB3E,CAAvB,EAA0BQ,UAA1B,CAAqCqC,EAArC,KACE/H,OAAOvB,GAAP,CAAWqE,SAAStE,CAApB,EAAuBuJ,EAAvB,KAA8B,CADhC;;;;kBAKIlF,IAAV;eACOqC,CAAP,KAAarC,IAAb;;KApBJ;;SAwBK,IAAIqC,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,MAAL,CAAY6I,SAAhC,EAA2C5E,KAAK,CAAhD,EAAmD;WAC5C,IAAI6C,KAAK,CAAd,EAAiBA,KAAK,KAAK9G,MAAL,CAAY1D,SAAlC,EAA6CwK,MAAM,CAAnD,EAAsD;eAC5C7C,IAAI,KAAKjE,MAAL,CAAY1D,SAAjB,GAA8BwK,EAArC,KAA4C4D,OAAOzG,CAAP,CAA5C;YACI,KAAKjE,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;eACpC,IAAIuC,KAAK,CAAd,EAAiBA,KAAK,KAAK/G,MAAL,CAAY1D,SAAlC,EAA6CyK,MAAM,CAAnD,EAAsD;iBAC/C/G,MAAL,CAAY4I,UAAZ,CAAuB3E,CAAvB,EAA0BQ,UAA1B,CAAsCqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAApE,KAA2E2D,OAAOzG,CAAP,CAA3E;;SAFJ,MAIO;eACAjE,MAAL,CAAY4I,UAAZ,CAAuB3E,CAAvB,EAA0BQ,UAA1B,CAAqCqC,EAArC,KAA4C4D,OAAOzG,CAAP,CAA5C;;;;;SAKD,IAAIA,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,MAAL,CAAY6I,SAAhC,EAA2C5E,KAAK,CAAhD,EAAmD;WAC5C,IAAI6C,KAAK,CAAd,EAAiBA,KAAK,KAAK9G,MAAL,CAAY1D,SAAlC,EAA6CwK,MAAM,CAAnD,EAAsD;YAChD,KAAK9G,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;eACpC,IAAIuC,KAAK,CAAd,EAAiBA,KAAK,KAAK/G,MAAL,CAAY1D,SAAlC,EAA6CyK,MAAM,CAAnD,EAAsD;iBAC/C/G,MAAL,CAAY4I,UAAZ,CAAuB3E,CAAvB,EAA0BQ,UAA1B,CAAsCqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAApE,KACE0D,OAAQxG,IAAI,KAAKjE,MAAL,CAAY1D,SAAjB,GAA8BwK,EAArC,IACA2D,OAAQxG,IAAI,KAAKjE,MAAL,CAAY1D,SAAjB,GAA8ByK,EAArC,CAFF;;SAFJ,MAMO;eACA/G,MAAL,CAAY4I,UAAZ,CAAuB3E,CAAvB,EAA0BQ,UAA1B,CAAqCqC,EAArC,KACE2D,OAAQxG,IAAI,KAAKjE,MAAL,CAAY1D,SAAjB,GAA8BwK,EAArC,KAA4C,CAD9C;;;;GAhIgD;;;;;;iBA2IzCtG,WAAf,EAA4B;QACtB6H,UAAU,CAAd;QACI3I,cAAc,CAAlB;gBACYd,OAAZ,CAAqBG,MAAD,IAAY;qBACfA,OAAOrC,MAAtB;KADF;UAGMiO,gBAAgB1M,OAAOK,IAAP,CAAYkC,YAAYjC,OAAxB,CAAtB;;UAEMS,IAAI5B,MAAMQ,IAAN,CACRR,MAAM,KAAK4C,MAAL,CAAY6I,SAAlB,CADQ,EAER,MAAM,IAAIzL,KAAJ,CAAUsC,WAAV,EAAuBrC,IAAvB,CAA4B,CAA5B,CAFE,CAAV;UAIMuN,IAAIxN,MAAM,KAAK4C,MAAL,CAAY6I,SAAlB,EAA6BxL,IAA7B,CAAkC,CAAlC,CAAV;QACIwN,QAAQ,CAAZ;;gBAEYjM,OAAZ,CAAqBG,MAAD,IAAY;WACzB,IAAIxB,IAAI,CAAb,EAAgBA,IAAIwB,OAAOrC,MAA3B,EAAmCa,KAAK,CAAxC,EAA2C;YACrC4L,YAAY,CAAhB;aACK,IAAIrH,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;YAC/CA,CAAF,EAAK+I,QAAQtN,CAAb,IAAkB,KAAK0L,mBAAL,CAAyBlK,OAAOqD,QAAP,CAAgB7E,CAAhB,CAAzB,EAA6CuE,CAA7C,CAAlB;;cAEI9C,EAAE8C,CAAF,EAAK+I,QAAQtN,CAAb,MAAoB,CAApB,IACF0H,OAAOC,KAAP,CAAalG,EAAE8C,CAAF,EAAK+I,QAAQtN,CAAb,CAAb,CADE,IAEFyB,EAAE8C,CAAF,EAAK+I,QAAQtN,CAAb,MAAoB,CAACO,QAFvB,EAEiC;cAC7BgE,CAAF,EAAK+I,QAAQtN,CAAb,IAAkB,MAAlB;;uBAEWyB,EAAE8C,CAAF,EAAK+I,QAAQtN,CAAb,CAAb;;aAEG,IAAIuE,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;YAC/CA,CAAF,EAAK+I,QAAQtN,CAAb,KAAmB4L,SAAnB;YACErH,CAAF,KAAQ9C,EAAE8C,CAAF,EAAK+I,QAAQtN,CAAb,CAAR;;mBAESpB,KAAK2O,GAAL,CAAS3B,SAAT,CAAX;;eAEOpK,OAAOrC,MAAhB;KAnBF;;;SAuBK,IAAIoF,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;WAC5C9B,MAAL,CAAY8I,aAAZ,CAA0BhH,CAA1B,IAA+B8I,EAAE9I,CAAF,IAAOpC,WAAtC;;;;SAIG,IAAIoC,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;WAC5C,IAAIxE,IAAI,CAAb,EAAgBA,IAAI,KAAK0C,MAAL,CAAY1D,SAAhC,EAA2CgB,KAAK,CAAhD,EAAmD;aAC5C0C,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B3E,IAA1B,CAA+BG,CAA/B,IAAoC,CAApC;gBACQ,CAAR;aACK,IAAIyN,MAAM,CAAf,EAAkBA,MAAMJ,cAAcjO,MAAtC,EAA8CqO,OAAO,CAArD,EAAwD;gBAChDhM,SAASyB,YAAYjC,OAAZ,CAAoBoM,cAAcI,GAAd,CAApB,CAAf;eACK,IAAIxN,IAAI,CAAb,EAAgBA,IAAIwB,OAAOrC,MAA3B,EAAmCa,KAAK,CAAxC,EAA2C;iBACpCyC,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B3E,IAA1B,CAA+BG,CAA/B,KACE0B,EAAE8C,CAAF,EAAK+I,QAAQtN,CAAb,IAAkBwB,OAAOvB,GAAP,CAAWD,CAAX,EAAcD,CAAd,CADpB;;mBAGOyB,OAAOrC,MAAhB;;aAEGsD,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B3E,IAA1B,CAA+BG,CAA/B,KAAqCsN,EAAE9I,CAAF,CAArC;;;;;QAKA,KAAK9B,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;WACpC,IAAI1C,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;aAC5C,IAAIgF,KAAK,CAAd,EAAiBA,KAAK,KAAK9G,MAAL,CAAY1D,SAAlC,EAA6CwK,MAAM,CAAnD,EAAsD;eAC/C,IAAIC,KAAKD,EAAd,EAAkBC,KAAK,KAAK/G,MAAL,CAAY1D,SAAnC,EAA8CyK,MAAM,CAApD,EAAuD;iBAChD/G,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B2C,UAA1B,CAAsCqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAApE,IAA0E,CAA1E;oBACQ,CAAR;iBACK,IAAIgE,MAAM,CAAf,EAAkBA,MAAMJ,cAAcjO,MAAtC,EAA8CqO,OAAO,CAArD,EAAwD;oBAChDhM,SAASyB,YAAYjC,OAAZ,CAAoBoM,cAAcI,GAAd,CAApB,CAAf;mBACK,IAAIxN,IAAI,CAAb,EAAgBA,IAAIwB,OAAOrC,MAA3B,EAAmCa,KAAK,CAAxC,EAA2C;qBACpCyC,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B2C,UAA1B,CAAsCqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAApE,KACE/H,EAAE8C,CAAF,EAAK+I,QAAQtN,CAAb,KACCwB,OAAOvB,GAAP,CAAWD,CAAX,EAAcuJ,EAAd,IAAoB,KAAK9G,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B3E,IAA1B,CAA+B2J,EAA/B,CADrB,KAEC/H,OAAOvB,GAAP,CAAWD,CAAX,EAAcwJ,EAAd,IAAoB,KAAK/G,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B3E,IAA1B,CAA+B4J,EAA/B,CAFrB,CADF;;uBAKOhI,OAAOrC,MAAhB;;iBAEGsD,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B2C,UAA1B,CAAsCqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAApE,KAA2E6D,EAAE9I,CAAF,CAA3E;gBACIgF,OAAOC,EAAX,EAAe;mBACR/G,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B2C,UAA1B,CAAsCsC,KAAK,KAAK/G,MAAL,CAAY1D,SAAlB,GAA+BwK,EAApE,IACE,KAAK9G,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B2C,UAA1B,CAAsCqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAApE,CADF;;;;;KAlBV,MAwBO;WACA,IAAIjF,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;aAC5C,IAAIgF,KAAK,CAAd,EAAiBA,KAAK,KAAK9G,MAAL,CAAY1D,SAAlC,EAA6CwK,MAAM,CAAnD,EAAsD;eAC/C9G,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B2C,UAA1B,CAAqCqC,EAArC,IAA2C,CAA3C;kBACQ,CAAR;eACK,IAAIiE,MAAM,CAAf,EAAkBA,MAAMJ,cAAcjO,MAAtC,EAA8CqO,OAAO,CAArD,EAAwD;kBAChDhM,SAASyB,YAAYjC,OAAZ,CAAoBoM,cAAcI,GAAd,CAApB,CAAf;iBACK,IAAIxN,IAAI,CAAb,EAAgBA,IAAIwB,OAAOrC,MAA3B,EAAmCa,KAAK,CAAxC,EAA2C;oBACnCyN,QAASjM,OAAOvB,GAAP,CAAWD,CAAX,EAAcuJ,EAAd,IAAoB,KAAK9G,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B3E,IAA1B,CAA+B2J,EAA/B,CAAnC;mBACK9G,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B2C,UAA1B,CAAqCqC,EAArC,KACM9H,EAAE8C,CAAF,EAAK+I,QAAQtN,CAAb,IAAkByN,KAAlB,GAA0BA,KADhC;;qBAGOjM,OAAOrC,MAAhB;;eAEGsD,MAAL,CAAY4I,UAAZ,CAAuB9G,CAAvB,EAA0B2C,UAA1B,CAAqCqC,EAArC,KAA4C8D,EAAE9I,CAAF,CAA5C;;;;;SAKDsH,UAAL;SACKa,wBAAL;;WAEO5B,OAAP;GArPsD;;;;;sBA2PpC;CA3PtB;;;;;;;;;;;;;AAyQA,AAAe,SAAS4C,eAAT,CACbnL,CADa,EAEb+I,YAAY,CAFC,EAGb1D,iBAAiB,EAAEkF,UAAU,IAAZ,EAAkBC,UAAU,IAA5B,EAHJ,EAIb9F,iBAAiB,MAJJ,EAKb;MACI,CAACvG,OAAOK,IAAP,CAAYwB,CAAZ,EAAerB,QAAf,CAAwB,QAAxB,CAAL,EAAwC;UAChC,IAAIpC,KAAJ,CAAU,6FAAV,CAAN;;SAEK4B,OAAOC,MAAP,CACL4B,CADK,EAEL8J,mBAFK,EAGL;yBAEO9J,EAAEE,MADP;eAAA;oBAAA;;;GAJG,CAAP;;;ACxRF;;;;;AAKA,MAAMkL,2DAA2D;;;;;SAKxD;WACEjN,OAAOK,IAAP,CAAY,KAAK6M,MAAjB,EAAyBzO,MAAhC;GAN6D;;;;;;;WActDmC,KAAT,EAAgB;WACPZ,OAAOK,IAAP,CAAY,KAAK6M,MAAjB,EAAyB1M,QAAzB,CAAkCI,KAAlC,CAAP;GAf6D;;;;;;SAsBxDA,KAAP,EAAc;QACR,KAAKJ,QAAL,CAAcI,KAAd,CAAJ,EAA0B;aACjB,KAAKsM,MAAL,CAAYtM,KAAZ,CAAP;;;CAxBN;;;;;;;;;AAoCA,AAAe,SAASuM,mBAAT,OAIZ;MAJyC;kBAAA;;GAIzC;MADExL,UACF;;SACM3B,OAAOC,MAAP,CACLyB,qBAAYnD,cAAZ,EAA4BU,eAA5B,IAAgD0C,UAAhD,EADK,EAELsL,uBAFK,CAAP;;;AChDF;;;;;;;;AAQA,AAAe,SAASG,sBAAT,CACbvL,CADa,EAEbwL,gBAFa,EAGb;SACOrN,OAAOC,MAAP,CACL4B,CADK;sCAEgC;;;;;;;;;;;;UAY7BU,WAAN,EAAmB+K,SAASzM,SAA5B,EAAuC;UACjC,CAAC0B,WAAD,IAAgBA,YAAYC,KAAZ,EAApB,EAAyC;cACjC,IAAIpE,KAAJ,CAAU,2BAAV,CAAN;;UAEEkP,MAAJ,EAAY;eACH3M,OAAP,CAAgB4C,CAAD,IAAO;cAChB,CAAC,KAAK/C,QAAL,CAAc+C,CAAd,CAAL,EAAuB;kBACf,IAAInF,KAAJ,CAAW,iBAAgBmF,CAAE,iBAA7B,CAAN;;SAFJ;;;WAOGxB,MAAL,CAAYwL,OAAZ,GAAsB,EAAtB;YACMC,OAAOF,UAAU/K,YAAY+K,MAAZ,EAAvB;WACK3M,OAAL,CAAcC,KAAD,IAAW;cAChBS,KAAKkB,YAAYkL,iBAAZ,CAA8B7M,KAA9B,CAAX;;aAEKmB,MAAL,CAAYwL,OAAZ,CAAoB3M,KAApB,IAA6ByM,iBAAiBhM,EAAjB,CAA7B;OAHF;aAKO,KAAKU,MAAZ;;GAjCC,CAAP;;;ACZF;;;;;;;;;AASA,MAAM2L,sDAAuD;;;;UAInD;SACDjP,MAAL,GAAc,CAAd;SACKT,KAAL,GAAa,CAAb;SACK2P,IAAL,GAAY,KAAZ;SACKC,MAAL,GAAc,EAAd;GARyD;;;;;;OAetDb,KAAL,EAAY;QACN,KAAKY,IAAT,EAAe;WACRC,MAAL,CAAY,KAAK5P,KAAjB,IAA0B+O,KAA1B;WACK/O,KAAL,GAAa,CAAC,KAAKA,KAAL,GAAa,CAAd,IAAmB,KAAK6P,QAArC;KAFF,MAGO;WACAD,MAAL,CAAY/O,IAAZ,CAAiBkO,KAAjB;WACKtO,MAAL,IAAe,CAAf;WACKkP,IAAL,GAAa,KAAKlP,MAAL,KAAgB,KAAKoP,QAAlC;;GAtBuD;;;;;;;MA+BvDC,GAAJ,EAAS;WACA,KAAKF,MAAL,CAAY,CAACE,MAAM,KAAK9P,KAAZ,IAAqB,KAAK6P,QAAtC,CAAP;GAhCyD;;;;;;OAuCtDd,KAAL,EAAY;SACLtO,MAAL,GAAc,KAAKoP,QAAnB;SACK7P,KAAL,GAAa,CAAb;SACK2P,IAAL,GAAY,IAAZ;SACKC,MAAL,GAAczO,MAAM,KAAK0O,QAAX,EAAqBzO,IAArB,CAA0B2N,KAA1B,CAAd;GA3CyD;;;;;;;UAmDnDrM,QAAR,EAAkB;SACX,IAAIO,IAAI,CAAb,EAAgBA,IAAI,KAAKxC,MAAzB,EAAiCwC,KAAK,CAAtC,EAAyC;eAC9B,KAAK2M,MAAL,CAAY,CAAC3M,IAAI,KAAKjD,KAAV,IAAmB,KAAK6P,QAApC,CAAT,EAAwD5M,CAAxD;;GArDuD;;;;;;WA6DlD;WACA,KAAK2M,MAAL,CAAY9O,KAAZ,CAAkB,KAAKd,KAAvB,EACJW,MADI,CACG,KAAKiP,MAAL,CAAY9O,KAAZ,CAAkB,CAAlB,EAAqB,KAAKd,KAA1B,CADH,CAAP;;CA9DJ;;;;;;;;;;;;AA6EA,AAAe,SAAS+P,cAAT,CAAwBF,QAAxB,EAAkC;QACzCD,SAAS5N,OAAOE,MAAP,CAAcwN,uBAAd,CAAf;SACOG,QAAP,GAAkBA,QAAlB;SACOG,KAAP;SACOJ,MAAP;;;ACvFF;;;;;;AAMA,MAAMK,0BAA0B3P,gDAA+C;;;;;;oBAM3DyP,eAAe,CAAf,CAN2D;;;;;;sBAYzDG,EAApB,EAAwB;SACjBC,gBAAL,GAAwBD,EAAxB;SACKE,gBAAL,GAAwBL,eAAeG,EAAf,CAAxB;GAd2E;;;;;;UAqBrE;SACDE,gBAAL,CAAsBJ,KAAtB;WACO,IAAP;GAvB2E;;;;;;;;;UAiCrEpP,WAAR,EAAqB;UACbmM,aAAa,KAAKA,UAAL,CAAgBnM,WAAhB,CAAnB;QACIN,OAAJ,EAAa;WACNmN,UAAL,CAAgB7M,WAAhB;;SAEGyP,aAAL,CAAmBtD,UAAnB;WACO,KAAKO,OAAZ;GAvC2E;;;;;;;gBA+C/DgD,iBAAd,EAAiC;SAC1BhD,OAAL,CAAagD,iBAAb,GAAiCA,iBAAjC;SACKF,gBAAL,CAAsBvP,IAAtB,CAA2BX,KAAK2O,GAAL,CAASyB,iBAAT,CAA3B;SACKhD,OAAL,CAAa1B,aAAb,GAA6B,CAA7B;UACM2E,UAAU,KAAKH,gBAAL,CAAsB3P,MAAtC;SACK,IAAIwC,IAAI,CAAb,EAAgBA,IAAIsN,OAApB,EAA6BtN,KAAK,CAAlC,EAAqC;WAC9BqK,OAAL,CAAa1B,aAAb,IAA8B,KAAKwE,gBAAL,CAAsB7O,GAAtB,CAA0B0B,CAA1B,CAA9B;;SAEGqK,OAAL,CAAa1B,aAAb,IAA8B2E,OAA9B;;CAvD4B,CAAhC;;;;;;;;AAiEA,AAAe,SAASC,qBAAT,CAA+B3M,CAA/B,EAAkCsM,mBAAmB,CAArD,EAAwD;MACjE,CAACvM,YAAYC,CAAZ,CAAL,EAAqB;UACb,IAAIzD,KAAJ,CAAU,6FAAV,CAAN;;QAEIkN,UAAUtL,OAAOC,MAAP,CACd,EAAEqO,mBAAmB,CAArB,EAAwB1E,eAAe,CAAvC,EADc,EAEd/H,EAAEE,MAAF,CAASzD,OAAT,GAAmB,EAAEiN,cAAc,EAAhB,EAAoBtC,kBAAkB,EAAtC,EAAnB,GAAgE,EAFlD,CAAhB;SAIOjJ,OAAOC,MAAP,CACL4B,CADK,EAELoM,wBAAwBpM,EAAEE,MAAF,CAASzD,OAAjC,CAFK,EAGL,EAAEgN,OAAF,EAAW8C,kBAAkBL,eAAeI,gBAAf,CAA7B,EAHK,CAAP;;;AClFF;;;;;;;;;;;;AAYA,SAASM,SAAT,CAAmB9J,KAAnB,EAA0B+J,SAA1B,EAAqCC,aAArC,EAAoD5B,KAApD,EAA2D;MACrD,CAAC4B,aAAL,EAAoB;MAChBA,cAAcC,WAAd,KAA8BzP,KAA9B,IAAuC,CAACwP,cAAcnO,QAAd,CAAuBuM,KAAvB,CAA5C,EAA2E;UACnE,IAAI3O,KAAJ,CAAW,cAAasQ,SAAU,cAAa3B,KAAM,gCAA+BpI,KAAM,gBAAegK,aAAc,KAAvH,CAAN;GADF,MAEO,IAAIA,cAAcC,WAAd,KAA8B5O,MAAlC,EAA0C;QAC3CA,OAAOK,IAAP,CAAYsO,aAAZ,EAA2BnO,QAA3B,CAAoC,KAApC,KAA8CuM,QAAQ4B,cAAc/O,GAAxE,EAA6E;YACrE,IAAIxB,KAAJ,CAAW,cAAasQ,SAAU,aAAY3B,KAAM,kDAAiD4B,cAAc/O,GAAI,eAAc+E,KAAM,IAA3I,CAAN;;QAEE3E,OAAOK,IAAP,CAAYsO,aAAZ,EAA2BnO,QAA3B,CAAoC,KAApC,KAA8CuM,QAAQ4B,cAAc7O,GAAxE,EAA6E;YACrE,IAAI1B,KAAJ,CAAW,cAAasQ,SAAU,aAAY3B,KAAM,kDAAiD4B,cAAc/O,GAAI,eAAc+E,KAAM,IAA3I,CAAN;;GALG,MAOA,IAAI,OAAOgK,aAAP,KAAyB,UAA7B,EAAyC;QAC1C,CAACA,cAAc5B,KAAd,CAAL,EAA2B;YACnB,IAAI3O,KAAJ,CAAW,cAAasQ,SAAU,aAAY3B,KAAM,iCAAgCpI,KAAM,IAA1F,CAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEN,AAAe,SAASkK,kBAAT,CAA4BlK,KAA5B,EAAmCgK,aAAnC,EAAkDG,MAAlD,EAA0D;QACjEnN,aAAa3B,OAAOC,MAAP,CAAc,EAAd,EAAkB6O,MAAlB,CAAnB;SACOzO,IAAP,CAAYsO,aAAZ,EAA2BhO,OAA3B,CAAoCoO,IAAD,IAAU;UACrCC,OAAOL,cAAcI,IAAd,CAAb;;;QAGIC,KAAKC,QAAL,IAAiB,CAACjP,OAAOK,IAAP,CAAYyO,MAAZ,EAAoBtO,QAApB,CAA6BuO,IAA7B,CAAtB,EAA0D;YAClD,IAAI3Q,KAAJ,CAAW,qBAAoB2Q,IAAK,4BAA2BpK,KAAM,IAArE,CAAN;;;;cAIQA,KAAV,EAAiBoK,IAAjB,EAAuBC,KAAKE,KAA5B,EAAmCJ,OAAOC,IAAP,CAAnC;;eAEWA,IAAX,IAAmBC,KAAKG,SAAL,GACjBH,KAAKG,SAAL,CAAeL,OAAOC,IAAP,CAAf,CADiB,GAEjBD,OAAOC,IAAP,CAFF;GAXF;SAeOpN,UAAP;;;AC5GF,MAAMyN,mBAAmBxE,cAAc;aAC1B;cACC,IADD;WAEF,EAAEhL,KAAK,CAAP;GAH4B;kBAKrB;cACJ,IADI;WAEP,CAAC,EAAEwM,QAAF,EAAYC,QAAZ,EAAD,KACJD,YAAYC,QAAZ,IAAwBD,WAAW,CAAnC,IAAwCC,WAAW;GARnB;kBAUrB;cACJ,IADI;WAEP,CAAC,MAAD,EAAS,UAAT;GAZ4B;iBActB;cACH,IADG;WAENgD,KAAKA,EAAE5Q,MAAF,KAAamM;GAhBU;cAkBzB;cACA,IADA;WAEH/G,KAAKA,EAAEpF,MAAF,KAAamM;;CApBJ,CAAzB;;;;;;;;;;;;;AAmCA,AAAe,SAAS0E,iBAAT,CAA2BzN,CAA3B,EAA8B;MACvC,CAACD,YAAYC,CAAZ,CAAL,EAAqB;UACb,IAAIzD,KAAJ,CAAU,6FAAV,CAAN;;qBAEiB,KAAnB,EAA0BgR,iBAAiBvN,EAAEE,MAAF,CAAS6I,SAA1B,CAA1B,EAAgE/I,EAAEE,MAAlE;SACO/B,OAAOC,MAAP,CACL4B,CADK,EAEL,EAAEiJ,MAAM,IAAI3L,KAAJ,CAAU0C,EAAEE,MAAF,CAAS6I,SAAnB,EAA8BxL,IAA9B,CAAmC,CAAnC,CAAR,EAFK,CAAP;;;ACzCF;;;;;AAKA,MAAMmQ,0EAA2E;;;;;wBAKzD;WACb,KAAKpB,gBAAZ;GAN6E;;;;;;sBAa3DD,EAApB,EAAwB;SACjBC,gBAAL,GAAwBD,EAAxB;WACO7N,IAAP,CAAY,KAAK6M,MAAjB,EAAyBvM,OAAzB,CAAkCC,KAAD,IAAW;WACrCsM,MAAL,CAAYtM,KAAZ,EAAmB4O,mBAAnB,CAAuCtB,EAAvC;KADF;GAf6E;;;;;;UAwBvE;WACCY,MAAP,CAAc,KAAK5B,MAAnB,EAA2BvM,OAA3B,CAAmC0O,KAAKA,EAAEI,KAAF,EAAxC;SACKnE,OAAL,GAAe;cACL,EADK;0BAEO,EAFP;2BAGQ,EAHR;8BAIW,EAJX;qCAKkB,EALlB;iBAMF,IANE;eAOJ;KAPX;QASI,KAAKvJ,MAAL,CAAYzD,OAAhB,EAAyB;WAClBoR,YAAL;;GApC2E;;;;;;UA4CvE9Q,WAAR,EAAqB;WACZkQ,MAAP,CAAc,KAAK5B,MAAnB,EAA2BvM,OAA3B,CAAmC0O,KAAKA,EAAEM,OAAF,CAAU/Q,WAAV,CAAxC;SACKyP,aAAL;GA9C6E;;kBAiD/D;UACRb,OAAOxN,OAAOK,IAAP,CAAY,KAAK6M,MAAjB,EAAyB0C,IAAzB,EAAb;SACKtE,OAAL,CAAagC,MAAb,GAAsBE,IAAtB;QACIqC,cAAc,CAAlB;QACIC,eAAe,CAAnB;QACIC,mBAAmB,CAAClQ,QAAxB;SACKyL,OAAL,CAAaiC,OAAb,GAAuBC,KACpBtM,GADoB,CAChB,CAAC8O,GAAD,EAAM/O,CAAN,KAAY;WACVqK,OAAL,CAAa2E,kBAAb,CAAgChP,CAAhC,IACE,KAAKiM,MAAL,CAAY8C,GAAZ,EAAiB1E,OAAjB,CAAyBgD,iBAD3B;WAEKhD,OAAL,CAAa4E,sBAAb,CAAoCjP,CAApC,IACE,KAAKiM,MAAL,CAAY8C,GAAZ,EAAiB1E,OAAjB,CAAyB1B,aAD3B;WAEK0B,OAAL,CAAa6E,mBAAb,CAAiClP,CAAjC,IACE/C,KAAK4I,GAAL,CAAS,KAAKwE,OAAL,CAAa4E,sBAAb,CAAoCjP,CAApC,CAAT,CADF;qBAEe,KAAKqK,OAAL,CAAa2E,kBAAb,CAAgChP,CAAhC,CAAf;sBACgB,KAAKqK,OAAL,CAAa6E,mBAAb,CAAiClP,CAAjC,CAAhB;UACI,KAAKqK,OAAL,CAAa4E,sBAAb,CAAoCjP,CAApC,IAAyC8O,gBAA7C,EAA+D;2BAC1C,KAAKzE,OAAL,CAAa4E,sBAAb,CAAoCjP,CAApC,CAAnB;aACKqK,OAAL,CAAa8E,SAAb,GAAyBJ,GAAzB;;aAEK,EAAE,CAACA,GAAD,GAAO,KAAK9C,MAAL,CAAY8C,GAAZ,EAAiB1E,OAA1B,EAAP;KAdmB,EAgBpBnK,MAhBoB,CAgBb,CAACU,CAAD,EAAIT,CAAJ,kBAAgBS,CAAhB,EAAsBT,CAAtB,CAhBa,EAgBe,EAhBf,CAAvB;SAiBKkK,OAAL,CAAa+E,6BAAb,GACE,KAAK/E,OAAL,CAAa6E,mBAAb,CAAiCjP,GAAjC,CAAqCE,KAAKA,IAAI0O,YAA9C,CADF;SAEKxE,OAAL,CAAagF,4BAAb,GACE,KAAKhF,OAAL,CAAa2E,kBAAb,CAAgC/O,GAAhC,CAAoCE,KAAKA,IAAIyO,WAA7C,CADF;QAEI,KAAK9N,MAAL,CAAYzD,OAAhB,EAAyB;WAClBiS,uBAAL;;;CA7EN;;AAkFA,MAAMC,uCAAuC;iBAC5B;SACRlF,OAAL,CAAaC,YAAb,GAA4B,EAA5B;SACKD,OAAL,CAAarC,gBAAb,GAAgC,EAAhC;GAHyC;;4BAMjB;QACpB,KAAKlH,MAAL,CAAY0O,6BAAZ,KAA8C,WAAlD,EAA+D;WACxDnF,OAAL,CAAaC,YAAb,GACE,KAAK2B,MAAL,CAAY,KAAK5B,OAAL,CAAa8E,SAAzB,EAAoC9E,OAApC,CAA4CC,YAD9C;WAEKD,OAAL,CAAarC,gBAAb,GACE,KAAKiE,MAAL,CAAY,KAAK5B,OAAL,CAAa8E,SAAzB,EAAoC9E,OAApC,CAA4CrC,gBAD9C;KAHF,MAKO,IAAI,KAAKlH,MAAL,CAAY0O,6BAAZ,KAA8C,SAAlD,EAA6D;WAC7DnF,OAAL,CAAaC,YAAb,GAA4BpM,MAAM,KAAKF,eAAX,EAA4BG,IAA5B,CAAiC,CAAjC,CAA5B;WACKkM,OAAL,CAAarC,gBAAb,GAAgC9J,MAAM,KAAKF,eAAL,KAAyB,KAAKyR,aAAL,CAAmBnK,cAAnB,KAAsC,MAAtC,GAA+C,CAA/C,GAAmD,CAA5E,CAAN,EAAsFnH,IAAtF,CAA2F,CAA3F,CAAhC;WACKkM,OAAL,CAAagC,MAAb,CAAoB3M,OAApB,CAA6BqP,GAAD,IAAS;aAC9B1E,OAAL,CAAaC,YAAb,CAA0BrK,GAA1B,CAA8B,CAACE,CAAD,EAAIH,CAAJ,KAAUG,IACtC,KAAKkK,OAAL,CAAa+E,6BAAb,CAA2CpP,CAA3C,IACA,KAAKiM,MAAL,CAAY8C,GAAZ,EAAiB1E,OAAjB,CAAyBC,YAAzB,CAAsCtK,CAAtC,CAFF;aAIKqK,OAAL,CAAarC,gBAAb,CAA8B/H,GAA9B,CAAkC,CAACE,CAAD,EAAIH,CAAJ,KAAUG,IAC1C,KAAKkK,OAAL,CAAa+E,6BAAb,CAA2CpP,CAA3C,IACA,KAAKiM,MAAL,CAAY8C,GAAZ,EAAiB1E,OAAjB,CAAyBrC,gBAAzB,CAA0ChI,CAA1C,CAFF;OALF;KAHK,MAaA;YACC,IAAI7C,KAAJ,CAAU,4DAAV,CAAN;;;CA1BN;;;;;;;;;;;;;AA0CA,AAAe,SAASuS,wBAAT,CAAkC9O,CAAlC,EAAqC4O,gCAAgC,WAArE,EAAkF;MAC3F,CAAC7O,YAAYC,CAAZ,CAAL,EAAqB;UACb,IAAIzD,KAAJ,CAAU,6FAAV,CAAN;;QAEIiR,IAAIrP,OAAOC,MAAP,CACR4B,CADQ,EAER0N,iCAFQ,EAGR1N,EAAEE,MAAF,CAASzD,OAAT,GAAmBkS,oCAAnB,GAA0D,EAHlD,CAAV;IAKEzO,MAAF,CAAS0O,6BAAT,GAAyCA,6BAAzC;SACOpB,CAAP;;;AClIF;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,AAAO,SAASuB,QAAT,CACLrO,WADK,EAELmO,aAFK,EAGLpG,sBAAsBzJ,SAHjB,EAIL;QACM,EAAEtC,cAAF,EAAkBU,eAAlB,KAAsCsD,WAA5C;QACM,EAAEqI,SAAF,EAAa1D,cAAb,EAA6BX,cAA7B,KAAgDmK,aAAtD;QACM/L,QAAQqI,gBACZvC,eACEiB,YAAYhK;kBAAA;;KAGPgP,aAHO,EAAZ,CADF,EAMEpG,mBANF,CADY,EASZM,SATY,EAUZ1D,cAVY,EAWZX,cAXY,CAAd;SAaO5B,MAAME,KAAN,CAAYtC,WAAZ,CAAP;;;;;;;;;;;;;;AAcF,AAAO,SAASsO,kBAAT,CACLtO,WADK,EAELmO,aAFK,EAGLpG,sBAAsBzJ,SAHjB,EAIL;QACM,EAAEtC,cAAF,EAAkBU,eAAlB,KAAsCsD,WAA5C;QACMoC,QAAQyI,uBACZD,+BAAsB5O,cAAtB,EAAsCU,eAAtC,IAA0DyR,aAA1D,EADY,EAEZrP,MAAMuP,SAASvP,EAAT,EAAaqP,aAAb,EAA4BpG,mBAA5B,CAFM,CAAd;SAIO3F,MAAME,KAAN,CAAYtC,WAAZ,CAAP;;;;;;;;;AASF,AAAO,SAASuO,YAAT,CACL/O,MADK,EAELoM,mBAAmBtN,SAFd,EAGL;QACM8D,QAAQ2K,kBAAkBd,sBAC9B9C,YAAYhK,UAAUK,MAAV,CAAZ,CAD8B,EAE9BoM,gBAF8B,CAAlB,CAAd;SAIOxD,UAAP,CAAkBhK,OAAlB,CAA0B,CAACkD,CAAD,EAAI5C,CAAJ,KAAU;UAC5Bc,MAAN,CAAa4I,UAAb,CAAwB1J,CAAxB,IAA6BjB,OAAOC,MAAP,CAAcqJ,qBACzCvH,OAAOxD,cADkC,EAEzCwD,OAAO9C,eAFkC,EAGzC8C,OAAOwE,cAHkC,CAAd,EAI1B1C,CAJ0B,CAA7B;GADF;QAOM4L,KAAN;SACO9K,KAAP;;;;;;;;;;AAUF,AAAO,SAASoM,sBAAT,CACLhP,MADK,EAELoM,mBAAmBtN,SAFd,EAGL;QACM8D,QAAQgM,yBAAyBxD,oBAAoBpL,MAApB,CAAzB,CAAd;QACMmL,MAAN,GAAe,EAAf;SACO7M,IAAP,CAAY0B,OAAOwL,OAAnB,EAA4B5M,OAA5B,CAAqCC,KAAD,IAAW;UACvCsM,MAAN,CAAatM,KAAb,IAAsBkQ,aAAa/O,OAAOwL,OAAP,CAAe3M,KAAf,CAAb,EAAoCuN,gBAApC,CAAtB;GADF;QAGMsB,KAAN;SACO9K,KAAP;;;AC1HF;;;;;;;;;AASA,MAAMqM,4CAA6C;;;;;;sBAM7B,KAN6B;;;;;;;;kBAcjC,KAdiC;;;;;;;6BAqBtBpS,WAA3B,EAAwC;QAClCsM,YAAY,CAAhB;QACI,KAAKnJ,MAAL,CAAYkP,cAAZ,KAA+B,SAAnC,EAA8C;WACvC,IAAIhQ,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;aACzCkQ,KAAL,CAAWlQ,CAAX,IAAgB,KAAKc,MAAL,CAAYqP,KAAZ,CAAkBnQ,CAAlB,IACd,KAAKc,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuB8J,UAAvB,CAAkCnM,WAAlC,CADF;qBAEa,KAAKuS,KAAL,CAAWlQ,CAAX,CAAb;;KAJJ,MAMO;WACAkQ,KAAL,GAAa,IAAIhS,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAAb;WACK+R,KAAL,CAAW,CAAX,IAAgB,KAAKpP,MAAL,CAAYsP,OAAZ,CAAoB,CAApB,EAAuBtG,UAAvB,CAAkCnM,WAAlC,CAAhB;mBACa,KAAKuS,KAAL,CAAW,CAAX,CAAb;;SAEGG,kBAAL,GAA0B,IAA1B;QACIpG,YAAY,CAAhB,EAAmB;WACZ,IAAIjK,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;aACzCkQ,KAAL,CAAWlQ,CAAX,KAAiBiK,SAAjB;;aAEK,IAAIA,SAAX;;SAEG,IAAI7F,IAAI,CAAb,EAAgBA,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC,EAAwC7L,KAAK,CAA7C,EAAgD;WACzC8L,KAAL,CAAW9L,CAAX,IAAgB,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC;;WAEK,CAAP;GA5C+C;;;;;;;yBAoD1BtS,WAAvB,EAAoC;QAC9BsM,YAAY,CAAhB;SACKqG,aAAL,GAAqB,KAAKJ,KAAL,CAAWrS,KAAX,EAArB;SACK,IAAIuG,IAAI,CAAb,EAAgBA,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC,EAAwC7L,KAAK,CAA7C,EAAgD;WACzC8L,KAAL,CAAW9L,CAAX,IAAgB,CAAhB;UACI,KAAKtD,MAAL,CAAYkP,cAAZ,KAA+B,SAAnC,EAA8C;aACvC,IAAIhQ,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;eACzCkQ,KAAL,CAAW9L,CAAX,KAAiB,KAAKkM,aAAL,CAAmBtQ,CAAnB,IACf,KAAKc,MAAL,CAAYyP,UAAZ,CAAuBvQ,CAAvB,EAA0BoE,CAA1B,CADF;;OAFJ,MAKO;aACA8L,KAAL,CAAW9L,CAAX,KAAiB,KAAKkM,aAAL,CAAmBlM,CAAnB,IAAwB,KAAKtD,MAAL,CAAYyP,UAAZ,CAAuBnM,IAAI,CAA3B,CAAzC;YACIA,IAAI,CAAR,EAAW;eACJ8L,KAAL,CAAW9L,CAAX,KAAiB,KAAKkM,aAAL,CAAmBlM,IAAI,CAAvB,IACf,KAAKtD,MAAL,CAAYyP,UAAZ,CAAwB,CAACnM,IAAI,CAAL,IAAU,CAAX,GAAgB,CAAvC,CADF;SADF,MAGO;eACA8L,KAAL,CAAW,CAAX,KAAiB,KAAKI,aAAL,CAAmB,KAAKxP,MAAL,CAAYmP,MAAZ,GAAqB,CAAxC,IACf,KAAKnP,MAAL,CAAYyP,UAAZ,CAAwB,KAAKzP,MAAL,CAAYmP,MAAZ,GAAqB,CAAtB,GAA2B,CAAlD,CADF;;;WAICC,KAAL,CAAW9L,CAAX,KAAiB,KAAKtD,MAAL,CAAYsP,OAAZ,CAAoBhM,CAApB,EAAuB0F,UAAvB,CAAkCnM,WAAlC,CAAjB;mBACa,KAAKuS,KAAL,CAAW9L,CAAX,CAAb;;QAEE6F,YAAY,MAAhB,EAAwB;WACjB,IAAI7F,IAAI,CAAb,EAAgBA,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC,EAAwC7L,KAAK,CAA7C,EAAgD;aACzC8L,KAAL,CAAW9L,CAAX,KAAiB6F,SAAjB;;aAEK,IAAIA,SAAX;;WAEK,CAAP;;CAjFJ;;;;;;;;;;;;;;;AAkGA,AAAe,SAASuG,WAAT,CAAqB5P,CAArB,EAAwB;MACjC,CAACD,YAAYC,CAAZ,CAAL,EAAqB;UACb,IAAIzD,KAAJ,CAAU,6FAAV,CAAN;;SAEK4B,OAAOC,MAAP,CAAc4B,CAAd,EAAiBmP,gBAAjB,CAAP;;;AC5GF,MAAMU,4BAA4B,IAAlC;;;;;;;AAOA,MAAMC,mDAAoD;;;;;eAK3CpP,WAAb,EAA0B;QACpB,CAACA,WAAD,IAAgBA,YAAYC,KAAZ,EAApB,EAAyC;;SAEpCiH,QAAL,CAAclH,WAAd;SACKqJ,uBAAL,CAA6BrJ,YAAYsJ,iBAAZ,EAA7B;QACI,KAAK9J,MAAL,CAAY6I,SAAZ,GAAwB,CAA5B,EAA+B;WACxBgH,6BAAL,CAAmCrP,WAAnC;KADF,MAEO;WACAsP,uBAAL,CAA6BtP,WAA7B;WACKuP,4BAAL,CAAkCvP,WAAlC;;GAdoD;;;;;;;WAuB/CA,WAAT,EAAsB;UACd;oBAAA;qBAAA;eAAA;oBAAA;;QAMF,KAAKR,MANT;SAOKA,MAAL,CAAYsP,OAAZ,GAAsBlS,MAAMQ,IAAN,CACpB,IAAIR,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,CADoB,EAEpB,MAAMxF,YAAYhK,UAAU;oBAAA;qBAAA;eAAA;oBAAA;;KAAV,CAAZ,CAFc,CAAtB;SAUKK,MAAL,CAAYsP,OAAZ,CAAoB1Q,OAApB,CAA4BoR,KAAKA,EAAEtI,QAAF,EAAjC;SACK0H,KAAL,GAAa,IAAIhS,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAAb;SACKmS,aAAL,GAAqB,IAAIpS,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAArB;SACK0L,IAAL,GAAY,IAAI3L,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAAZ;SACK4S,YAAL,GAAoB,IAAI7S,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAApB;;;;UAIM6S,YAAY1P,YAAYxD,IAAZ,EAAlB;SACKmT,aAAL,GAAqB,IAAI/S,KAAJ,CAAU8S,SAAV,EAAqB7S,IAArB,CAA0B,IAA1B,CAArB;SACK+S,eAAL,GAAuB,IAAIhT,KAAJ,CAAU8S,SAAV,EAAqB7S,IAArB,CAA0B,IAA1B,CAAvB;SACKgT,uBAAL,GAA+B,IAAIjT,KAAJ,CAAU8S,SAAV,EAAqB7S,IAArB,CAA0B,IAA1B,CAA/B;AACA,AACA,QAAI6B,IAAI,CAAR;gBACYN,OAAZ,CAAqBG,MAAD,IAAY;YACxBuR,IAAIvR,OAAOrC,MAAjB;WACKyT,aAAL,CAAmBjR,CAAnB,IAAwB9B,MAAMQ,IAAN,CACtB,IAAIR,KAAJ,CAAUkT,CAAV,CADsB,EAEtB,MAAM,IAAIlT,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAFgB,CAAxB;UAII,KAAK2C,MAAL,CAAYkP,cAAZ,KAA+B,SAAnC,EAA8C;aACvCkB,eAAL,CAAqBlR,CAArB,IAA0B9B,MAAMQ,IAAN,CACxB,IAAIR,KAAJ,CAAUkT,CAAV,CADwB,EAExB,MAAMlT,MAAMQ,IAAN,CACJ,IAAIR,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,CADI,EAEJ,MAAM,IAAI/R,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAFF,CAFkB,CAA1B;OADF,MAQO;aACA+S,eAAL,CAAqBlR,CAArB,IAA0B9B,MAAMQ,IAAN,CACxB,IAAIR,KAAJ,CAAUkT,CAAV,CADwB,EAExB,MAAM,IAAIlT,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAZ,GAAqB,CAA/B,EAAkC9R,IAAlC,CAAuC,CAAvC,CAFkB,CAA1B;;WAKGgT,uBAAL,CAA6BnR,CAA7B,IACE,IAAI9B,KAAJ,CAAU,KAAK4C,MAAL,CAAY6I,SAAtB,EAAiCxL,IAAjC,CAAsC,CAAtC,CADF;WAEK,IAAIyE,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;aAC5CuO,uBAAL,CAA6BnR,CAA7B,EAAgC4C,CAAhC,IACE1E,MAAMQ,IAAN,CACE,IAAIR,KAAJ,CAAUkT,CAAV,CADF,EAEE,MAAM,IAAIlT,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAFR,CADF;;AAMF,AAGA6B,WAAK,CAAL;KAhCF;;SAmCKqR,QAAL,GAAgB,IAAInT,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAAhB;SACKmT,kBAAL,GAA0B,IAAIpT,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAZ,GAAqB,KAAKnP,MAAL,CAAY6I,SAA3C,EAAsDxL,IAAtD,CAA2D,CAA3D,CAA1B;GA3FsD;;;;;;iBAkGzCmD,WAAf,EAA4B;QACtB6H,UAAU,CAAd;;;;QAII7J,cAAc,CAAlB;gBACYI,OAAZ,CAAqBG,MAAD,IAAY;UAC1BA,OAAOrC,MAAP,GAAgB,CAApB,EAAuB;mBACV,KAAK+T,wBAAL,CAA8B1R,MAA9B,EAAsCP,WAAtC,CAAX;;qBAEa,CAAf;KAJF;SAMKkS,iBAAL,CAAuBlQ,WAAvB;;;;;;SAMK,IAAItB,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;WACzC,IAAI4C,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;aAC5C9B,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B8I,aAA9B,CAA4ChH,CAA5C,IAAiD,CAAjD;YACI,KAAK9B,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;eACpCxE,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C2C,UAA5C,GACE,IAAIrH,KAAJ,CAAU,KAAK4C,MAAL,CAAY1D,SAAZ,IAAyB,CAAnC,EAAsCe,IAAtC,CAA2C,CAA3C,CADF;SADF,MAGO;eACA2C,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C2C,UAA5C,GACE,IAAIrH,KAAJ,CAAU,KAAK4C,MAAL,CAAY1D,SAAtB,EAAiCe,IAAjC,CAAsC,CAAtC,CADF;;;;;SAMDsT,oCAAL,CAA0CnQ,WAA1C;SACKoQ,sBAAL,CAA4BpQ,WAA5B;SACKqQ,4BAAL,CAAkCrQ,WAAlC;QACI,KAAKR,MAAL,CAAYkP,cAAZ,KAA+B,SAAnC,EAA8C;WACvC4B,sBAAL,CAA4BtQ,WAA5B;;SAEGuQ,4BAAL,CAAkCvQ,WAAlC;WACO6H,OAAP;GAxIsD;;;;;;sBA+IpC;SACb2I,oBAAL;SACKb,aAAL,GAAqB,IAArB;SACKC,eAAL,GAAuB,IAAvB;SACKC,uBAAL,GAA+B,IAA/B;SACKY,QAAL,GAAgB,IAAhB;SACKC,OAAL,GAAe,IAAf;SACKX,QAAL,GAAgB,IAAhB;SACKC,kBAAL,GAA0B,IAA1B;SACKxQ,MAAL,CAAYsP,OAAZ,GAAsB,KAAKtP,MAAL,CAAYsP,OAAZ,CAAoBnQ,GAApB,CAAwB6Q,KAAKA,EAAEhQ,MAA/B,CAAtB;GAxJsD;;;;;;;0BAgKhCkK,UAAxB,EAAoC;QAC9B,KAAKlK,MAAL,CAAYkP,cAAZ,KAA+B,SAAnC,EAA8C;WACvCiC,UAAL;KADF,MAEO;WACAC,YAAL;;UAEI/H,wBAAwBa,WAAW/K,GAAX,CAAeiL,OAAOjO,KAAK4B,GAAL,CAClD,KAAKiC,MAAL,CAAYmF,cAAZ,CAA2BkF,QADuB,EAElD,KAAKrK,MAAL,CAAYmF,cAAZ,CAA2BmF,QAA3B,GAAsCF,GAFY,CAAtB,CAA9B;UAIMiH,iBAAkB,KAAKrR,MAAL,CAAYwE,cAAZ,KAA+B,MAAhC,GACrB,MAAM,IAAIpH,KAAJ,CAAU,KAAK4C,MAAL,CAAY1D,SAAZ,IAAyB,CAAnC,EACHe,IADG,CACE,KAAK2C,MAAL,CAAYmF,cAAZ,CAA2BkF,QAA3B,GAAsC,CADxC,CADe,GAGrB,MAAM,IAAIjN,KAAJ,CAAU,KAAK4C,MAAL,CAAY1D,SAAtB,EACHe,IADG,CACE,CADF,CAHR;SAKK,IAAI6B,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;;YAExC8Q,IAAI,KAAKhQ,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,CAAV;QACEmK,qBAAF,GAA0BA,qBAA1B;WACK,IAAIvH,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;UAC/C9B,MAAF,CAAS4I,UAAT,CAAoB9G,CAApB,EAAuB2C,UAAvB,GAAoC4M,gBAApC;UACErR,MAAF,CAAS4I,UAAT,CAAoB9G,CAApB,EAAuBsH,UAAvB,CAAkCC,qBAAlC;UACErJ,MAAF,CAAS8I,aAAT,CAAuBhH,CAAvB,IAA4B,IAAI,KAAK9B,MAAL,CAAY6I,SAA5C;;;GAtLkD;;;;;;;;0BAiMhCrI,WAAxB,EAAqC;QAC/B,CAACA,WAAD,IAAgBA,YAAYC,KAAZ,EAApB,EAAyC;;SAEpC,IAAIwD,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,MAAL,CAAYmP,MAAhC,EAAwClL,KAAK,CAA7C,EAAgD;WACzC,IAAI3G,IAAI,CAAb,EAAgBA,IAAI,KAAK0C,MAAL,CAAY1D,SAAhC,EAA2CgB,KAAK,CAAhD,EAAmD;aAC5C0C,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBjE,MAAvB,CAA8B4I,UAA9B,CAAyC,CAAzC,EAA4CzL,IAA5C,CAAiDG,CAAjD,IAAsD,GAAtD;;;;UAIEoN,SAAS,IAAItN,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAAf;gBACYuB,OAAZ,CAAqBG,MAAD,IAAY;YACxB6C,OAAOzF,KAAKC,KAAL,CAAW2C,OAAOrC,MAAP,GAAgB,KAAKsD,MAAL,CAAYmP,MAAvC,CAAb;UACItN,SAAS,CAAb;WACK,IAAIoC,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,MAAL,CAAYmP,MAAhC,EAAwClL,KAAK,CAA7C,EAAgD;aACzC,IAAI1G,IAAI,CAAb,EAAgBA,IAAIqE,IAApB,EAA0BrE,KAAK,CAA/B,EAAkC;eAC3B,IAAID,IAAI,CAAb,EAAgBA,IAAI,KAAK0C,MAAL,CAAY1D,SAAhC,EAA2CgB,KAAK,CAAhD,EAAmD;iBAC5C0C,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBjE,MAAvB,CAA8B4I,UAA9B,CAAyC,CAAzC,EAA4CzL,IAA5C,CAAiDG,CAAjD,KACEyB,OAAOvB,GAAP,CAAWqE,SAAStE,CAApB,EAAuBD,CAAvB,CADF;;;kBAIMsE,IAAV;eACOqC,CAAP,KAAarC,IAAb;;KAXJ;SAcK,IAAIqC,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,MAAL,CAAYmP,MAAhC,EAAwClL,KAAK,CAA7C,EAAgD;WACzC,IAAI3G,IAAI,CAAb,EAAgBA,IAAI,KAAK0C,MAAL,CAAY1D,SAAhC,EAA2CgB,KAAK,CAAhD,EAAmD;aAC5C0C,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBjE,MAAvB,CAA8B4I,UAA9B,CAAyC,CAAzC,EAA4CzL,IAA5C,CAAiDG,CAAjD,KAAuDoN,OAAOzG,CAAP,CAAvD;;;GA3NkD;;;;;;;;+BAsO3BzD,WAA7B,EAA0C;QACpC,CAACA,WAAD,IAAgBA,YAAYC,KAAZ,EAApB,EAAyC;;SAEpC,IAAIwD,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,MAAL,CAAYmP,MAAhC,EAAwClL,KAAK,CAA7C,EAAgD;WACzCjE,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBjE,MAAvB,CAA8B4I,UAA9B,CAAyC,CAAzC,EAA4CnE,UAA5C,GACE,IAAIrH,KAAJ,CAAU,KAAK4C,MAAL,CAAY1D,SAAZ,KAA0B,KAAK0D,MAAL,CAAYwE,cAAZ,KAA+B,MAA/B,GAAwC,CAAxC,GAA4C,CAAtE,CAAV,EAAoFnH,IAApF,CAAyF,CAAzF,CADF;;;UAIIqN,SAAS,IAAItN,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAAf;UACMiU,aAAa,IAAIlU,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAZ,GAAqB,KAAKnP,MAAL,CAAY1D,SAA3C,EAChBe,IADgB,CACX,CADW,CAAnB;gBAEYuB,OAAZ,CAAqBG,MAAD,IAAY;YACxB6C,OAAOzF,KAAKC,KAAL,CAAW2C,OAAOrC,MAAP,GAAgB,KAAKsD,MAAL,CAAYmP,MAAvC,CAAb;UACItN,SAAS,CAAb;WACK,IAAIoC,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,MAAL,CAAYmP,MAAhC,EAAwClL,KAAK,CAA7C,EAAgD;aACzC,IAAI1G,IAAI,CAAb,EAAgBA,IAAIqE,IAApB,EAA0BrE,KAAK,CAA/B,EAAkC;eAC3B,IAAIuJ,KAAK,CAAd,EAAiBA,KAAK,KAAK9G,MAAL,CAAY1D,SAAlC,EAA6CwK,MAAM,CAAnD,EAAsD;uBACvC7C,IAAI,KAAKjE,MAAL,CAAY1D,SAAlB,GAAgCwK,EAA3C,KACI/H,OAAOvB,GAAP,CAAWqE,SAAStE,CAApB,EAAuBuJ,EAAvB,CADJ;gBAEI,KAAK9G,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;mBACpC,IAAIuC,KAAK,CAAd,EAAiBA,KAAK,KAAK/G,MAAL,CAAY1D,SAAlC,EAA6CyK,MAAM,CAAnD,EAAsD;qBAC/C/G,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBjE,MAAvB,CAA8B4I,UAA9B,CAAyC,CAAzC,EACGnE,UADH,CACeqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAD7C,KAEIhI,OAAOvB,GAAP,CAAWqE,SAAStE,CAApB,EAAuBuJ,EAAvB,IACA/H,OAAOvB,GAAP,CAAWqE,SAAStE,CAApB,EAAuBwJ,EAAvB,CAHJ;;aAFJ,MAOO;mBACA/G,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBjE,MAAvB,CAA8B4I,UAA9B,CAAyC,CAAzC,EAA4CnE,UAA5C,CAAuDqC,EAAvD,KACE/H,OAAOvB,GAAP,CAAWqE,SAAStE,CAApB,EAAuBuJ,EAAvB,KAA8B,CADhC;;;;kBAKIlF,IAAV;eACOqC,CAAP,KAAarC,IAAb;;KAtBJ;;SA0BK,IAAIqC,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,MAAL,CAAYmP,MAAhC,EAAwClL,KAAK,CAA7C,EAAgD;WACzC,IAAI6C,KAAK,CAAd,EAAiBA,KAAK,KAAK9G,MAAL,CAAY1D,SAAlC,EAA6CwK,MAAM,CAAnD,EAAsD;mBACxC7C,IAAI,KAAKjE,MAAL,CAAY1D,SAAjB,GAA8BwK,EAAzC,KAAgD4D,OAAOzG,CAAP,CAAhD;YACI,KAAKjE,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;eACpC,IAAIuC,KAAK,CAAd,EAAiBA,KAAK,KAAK/G,MAAL,CAAY1D,SAAlC,EAA6CyK,MAAM,CAAnD,EAAsD;iBAC/C/G,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBjE,MAAvB,CAA8B4I,UAA9B,CAAyC,CAAzC,EACGnE,UADH,CACeqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAD7C,KAEI2D,OAAOzG,CAAP,CAFJ;;SAFJ,MAMO;eACAjE,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBjE,MAAvB,CAA8B4I,UAA9B,CAAyC,CAAzC,EAA4CnE,UAA5C,CAAuDqC,EAAvD,KAA8D4D,OAAOzG,CAAP,CAA9D;;;;;SAKD,IAAIA,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,MAAL,CAAYmP,MAAhC,EAAwClL,KAAK,CAA7C,EAAgD;WACzC,IAAI6C,KAAK,CAAd,EAAiBA,KAAK,KAAK9G,MAAL,CAAY1D,SAAlC,EAA6CwK,MAAM,CAAnD,EAAsD;YAChD,KAAK9G,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;eACpC,IAAIuC,KAAK,CAAd,EAAiBA,KAAK,KAAK/G,MAAL,CAAY1D,SAAlC,EAA6CyK,MAAM,CAAnD,EAAsD;iBAC/C/G,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBjE,MAAvB,CAA8B4I,UAA9B,CAAyC,CAAzC,EACGnE,UADH,CACeqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAD7C,KAEIuK,WAAYrN,IAAI,KAAKjE,MAAL,CAAY1D,SAAjB,GAA8BwK,EAAzC,IACAwK,WAAYrN,IAAI,KAAKjE,MAAL,CAAY1D,SAAjB,GAA8ByK,EAAzC,CAHJ;;SAFJ,MAOO;eACA/G,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBjE,MAAvB,CAA8B4I,UAA9B,CAAyC,CAAzC,EAA4CnE,UAA5C,CAAuDqC,EAAvD,KACEwK,WAAYrN,IAAI,KAAKjE,MAAL,CAAY1D,SAAjB,GAA8BwK,EAAzC,IACAwK,WAAYrN,IAAI,KAAKjE,MAAL,CAAY1D,SAAjB,GAA8BwK,EAAzC,CAFF;;;WAKC9G,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBmF,UAAvB;WACKpJ,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBgG,wBAAvB;;GA1SoD;;;;;;;;gCAoT1BzJ,WAA9B,EAA2C;SACpC,IAAIyD,IAAI,CAAb,EAAgBA,IAAI,KAAKjE,MAAL,CAAYmP,MAAhC,EAAwClL,KAAK,CAA7C,EAAgD;YACxC3E,KAAKC,YAAY,KAAKS,MAAjB,CAAX;;kBAEYpB,OAAZ,CAAoB,CAACG,MAAD,EAASP,WAAT,KAAyB;cACrCoD,OAAOzF,KAAKC,KAAL,CAAW2C,OAAOrC,MAAP,GAAgB,KAAKsD,MAAL,CAAYmP,MAAvC,CAAb;YACIvN,OAAO,CAAX,EAAc;aACT9E,IAAH,CAAQ0B,WAAR,EAAqBO,OAAOF,KAA5B;eACK,IAAItB,IAAI0G,IAAIrC,IAAjB,EAAuBrE,IAAI,CAAC0G,IAAI,CAAL,IAAUrC,IAArC,EAA2CrE,KAAK,CAAhD,EAAmD;eAC9CmE,SAAH,CAAalD,WAAb,EAA0B1B,IAA1B,CAA+BiC,OAAOqD,QAAP,CAAgB7E,CAAhB,CAA/B;;;OALN;UASI,CAAC+B,GAAGmB,KAAH,EAAL,EAAiB;cACT8Q,YAAY1C,SAASvP,EAAT,EAAa,KAAKU,MAAlB,CAAlB;aACK,IAAI8B,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;eAC5C9B,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBjE,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C3E,IAA5C,GACEoU,UAAU3I,UAAV,CAAqB9G,CAArB,EAAwB3E,IAD1B;eAEK6C,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBjE,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C2C,UAA5C,GACE8M,UAAU3I,UAAV,CAAqB9G,CAArB,EAAwB2C,UAD1B;eAEKzE,MAAL,CAAYsP,OAAZ,CAAoBrL,CAApB,EAAuBgG,wBAAvB;;;;GAxUgD;;;;;;eAkV3C;UACLjL,IAAI,IAAI,KAAKgB,MAAL,CAAYmP,MAA1B;SACKnP,MAAL,CAAYqP,KAAZ,GAAoB,IAAIjS,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC2B,CAAnC,CAApB;SACKgB,MAAL,CAAYyP,UAAZ,GAAyBrS,MAAMQ,IAAN,CACvB,IAAIR,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,CADuB,EAEvB,MAAM,IAAI/R,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC2B,CAAnC,CAFiB,CAAzB;GArVsD;;;;;;iBA+VzC;SACRgB,MAAL,CAAYqP,KAAZ,GAAoB,IAAIjS,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAApB;SACK2C,MAAL,CAAYqP,KAAZ,CAAkB,CAAlB,IAAuB,CAAvB;SACKrP,MAAL,CAAYyP,UAAZ,GAAyB,IAAIrS,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAZ,GAAqB,CAA/B,EAAkC9R,IAAlC,CAAuC,GAAvC,CAAzB;SACK2C,MAAL,CAAYyP,UAAZ,CAAuB,CAAC,KAAKzP,MAAL,CAAYmP,MAAZ,GAAqB,CAAtB,IAA2B,CAAlD,IAAuD,CAAvD;SACKnP,MAAL,CAAYyP,UAAZ,CAAwB,CAAC,KAAKzP,MAAL,CAAYmP,MAAZ,GAAqB,CAAtB,IAA2B,CAA5B,GAAiC,CAAxD,IAA6D,CAA7D;GApWsD;;;;;;;yBA4WjC;QACjB,KAAKnP,MAAL,CAAYkP,cAAZ,KAA+B,SAAnC,EAA8C;YACtCsC,YAAY,KAAKxR,MAAL,CAAYqP,KAAZ,CAAkBjQ,MAAlB,CAAyB,CAACa,CAAD,EAAIC,CAAJ,KAAUD,IAAIC,CAAvC,EAA0C,CAA1C,CAAlB;WACK,IAAIhB,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;aACzCc,MAAL,CAAYqP,KAAZ,CAAkBnQ,CAAlB,KAAwBsS,SAAxB;YACIC,iBAAiB,CAArB;aACK,IAAInO,IAAI,CAAb,EAAgBA,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC,EAAwC7L,KAAK,CAA7C,EAAgD;4BAC5B,KAAKtD,MAAL,CAAYyP,UAAZ,CAAuBvQ,CAAvB,EAA0BoE,CAA1B,CAAlB;;aAEG,IAAIA,IAAI,CAAb,EAAgBA,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC,EAAwC7L,KAAK,CAA7C,EAAgD;eACzCtD,MAAL,CAAYyP,UAAZ,CAAuBvQ,CAAvB,EAA0BoE,CAA1B,KAAgCmO,cAAhC;;;KATN,MAYO;WACA,IAAIvS,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;cACxCuS,iBAAiB,KAAKzR,MAAL,CAAYyP,UAAZ,CAAuBvQ,IAAI,CAA3B,IAAgC,KAAKc,MAAL,CAAYyP,UAAZ,CAAwBvQ,IAAI,CAAL,GAAU,CAAjC,CAAvD;aACKc,MAAL,CAAYyP,UAAZ,CAAuBvQ,IAAI,CAA3B,KAAiCuS,cAAjC;aACKzR,MAAL,CAAYyP,UAAZ,CAAwBvQ,IAAI,CAAL,GAAU,CAAjC,KAAuCuS,cAAvC;;;GA7XkD;;;;;;;;8BAwY5BC,EAA5B,EAAgC;SACzB,IAAIxS,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;WACzC6J,IAAL,CAAU7J,CAAV,IAAewS,EAAf;;GA1YoD;;;;;;;;0BAoZhCA,EAAxB,EAA4B7U,WAA5B,EAAyC;SAClCoT,YAAL,GAAoB,KAAKlH,IAAL,CAAUhM,KAAV,EAApB;SACK,IAAImC,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;WACzC6J,IAAL,CAAU7J,CAAV,IAAe,CAAf;UACI,KAAKc,MAAL,CAAYkP,cAAZ,KAA+B,SAAnC,EAA8C;aACvC,IAAI5L,IAAI,CAAb,EAAgBA,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC,EAAwC7L,KAAK,CAA7C,EAAgD;eACzCyF,IAAL,CAAU7J,CAAV,KAAgB,KAAKc,MAAL,CAAYyP,UAAZ,CAAuBvQ,CAAvB,EAA0BoE,CAA1B,IACd,KAAK2M,YAAL,CAAkB3M,CAAlB,CADc,GAEd,KAAKtD,MAAL,CAAYsP,OAAZ,CAAoBhM,CAApB,EAAuB0F,UAAvB,CAAkCnM,WAAlC,CAFF;;OAFJ,MAMO;aACAkM,IAAL,CAAU7J,CAAV,KAAgB,KAAKc,MAAL,CAAYyP,UAAZ,CAAuBvQ,IAAI,CAA3B,IACd,KAAK+Q,YAAL,CAAkB/Q,CAAlB,CADc,GAEd,KAAKc,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuB8J,UAAvB,CAAkCnM,WAAlC,CAFF;YAGIqC,IAAI,KAAKc,MAAL,CAAYmP,MAAZ,GAAqB,CAA7B,EAAgC;eACzBpG,IAAL,CAAU7J,CAAV,KAAgB,KAAKc,MAAL,CAAYyP,UAAZ,CAAwBvQ,IAAI,CAAL,GAAU,CAAjC,IACd,KAAK+Q,YAAL,CAAkB/Q,IAAI,CAAtB,CADc,GAEd,KAAKc,MAAL,CAAYsP,OAAZ,CAAoBpQ,IAAI,CAAxB,EAA2B8J,UAA3B,CAAsCnM,WAAtC,CAFF;;;WAKCkM,IAAL,CAAU7J,CAAV,KAAgBwS,EAAhB;UACIzM,OAAOC,KAAP,CAAa,KAAK6D,IAAL,CAAU7J,CAAV,CAAb,KAA8B/C,KAAK+H,GAAL,CAAS,KAAK6E,IAAL,CAAU7J,CAAV,CAAT,MAA2B,CAACpB,QAA9D,EAAwE;aACjEiL,IAAL,CAAU7J,CAAV,IAAe,KAAf;;;GA1akD;;;;;;;;;yBAsbjCyS,sBAAvB,EAA+C;QACzCxI,YAAY,CAAhB;SACKqG,aAAL,GAAqB,KAAKJ,KAAL,CAAWrS,KAAX,EAArB;SACK,IAAIuG,IAAI,CAAb,EAAgBA,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC,EAAwC7L,KAAK,CAA7C,EAAgD;WACzC8L,KAAL,CAAW9L,CAAX,IAAgB,CAAhB;UACI,KAAKtD,MAAL,CAAYkP,cAAZ,KAA+B,SAAnC,EAA8C;aACvC,IAAIhQ,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;eACzCkQ,KAAL,CAAW9L,CAAX,KAAiB,KAAKkM,aAAL,CAAmBtQ,CAAnB,IACf,KAAKc,MAAL,CAAYyP,UAAZ,CAAuBvQ,CAAvB,EAA0BoE,CAA1B,CADF;;OAFJ,MAKO;aACA8L,KAAL,CAAW9L,CAAX,KAAiB,KAAKkM,aAAL,CAAmBlM,CAAnB,IAAwB,KAAKtD,MAAL,CAAYyP,UAAZ,CAAuBnM,IAAI,CAA3B,CAAzC;YACIA,IAAI,CAAR,EAAW;eACJ8L,KAAL,CAAW9L,CAAX,KAAiB,KAAKkM,aAAL,CAAmBlM,IAAI,CAAvB,IACf,KAAKtD,MAAL,CAAYyP,UAAZ,CAAwB,CAACnM,IAAI,CAAL,IAAU,CAAX,GAAgB,CAAvC,CADF;SADF,MAGO;eACA8L,KAAL,CAAW,CAAX,KAAiB,KAAKI,aAAL,CAAmB,KAAKxP,MAAL,CAAYmP,MAAZ,GAAqB,CAAxC,IACf,KAAKnP,MAAL,CAAYyP,UAAZ,CAAwB,KAAKzP,MAAL,CAAYmP,MAAZ,GAAqB,CAAtB,GAA2B,CAAlD,CADF;;;WAICC,KAAL,CAAW9L,CAAX,KAAiBqO,uBAAuBrO,CAAvB,CAAjB;mBACa,KAAK8L,KAAL,CAAW9L,CAAX,CAAb;;QAEE2B,OAAOC,KAAP,CAAaiE,SAAb,CAAJ,EAA6B;YACrB,IAAI9M,KAAJ,CAAU,YAAV,CAAN;;QAEE8M,YAAY,MAAhB,EAAwB;WACjB,IAAI7F,IAAI,CAAb,EAAgBA,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC,EAAwC7L,KAAK,CAA7C,EAAgD;aACzC8L,KAAL,CAAW9L,CAAX,KAAiB6F,SAAjB;;aAEK,IAAIA,SAAX;;WAEK,CAAP;GAtdsD;;;;;;;;;;0BAiehCuI,EAAxB,EAA4BC,sBAA5B,EAAoD;SAC7C1B,YAAL,GAAoB,KAAKlH,IAAL,CAAUhM,KAAV,EAApB;SACK,IAAImC,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;WACzC6J,IAAL,CAAU7J,CAAV,IAAe,CAAf;UACI,KAAKc,MAAL,CAAYkP,cAAZ,KAA+B,SAAnC,EAA8C;aACvC,IAAI5L,IAAI,CAAb,EAAgBA,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC,EAAwC7L,KAAK,CAA7C,EAAgD;eACzCyF,IAAL,CAAU7J,CAAV,KACE,KAAKc,MAAL,CAAYyP,UAAZ,CAAuBvQ,CAAvB,EAA0BoE,CAA1B,IACA,KAAK2M,YAAL,CAAkB3M,CAAlB,CADA,GAEAqO,uBAAuBrO,CAAvB,CAHF;;OAFJ,MAOO;aACAyF,IAAL,CAAU7J,CAAV,KAAgB,KAAKc,MAAL,CAAYyP,UAAZ,CAAuBvQ,IAAI,CAA3B,IACd,KAAK+Q,YAAL,CAAkB/Q,CAAlB,CADc,GAEdyS,uBAAuBzS,CAAvB,CAFF;YAGIA,IAAI,KAAKc,MAAL,CAAYmP,MAAZ,GAAqB,CAA7B,EAAgC;eACzBpG,IAAL,CAAU7J,CAAV,KAAgB,KAAKc,MAAL,CAAYyP,UAAZ,CAAwBvQ,IAAI,CAAL,GAAU,CAAjC,IACd,KAAK+Q,YAAL,CAAkB/Q,IAAI,CAAtB,CADc,GAEdyS,uBAAuBzS,IAAI,CAA3B,CAFF;;;WAKC6J,IAAL,CAAU7J,CAAV,KAAgBwS,EAAhB;UACIzM,OAAOC,KAAP,CAAa,KAAK6D,IAAL,CAAU7J,CAAV,CAAb,KAA8B/C,KAAK+H,GAAL,CAAS,KAAK6E,IAAL,CAAU7J,CAAV,CAAT,MAA2B,CAACpB,QAA9D,EAAwE;aACjEiL,IAAL,CAAU7J,CAAV,IAAe,KAAf;;;GAxfkD;;;;;;;;;2BAogB/B0S,aAAzB,EAAwCpT,WAAxC,EAAqD;UAC7C8R,IAAIsB,cAAclV,MAAxB;;UAEMgV,KAAK,IAAItU,KAAJ,CAAUkT,CAAV,EAAajT,IAAb,CAAkB,CAAlB,CAAX;QACIgL,OAAJ;SACK4I,QAAL,GAAgB,EAAhB;SACKC,OAAL,GAAe,EAAf;;UAEMW,2BAA2BzU,MAAMQ,IAAN,CAC/B,IAAIR,KAAJ,CAAUkT,CAAV,CAD+B,EAE/B,MAAM,IAAIlT,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAFyB,CAAjC;SAIK,IAAIE,IAAI,CAAb,EAAgBA,IAAI+S,CAApB,EAAuB/S,KAAK,CAA5B,EAA+B;WACxB,IAAI2B,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;iCACrB3B,CAAzB,EAA4B2B,CAA5B,IACE,KAAKc,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuB8J,UAAvB,CAAkC4I,cAAcxP,QAAd,CAAuB7E,CAAvB,CAAlC,CADF;;;;;OAMD,CAAH,IAAQ,KAAKuU,0BAAL,CAAgCF,cAAcxP,QAAd,CAAuB,CAAvB,CAAhC,CAAR;cACU,CAACjG,KAAK2O,GAAL,CAAS4G,GAAG,CAAH,CAAT,CAAX;SACKT,QAAL,CAAcnU,IAAd,CAAmB,KAAKsS,KAAL,CAAWrS,KAAX,EAAnB;;SAEK,IAAIQ,IAAI,CAAb,EAAgBA,IAAI+S,CAApB,EAAuB/S,KAAK,CAA5B,EAA+B;SAC1BA,CAAH,IAAQ,KAAKwU,sBAAL,CAA4BF,yBAAyBtU,CAAzB,CAA5B,CAAR;iBACWpB,KAAK2O,GAAL,CAAS4G,GAAGnU,CAAH,CAAT,CAAX;WACK0T,QAAL,CAAcnU,IAAd,CAAmB,KAAKsS,KAAL,CAAWrS,KAAX,EAAnB;;;;SAIGiV,2BAAL,CAAiCN,GAAGpB,IAAI,CAAP,CAAjC;SACKY,OAAL,CAAapU,IAAb,CAAkB,KAAKiM,IAAL,CAAUhM,KAAV,EAAlB;;SAEK,IAAIQ,IAAI+S,IAAI,CAAjB,EAAoB/S,KAAK,CAAzB,EAA4BA,KAAK,CAAjC,EAAoC;WAC7B0U,uBAAL,CAA6BP,GAAGnU,CAAH,CAA7B,EAAoCsU,yBAAyBtU,IAAI,CAA7B,CAApC;WACK2T,OAAL,CAAapU,IAAb,CAAkB,KAAKiM,IAAL,CAAUhM,KAAV,EAAlB;;SAEGmU,OAAL,CAAagB,OAAb;;;SAGK,IAAI3U,IAAI,CAAb,EAAgBA,IAAI+S,CAApB,EAAuB/S,KAAK,CAA5B,EAA+B;WACxB,IAAI2B,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;aACzCiR,aAAL,CAAmB3R,WAAnB,EAAgCjB,CAAhC,EAAmC2B,CAAnC,IACG,KAAK+R,QAAL,CAAc1T,CAAd,EAAiB2B,CAAjB,IAAsB,KAAKgS,OAAL,CAAa3T,CAAb,EAAgB2B,CAAhB,CAAvB,GAA6CwS,GAAGnU,CAAH,CAD/C;;;;;QAMA4L,SAAJ;;SAEK,IAAI5L,IAAI,CAAb,EAAgBA,IAAI+S,CAApB,EAAuB/S,KAAK,CAA5B,EAA+B;WACxB,IAAI2B,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;oBAClC,CAAZ;YACI,KAAKc,MAAL,CAAY6I,SAAZ,KAA0B,CAA9B,EAAiC;gBACzBsJ,KAAKN,yBAAyBtU,CAAzB,EAA4B2B,CAA5B,CAAX;eACKmR,uBAAL,CAA6B7R,WAA7B,EAA0C,CAA1C,EAA6CjB,CAA7C,EAAgD2B,CAAhD,IACE,KAAKiR,aAAL,CAAmB3R,WAAnB,EAAgCjB,CAAhC,EAAmC2B,CAAnC,IAAwCiT,EAD1C;uBAEaA,EAAb;SAJF,MAKO;eACA,IAAIrQ,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;kBAC3CqQ,KAAK,KAAKnS,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EACR+J,mBADQ,CACY2I,cAAcxP,QAAd,CAAuB7E,CAAvB,CADZ,EACuCuE,CADvC,CAAX;iBAEKuO,uBAAL,CAA6B7R,WAA7B,EAA0CsD,CAA1C,EAA6CvE,CAA7C,EAAgD2B,CAAhD,IACE,KAAKiR,aAAL,CAAmB3R,WAAnB,EAAgCjB,CAAhC,EAAmC2B,CAAnC,IACAiT,EAFF;yBAGaA,EAAb;;;YAGAhJ,YAAY,CAAhB,EAAmB;eACZ,IAAIrH,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;iBAC5CuO,uBAAL,CAA6B7R,WAA7B,EAA0CsD,CAA1C,EAA6CvE,CAA7C,EAAgD2B,CAAhD,KAAsDiK,SAAtD;;;;;;;QAOJ,KAAKnJ,MAAL,CAAYkP,cAAZ,KAA+B,SAAnC,EAA8C;WACvC,IAAI3R,IAAI,CAAb,EAAgBA,IAAI+S,IAAI,CAAxB,EAA2B/S,KAAK,CAAhC,EAAmC;aAC5B,IAAI2B,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;eACzC,IAAIoE,IAAI,CAAb,EAAgBA,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC,EAAwC7L,KAAK,CAA7C,EAAgD;iBACzC8M,eAAL,CAAqB5R,WAArB,EAAkCjB,CAAlC,EAAqC2B,CAArC,EAAwCoE,CAAxC,IACE,KAAK2N,QAAL,CAAc1T,CAAd,EAAiB2B,CAAjB,IACA,KAAKc,MAAL,CAAYyP,UAAZ,CAAuBvQ,CAAvB,EAA0BoE,CAA1B,CADA,GAEA,KAAK4N,OAAL,CAAa3T,IAAI,CAAjB,EAAoB+F,CAApB,CAHF;iBAIK8M,eAAL,CAAqB5R,WAArB,EAAkCjB,CAAlC,EAAqC2B,CAArC,EAAwCoE,CAAxC,KACEuO,yBAAyBtU,IAAI,CAA7B,EAAgC+F,CAAhC,CADF;;;;KARR,MAaO;WACA,IAAI/F,IAAI,CAAb,EAAgBA,IAAI+S,IAAI,CAAxB,EAA2B/S,KAAK,CAAhC,EAAmC;aAC5B,IAAI2B,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;eACzCkR,eAAL,CAAqB5R,WAArB,EAAkCjB,CAAlC,EAAqC2B,IAAI,CAAzC,IACE,KAAK+R,QAAL,CAAc1T,CAAd,EAAiB2B,CAAjB,IACA,KAAKc,MAAL,CAAYyP,UAAZ,CAAuBvQ,IAAI,CAA3B,CADA,GAEA,KAAKgS,OAAL,CAAa3T,IAAI,CAAjB,EAAoB2B,CAApB,CAHF;eAIKkR,eAAL,CAAqB5R,WAArB,EAAkCjB,CAAlC,EAAqC2B,IAAI,CAAzC,KACE2S,yBAAyBtU,IAAI,CAA7B,EAAgC2B,CAAhC,CADF;cAEIA,IAAI,KAAKc,MAAL,CAAYmP,MAAZ,GAAqB,CAA7B,EAAgC;iBACzBiB,eAAL,CAAqB5R,WAArB,EAAkCjB,CAAlC,EAAsC2B,IAAI,CAAL,GAAU,CAA/C,IACE,KAAK+R,QAAL,CAAc1T,CAAd,EAAiB2B,CAAjB,IACA,KAAKc,MAAL,CAAYyP,UAAZ,CAAwBvQ,IAAI,CAAL,GAAU,CAAjC,CADA,GAEA,KAAKgS,OAAL,CAAa3T,IAAI,CAAjB,EAAoB2B,IAAI,CAAxB,CAHF;iBAIKkR,eAAL,CAAqB5R,WAArB,EAAkCjB,CAAlC,EAAsC2B,IAAI,CAAL,GAAU,CAA/C,KACE2S,yBAAyBtU,IAAI,CAA7B,EAAgC2B,IAAI,CAApC,CADF;;;;;;WAODmJ,OAAP;GApnBsD;;;;;;;oBA4nBtC7H,WAAlB,EAA+B;SACxB,IAAItB,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;WACzCqR,QAAL,CAAcrR,CAAd,IAAmB,CAAnB;WACK,IAAI4C,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;aAC5C0O,kBAAL,CAAyBtR,IAAI,KAAKc,MAAL,CAAY6I,SAAjB,GAA8B/G,CAAtD,IAA2D,CAA3D;;;;QAIAtD,cAAc,CAAlB;gBACYI,OAAZ,CAAqBG,MAAD,IAAY;WACzB,IAAIG,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;aACzC,IAAI3B,IAAI,CAAb,EAAgBA,IAAIwB,OAAOrC,MAA3B,EAAmCa,KAAK,CAAxC,EAA2C;eACpCgT,QAAL,CAAcrR,CAAd,KACE,KAAKiR,aAAL,CAAmB3R,WAAnB,EAAgCjB,CAAhC,EAAmC2B,CAAnC,CADF;eAEK,IAAI4C,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;iBAC5C0O,kBAAL,CAAyBtR,IAAI,KAAKc,MAAL,CAAY6I,SAAjB,GAA8B/G,CAAtD,KACE,KAAKuO,uBAAL,CAA6B7R,WAA7B,EAA0CsD,CAA1C,EAA6CvE,CAA7C,EAAgD2B,CAAhD,CADF;;;;qBAKS,CAAf;KAXF;GAroBsD;;;;;;;;uCA0pBnBsB,WAArC,EAAkD;QAC5ChC,cAAc,CAAlB;gBACYI,OAAZ,CAAqBG,MAAD,IAAY;WACzB,IAAIG,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;aACzC,IAAI3B,IAAI,CAAb,EAAgBA,IAAIwB,OAAOrC,MAA3B,EAAmCa,KAAK,CAAxC,EAA2C;eACpC,IAAIuE,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;iBAC5C9B,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B8I,aAA9B,CAA4ChH,CAA5C,KACE,KAAKuO,uBAAL,CAA6B7R,WAA7B,EAA0CsD,CAA1C,EAA6CvE,CAA7C,EAAgD2B,CAAhD,CADF;;;;qBAKS,CAAf;KATF;;;SAaK,IAAIA,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;WACzCc,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBkT,sBAAvB;;GA1qBoD;;;;;;;;yBAorBjC5R,WAAvB,EAAoC;SAC7B,IAAItB,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;WACzC,IAAI4C,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;aAC5C9B,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C3E,IAA5C,CAAiDE,IAAjD,CAAsD,CAAtD;;;;;QAKAmB,cAAc,CAAlB;gBACYI,OAAZ,CAAqBG,MAAD,IAAY;WACzB,IAAIG,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;aACzC,IAAI3B,IAAI,CAAb,EAAgBA,IAAIwB,OAAOrC,MAA3B,EAAmCa,KAAK,CAAxC,EAA2C;eACpC,IAAIuE,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;iBAC5C,IAAIxE,IAAI,CAAb,EAAgBA,IAAI,KAAK0C,MAAL,CAAY1D,SAAhC,EAA2CgB,KAAK,CAAhD,EAAmD;mBAC5C0C,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C3E,IAA5C,CAAiDG,CAAjD,KACE,KAAK+S,uBAAL,CAA6B7R,WAA7B,EAA0CsD,CAA1C,EAA6CvE,CAA7C,EAAgD2B,CAAhD,IACAH,OAAOvB,GAAP,CAAWD,CAAX,EAAcD,CAAd,CAFF;;;;;qBAOO,CAAf;KAZF;;;SAgBK,IAAI4B,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;WACzC,IAAI4C,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;aAC5C,IAAIxE,IAAI,CAAb,EAAgBA,IAAI,KAAK0C,MAAL,CAAY1D,SAAhC,EAA2CgB,KAAK,CAAhD,EAAmD;cAC7C,KAAKkT,kBAAL,CAAyBtR,IAAI,KAAKc,MAAL,CAAY6I,SAAjB,GAA8B/G,CAAtD,IAA2D,CAA/D,EAAkE;iBAC3D9B,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C3E,IAA5C,CAAiDG,CAAjD,KACE,KAAKkT,kBAAL,CAAyBtR,IAAI,KAAKc,MAAL,CAAY6I,SAAjB,GAA8B/G,CAAtD,CADF;;cAGEmD,OAAOC,KAAP,CAAa,KAAKlF,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C3E,IAA5C,CAAiDG,CAAjD,CAAb,CAAJ,EAAuE;kBAC/D,IAAIjB,KAAJ,CAAU,mBAAV,CAAN;;;;;GArtB8C;;;;;;;;+BAkuB3BmE,WAA7B,EAA0C;QACpChC,cAAc,CAAlB;gBACYI,OAAZ,CAAqBG,MAAD,IAAY;WACzB,IAAIG,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;aACzC,IAAI3B,IAAI,CAAb,EAAgBA,IAAIwB,OAAOrC,MAA3B,EAAmCa,KAAK,CAAxC,EAA2C;eACpC,IAAIuE,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;iBAC5C,IAAIgF,KAAK,CAAd,EAAiBA,KAAK,KAAK9G,MAAL,CAAY1D,SAAlC,EAA6CwK,MAAM,CAAnD,EAAsD;kBAChD,KAAK9G,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;qBACpC,IAAIuC,KAAKD,EAAd,EAAkBC,KAAK,KAAK/G,MAAL,CAAY1D,SAAnC,EAA8CyK,MAAM,CAApD,EAAuD;uBAChD/G,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EACG2C,UADH,CACeqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAD7C,KAEE,KAAKsJ,uBAAL,CAA6B7R,WAA7B,EAA0CsD,CAA1C,EAA6CvE,CAA7C,EAAgD2B,CAAhD,KACCH,OAAOvB,GAAP,CAAWD,CAAX,EAAcuJ,EAAd,IACC,KAAK9G,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C3E,IAA5C,CAAiD2J,EAAjD,CAFF,KAGC/H,OAAOvB,GAAP,CAAWD,CAAX,EAAcwJ,EAAd,IACC,KAAK/G,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C3E,IAA5C,CAAiD4J,EAAjD,CAJF,CAFF;;eAFJ,MAUO;sBACCiE,QAAQjM,OAAOvB,GAAP,CAAWD,CAAX,EAAcuJ,EAAd,IACZ,KAAK9G,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C3E,IAA5C,CAAiD2J,EAAjD,CADF;qBAEK9G,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C2C,UAA5C,CAAuDqC,EAAvD,KACE,KAAKuJ,uBAAL,CAA6B7R,WAA7B,EAA0CsD,CAA1C,EAA6CvE,CAA7C,EAAgD2B,CAAhD,IACC8L,SAAS,CAFZ;;;;;;qBAQK,CAAf;KA1BF;;;SA8BK,IAAI9L,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;WACzC,IAAI4C,IAAI,CAAb,EAAgBA,IAAI,KAAK9B,MAAL,CAAY6I,SAAhC,EAA2C/G,KAAK,CAAhD,EAAmD;YAC7C,KAAK0O,kBAAL,CAAyBtR,IAAI,KAAKc,MAAL,CAAY6I,SAAjB,GAA8B/G,CAAtD,IAA2D,CAA/D,EAAkE;eAC3D,IAAIgF,KAAK,CAAd,EAAiBA,KAAK,KAAK9G,MAAL,CAAY1D,SAAlC,EAA6CwK,MAAM,CAAnD,EAAsD;gBAChD,KAAK9G,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;mBACpC,IAAIuC,KAAKD,EAAd,EAAkBC,KAAK,KAAK/G,MAAL,CAAY1D,SAAnC,EAA8CyK,MAAM,CAApD,EAAuD;qBAChD/G,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EACG2C,UADH,CACeqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAD7C,KAEE,KAAKyJ,kBAAL,CAAyBtR,IAAI,KAAKc,MAAL,CAAY6I,SAAjB,GAA8B/G,CAAtD,CAFF;oBAGIgF,OAAOC,EAAX,EAAe;uBACR/G,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EACG2C,UADH,CACesC,KAAK,KAAK/G,MAAL,CAAY1D,SAAlB,GAA+BwK,EAD7C,IAEE,KAAK9G,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EACG2C,UADH,CACeqC,KAAK,KAAK9G,MAAL,CAAY1D,SAAlB,GAA+ByK,EAD7C,CAFF;;;aANN,MAYO;mBACA/G,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBc,MAAvB,CAA8B4I,UAA9B,CAAyC9G,CAAzC,EAA4C2C,UAA5C,CAAuDqC,EAAvD,KACE,KAAK0J,kBAAL,CAAyBtR,IAAI,KAAKc,MAAL,CAAY6I,SAAjB,GAA8B/G,CAAtD,CADF;;;;;WAMH9B,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBkK,UAAvB;WACKpJ,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuB+K,wBAAvB;;GA1xBoD;;;;;;;yBAmyBjCzJ,WAAvB,EAAoC;SAC7BR,MAAL,CAAYqP,KAAZ,CAAkBhS,IAAlB,CAAuB,CAAvB;;;QAGIgV,WAAW,CAAf;SACK,IAAI7T,cAAc,CAAvB,EACEA,cAAcgC,YAAYxD,IAAZ,EADhB,EAEEwB,eAAe,CAFjB,EAEoB;WACb,IAAIU,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;aACzCc,MAAL,CAAYqP,KAAZ,CAAkBnQ,CAAlB,KAAwB,KAAKiR,aAAL,CAAmB3R,WAAnB,EAAgC,CAAhC,EAAmCU,CAAnC,CAAxB;oBACY,KAAKc,MAAL,CAAYqP,KAAZ,CAAkBnQ,CAAlB,CAAZ;;;;;QAKAmT,WAAW,CAAf,EAAkB;WACX,IAAInT,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;aACzCc,MAAL,CAAYqP,KAAZ,CAAkBnQ,CAAlB,KAAwBmT,QAAxB;;KAFJ,MAIO;YACC,IAAIhW,KAAJ,CAAU,4BAAV,CAAN;;GAvzBoD;;;;;;;+BAg0B3BmE,WAA7B,EAA0C;;SAEnCR,MAAL,CAAYyP,UAAZ,GAAyB,KAAKzP,MAAL,CAAYkP,cAAZ,KAA+B,SAA/B,GACvB9R,MAAMQ,IAAN,CACE,IAAIR,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,CADF,EAEE,MAAM,IAAI/R,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAtB,EAA8B9R,IAA9B,CAAmC,CAAnC,CAFR,CADuB,GAKvB,IAAID,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAZ,GAAqB,CAA/B,EAAkC9R,IAAlC,CAAuC,CAAvC,CALF;;;QAQImB,cAAc,CAAlB;gBACYI,OAAZ,CAAqBG,MAAD,IAAY;UAC1BA,OAAOrC,MAAP,GAAgB,CAApB,EAAuB;aAChB,IAAIwC,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;;;cAG1C,KAAKc,MAAL,CAAYkP,cAAZ,KAA+B,WAAnC,EAAgD;iBACzClP,MAAL,CAAYyP,UAAZ,CAAuBvQ,IAAI,CAA3B,KAAiCyQ,yBAAjC;gBACIzQ,IAAI,KAAKc,MAAL,CAAYmP,MAAZ,GAAqB,CAA7B,EAAgC;mBACzBnP,MAAL,CAAYyP,UAAZ,CAAwBvQ,IAAI,CAAL,GAAU,CAAjC,KAAuCyQ,yBAAvC;aADF,MAEO;mBACA3P,MAAL,CAAYyP,UAAZ,CAAuBvQ,IAAI,CAA3B,KAAiCyQ,yBAAjC;;;;cAIA,KAAK3P,MAAL,CAAYkP,cAAZ,KAA+B,SAAnC,EAA8C;iBACvC,IAAI5L,IAAI,CAAb,EAAgBA,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC,EAAwC7L,KAAK,CAA7C,EAAgD;mBACzC,IAAI/F,IAAI,CAAb,EAAgBA,IAAIwB,OAAOrC,MAAP,GAAgB,CAApC,EAAuCa,KAAK,CAA5C,EAA+C;qBACxCyC,MAAL,CAAYyP,UAAZ,CAAuBvQ,CAAvB,EAA0BoE,CAA1B,KACE,KAAK8M,eAAL,CAAqB5R,WAArB,EAAkCjB,CAAlC,EAAqC2B,CAArC,EAAwCoE,CAAxC,CADF;;;WAHN,MAOO;iBACA,IAAI/F,IAAI,CAAb,EAAgBA,IAAIwB,OAAOrC,MAAP,GAAgB,CAApC,EAAuCa,KAAK,CAA5C,EAA+C;mBACxCyC,MAAL,CAAYyP,UAAZ,CAAuBvQ,IAAI,CAA3B,KACE,KAAKkR,eAAL,CAAqB5R,WAArB,EAAkCjB,CAAlC,EAAqC2B,IAAI,CAAzC,CADF;;gBAGEA,IAAI,KAAKc,MAAL,CAAYmP,MAAZ,GAAqB,CAA7B,EAAgC;mBACzB,IAAI5R,IAAI,CAAb,EAAgBA,IAAIwB,OAAOrC,MAAP,GAAgB,CAApC,EAAuCa,KAAK,CAA5C,EAA+C;qBACxCyC,MAAL,CAAYyP,UAAZ,CAAwBvQ,IAAI,CAAL,GAAU,CAAjC,KACE,KAAKkR,eAAL,CAAqB5R,WAArB,EAAkCjB,CAAlC,EAAsC2B,IAAI,CAAL,GAAU,CAA/C,CADF;;;;;;qBAOK,CAAf;KAnCF;;;QAuCI,KAAKc,MAAL,CAAYkP,cAAZ,KAA+B,SAAnC,EAA8C;WACvC,IAAIhQ,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;aACzC,IAAIoE,IAAI,CAAb,EAAgBA,IAAI,KAAKtD,MAAL,CAAYmP,MAAhC,EAAwC7L,KAAK,CAA7C,EAAgD;eACzCtD,MAAL,CAAYyP,UAAZ,CAAuBvQ,CAAvB,EAA0BoE,CAA1B,KACG,KAAKiN,QAAL,CAAcrR,CAAd,IAAoB,IAAIyQ,yBAD3B;cAEI1K,OAAOC,KAAP,CAAa,KAAKlF,MAAL,CAAYyP,UAAZ,CAAuBvQ,CAAvB,EAA0BoE,CAA1B,CAAb,CAAJ,EAAgD;kBACxC,IAAIjH,KAAJ,CAAU,6EAAV,CAAN;;;;KANR,MAUO;WACA,IAAI6C,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;aACzCc,MAAL,CAAYyP,UAAZ,CAAuBvQ,IAAI,CAA3B,KACG,KAAKqR,QAAL,CAAcrR,CAAd,IAAoB,IAAIyQ,yBAD3B;YAEI1K,OAAOC,KAAP,CAAa,KAAKlF,MAAL,CAAYyP,UAAZ,CAAuBvQ,IAAI,CAA3B,CAAb,CAAJ,EAAiD;gBACzC,IAAI7C,KAAJ,CAAU,6EAAV,CAAN;;YAEE6C,IAAI,KAAKc,MAAL,CAAYmP,MAAZ,GAAqB,CAA7B,EAAgC;eACzBnP,MAAL,CAAYyP,UAAZ,CAAwBvQ,IAAI,CAAL,GAAU,CAAjC,KACG,KAAKqR,QAAL,CAAcrR,CAAd,IAAoB,IAAIyQ,yBAD3B;cAEI1K,OAAOC,KAAP,CAAa,KAAKlF,MAAL,CAAYyP,UAAZ,CAAwBvQ,IAAI,CAAL,GAAU,CAAjC,CAAb,CAAJ,EAAuD;kBAC/C,IAAI7C,KAAJ,CAAU,6EAAV,CAAN;;;;;;CAv4BZ;;;;;;;;;;;;;;;;AA65BA,AAAe,SAASiW,eAAT,CACbxS,CADa,EAEbqP,SAAS,CAFI,EAGbtG,YAAY,CAHC,EAIb1D,iBAAiB,EAAEkF,UAAU,IAAZ,EAAkBC,UAAU,IAA5B,EAJJ,EAKb4E,iBAAiB,WALJ,EAMb1K,iBAAiB,MANJ,EAOb;MACI,CAACvG,OAAOK,IAAP,CAAYwB,CAAZ,EAAerB,QAAf,CAAwB,QAAxB,CAAL,EAAwC;UAChC,IAAIpC,KAAJ,CAAU,6FAAV,CAAN;;SAEK4B,OAAOC,MAAP,CACL4B,CADK,EAEL8P,mBAFK,EAGL;yBAEO9P,EAAEE,MADP;YAAA;eAAA;oBAAA;oBAAA;;;GAJG,CAAP;;;ACh7BF,MAAMuS,mBAAmB,CAACpD,MAAD,EAASD,cAAT,MAA6B;UAC5C;cACI,IADJ;WAEC,EAAErR,KAAK,CAAP;GAH2C;aAKzC;cACC,IADD;WAEF,EAAEA,KAAK,CAAP;GAP2C;kBASpC;cACJ,IADI;WAEP,CAAC,EAAEwM,QAAF,EAAYC,QAAZ,EAAD,KACJD,YAAYC,QAAZ,IAAwBD,WAAW,CAAnC,IAAwCC,WAAW;GAZJ;kBAcpC;cACJ,IADI;WAEP,CAAC,SAAD,EAAY,WAAZ;GAhB2C;kBAkBpC;cACJ,IADI;WAEP,CAAC,MAAD,EAAS,UAAT;GApB2C;SAsB7C;cACK,IADL;WAEEgD,KAAK4B,mBAAmB,WAAnB,IAAkC5B,EAAE5Q,MAAF,KAAayS;GAxBT;cA0BxC;cACA,IADA;WAEH7B,KAAM4B,mBAAmB,WAAnB,GACX5B,EAAE5Q,MAAF,KAAa,IAAIyS,MADN,GAEX7B,EAAE5Q,MAAF,KAAayS;GA9BmC;WAgC3C;cACG,IADH;WAEA7B,KAAKA,EAAE5Q,MAAF,KAAayS;;CAlCJ,CAAzB;;;;;;;AA4CA,MAAMqD,wDAAyD;sBACzC,KADyC;kBAE7C,KAF6C;;;;;;;UASrD;SACDxS,MAAL,CAAYsP,OAAZ,GAAsB,KAAKtP,MAAL,CAAYsP,OAAZ,CAAoBnQ,GAApB,CAAwB6Q,KAAKjB,aAAaiB,CAAb,EAAgBtC,KAAhB,EAA7B,CAAtB;WACO,IAAP;GAX2D;;;;;;UAkBrD;SACDrB,gBAAL,CAAsBJ,KAAtB;SACKjM,MAAL,CAAYsP,OAAZ,CAAoB1Q,OAApB,CAA6BoR,CAAD,IAAO;QAAItC,KAAF;KAArC;WACO,IAAP;GArB2D;;;;;;;aA6BlD7Q,WAAX,EAAwB;UAChB6U,KAAM,KAAKnC,kBAAN,GACT,KAAKkD,sBAAL,CAA4B5V,WAA5B,CADS,GAET,KAAKiV,0BAAL,CAAgCjV,WAAhC,CAFF;SAGK6V,iBAAL;SACKC,cAAL;WACO,IAAIjB,EAAX;GAnC2D;;mBAsC5C;SACVnI,OAAL,CAAaqJ,QAAb,GAAwB,GAAxB;SACK,IAAI1T,IAAI,KAAK2T,cAAlB,EAAkC3T,IAAI,KAAK4T,cAA3C,EAA2D5T,KAAK,CAAhE,EAAmE;UAC7D,KAAK6T,cAAT,EAAyB;aAClBxJ,OAAL,CAAaqJ,QAAb,IAAyB,CAAC,KAAKxD,KAAL,CAAWlQ,CAAX,IAAgB,KAAK8T,MAAL,CAAY9T,CAAZ,CAAhB,GAAiC,KAAK+T,MAAL,CAAY/T,CAAZ,CAAlC,KACtBA,IAAI,KAAKgU,2BADa,CAAzB;OADF,MAGO;aACA3J,OAAL,CAAaqJ,QAAb,IAA0B,KAAKxD,KAAL,CAAWlQ,CAAX,IAAgBA,CAAjB,GACvB,KAAKgU,2BADP;;;SAIC3J,OAAL,CAAaqJ,QAAb,IAAyB,KAAK5S,MAAL,CAAYmP,MAAZ,GAAqB,CAA9C;GAjD2D;;;;;;;sBAyDzC;SACb5F,OAAL,CAAa4J,cAAb,GAA8B,CAA9B;;QAEIC,YAAY,KAAKL,cAAL,GACb,KAAK3D,KAAL,CAAW,CAAX,IAAgB,KAAK4D,MAAL,CAAY,CAAZ,CADH,GAEd,KAAK5D,KAAL,CAAW,CAAX,CAFF;SAGK,IAAIlQ,IAAI,CAAb,EAAgBA,IAAI,KAAKc,MAAL,CAAYmP,MAAhC,EAAwCjQ,KAAK,CAA7C,EAAgD;UAC1C,KAAK6T,cAAT,EAAyB;YAClB,KAAK3D,KAAL,CAAWlQ,CAAX,IAAgB,KAAK8T,MAAL,CAAY9T,CAAZ,CAAjB,GAAmCkU,SAAvC,EAAkD;sBACpC,KAAKhE,KAAL,CAAWlQ,CAAX,IAAgB,KAAK8T,MAAL,CAAY9T,CAAZ,CAA5B;eACKqK,OAAL,CAAa4J,cAAb,GAA8BjU,CAA9B;;OAHJ,MAKO,IAAI,KAAKkQ,KAAL,CAAWlQ,CAAX,IAAgBkU,SAApB,EAA+B;oBACxB,KAAKhE,KAAL,CAAWlQ,CAAX,CAAZ;aACKqK,OAAL,CAAa4J,cAAb,GAA8BjU,CAA9B;;;;;SAKC2T,cAAL,GAAsB,KAAKtJ,OAAL,CAAa4J,cAAb,GAA8BhX,KAAKC,KAAL,CAAW,KAAK4D,MAAL,CAAYmP,MAAZ,GAAqB,CAAhC,CAApD;SACK2D,cAAL,GAAsB,KAAKvJ,OAAL,CAAa4J,cAAb,GAA8BhX,KAAKC,KAAL,CAAW,KAAK4D,MAAL,CAAYmP,MAAZ,GAAqB,CAAhC,CAApD;SACK0D,cAAL,GAAuB,KAAKA,cAAL,IAAuB,CAAxB,GAA6B,KAAKA,cAAlC,GAAmD,CAAzE;SACKC,cAAL,GAAuB,KAAKA,cAAL,IAAuB,KAAK9S,MAAL,CAAYmP,MAApC,GACpB,KAAK2D,cADe,GACE,KAAK9S,MAAL,CAAYmP,MADpC;SAEK+D,2BAAL,GAAmC,GAAnC;SACK,IAAIhU,IAAI,KAAK2T,cAAlB,EAAkC3T,IAAI,KAAK4T,cAA3C,EAA2D5T,KAAK,CAAhE,EAAmE;WAC5DgU,2BAAL,IAAoC,KAAKH,cAAL,GACjC,KAAK3D,KAAL,CAAWlQ,CAAX,IAAgB,KAAK8T,MAAL,CAAY9T,CAAZ,CADiB,GAElC,KAAKkQ,KAAL,CAAWlQ,CAAX,CAFF;;;CAnFN;;;;;;;AA+FA,MAAMmU,+DAAgE;;;;;;;;;aASzD7M,gBAAX,EAA6B;SACtB+C,OAAL,CAAaC,YAAb,GAA4BpM,MAAM,KAAK4C,MAAL,CAAY9C,eAAlB,EAAmCG,IAAnC,CAAwC,CAAxC,CAA5B;SACKkM,OAAL,CAAarC,gBAAb,GAAgC9J,MAAM,KAAK4C,MAAL,CAAYwE,cAAZ,KAA+B,MAA/B,GAAwC,KAAKxE,MAAL,CAAY9C,eAAZ,IAA+B,CAAvE,GAA2E,KAAK8C,MAAL,CAAY9C,eAA7F,EAA8GG,IAA9G,CAAmH,CAAnH,CAAhC;;QAEI,KAAK2C,MAAL,CAAYsT,mBAAZ,KAAoC,WAAxC,EAAqD;WAC9CtT,MAAL,CAAYsP,OAAZ,CAAoB,KAAK/F,OAAL,CAAa4J,cAAjC,EAAiDvF,OAAjD,CAAyDpH,gBAAzD;WACK+C,OAAL,CAAaC,YAAb,GACE,KAAKxJ,MAAL,CAAYsP,OAAZ,CAAoB,KAAK/F,OAAL,CAAa4J,cAAjC,EAAiD5J,OAAjD,CAAyDC,YAD3D;aAEO,KAAKD,OAAL,CAAaC,YAApB;;;UAGI+J,eAAgB,KAAKvT,MAAL,CAAYsT,mBAAZ,KAAoC,MAArC,GACnB,CADmB,GACf,KAAKT,cADX;UAEMW,eAAgB,KAAKxT,MAAL,CAAYsT,mBAAZ,KAAoC,MAArC,GACnB,KAAKtT,MAAL,CAAYmP,MADO,GACE,KAAK2D,cAD5B;QAEIW,wBAAyB,KAAKzT,MAAL,CAAYsT,mBAAZ,KAAoC,MAArC,GAC1B,CAD0B,GACtB,KAAKJ,2BADX;;QAGIO,yBAAyB,GAA7B,EAAkCA,wBAAwB,CAAxB;;;SAG7B,IAAIvU,IAAIqU,YAAb,EAA2BrU,IAAIsU,YAA/B,EAA6CtU,KAAK,CAAlD,EAAqD;WAC9Cc,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuB8J,UAAvB,CAAkCxC,gBAAlC;WACKxG,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBwK,UAAvB,CAAkClD,gBAAlC;YACMkN,qBAAqB,KAAK1T,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBqK,OAAvB,CAA+BC,YAA1D;WACK,IAAIlM,IAAI,CAAb,EAAgBA,IAAI,KAAK0C,MAAL,CAAY9C,eAAhC,EAAiDI,KAAK,CAAtD,EAAyD;YACnD,KAAKyV,cAAT,EAAyB;eAClBxJ,OAAL,CAAaC,YAAb,CAA0BlM,CAA1B,KACE,CAAC,KAAK8R,KAAL,CAAWlQ,CAAX,IAAgB,KAAK8T,MAAL,CAAY9T,CAAZ,CAAjB,KACCwU,mBAAmBpW,CAAnB,IAAwBmW,qBADzB,CADF;cAGI,KAAKzT,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;iBACpC,IAAIuC,KAAK,CAAd,EAAiBA,KAAK,KAAK/G,MAAL,CAAY9C,eAAlC,EAAmD6J,MAAM,CAAzD,EAA4D;mBACrDwC,OAAL,CAAarC,gBAAb,CAA+B5J,IAAI,KAAK0C,MAAL,CAAY9C,eAAjB,GAAoC6J,EAAlE,KACE,CAAC,KAAKqI,KAAL,CAAWlQ,CAAX,IAAgB,KAAK8T,MAAL,CAAY9T,CAAZ,CAAjB,KACC,KAAKkQ,KAAL,CAAWlQ,CAAX,IAAgB,KAAK8T,MAAL,CAAY9T,CAAZ,CADjB,KAEC,KAAKc,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBqK,OAAvB,CACErC,gBADF,CACoB5J,IAAI,KAAK0C,MAAL,CAAY9C,eAAjB,GAAoC6J,EADvD,IAED0M,qBAJA,CADF;;WAFJ,MASO;iBACAlK,OAAL,CAAarC,gBAAb,CAA8B5J,CAA9B,KACE,CAAC,KAAK8R,KAAL,CAAWlQ,CAAX,IAAgB,KAAK8T,MAAL,CAAY9T,CAAZ,CAAjB,KACC,KAAKkQ,KAAL,CAAWlQ,CAAX,IAAgB,KAAK8T,MAAL,CAAY9T,CAAZ,CADjB,KAEC,KAAKc,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBqK,OAAvB,CAA+BrC,gBAA/B,CAAgD5J,CAAhD,IACDmW,qBAHA,CADF;;SAdJ,MAoBO;eACAlK,OAAL,CAAaC,YAAb,CAA0BlM,CAA1B,KAAgC,KAAK8R,KAAL,CAAWlQ,CAAX,KAC7BwU,mBAAmBpW,CAAnB,IAAwBmW,qBADK,CAAhC;cAEI,KAAKzT,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;iBACpC,IAAIuC,KAAK,CAAd,EAAiBA,KAAK,KAAK/G,MAAL,CAAY9C,eAAlC,EAAmD6J,MAAM,CAAzD,EAA4D;mBACrDwC,OAAL,CAAarC,gBAAb,CAA+B5J,IAAI,KAAK0C,MAAL,CAAY9C,eAAjB,GAAoC6J,EAAlE,KACG,KAAKqI,KAAL,CAAWlQ,CAAX,KAAiB,CAAlB,IACC,KAAKc,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBqK,OAAvB,CACErC,gBADF,CACoB5J,IAAI,KAAK0C,MAAL,CAAY9C,eAAjB,GAAoC6J,EADvD,IAED0M,qBAHA,CADF;;WAFJ,MAQO;iBACAlK,OAAL,CAAarC,gBAAb,CAA8B5J,CAA9B,KACI,KAAK8R,KAAL,CAAWlQ,CAAX,KAAiB,CAAlB,GACD,KAAKc,MAAL,CAAYsP,OAAZ,CAAoBpQ,CAApB,EAAuBqK,OAAvB,CAA+BrC,gBAA/B,CAAgD5J,CAAhD,CADA,GAEAmW,qBAHF;;;;;WAQD,KAAKlK,OAAL,CAAaC,YAApB;;CA3EJ;;;;;;;;;;;;;AA0FA,AAAe,SAASmK,iBAAT,CAA2B7T,CAA3B,EAA8B;MACvC,CAACD,YAAYC,CAAZ,CAAL,EAAqB;UACb,IAAIzD,KAAJ,CAAU,6FAAV,CAAN;;qBAEiB,KAAnB,EAA0BkW,iBAAiBzS,EAAEE,MAAF,CAASmP,MAA1B,EAAkCrP,EAAEE,MAAF,CAASkP,cAA3C,CAA1B,EAAsFpP,EAAEE,MAAxF;SACO/B,OAAOC,MAAP,CACL4B,CADK,EAEL0S,sBAFK,EAGL1S,EAAEE,MAAF,CAASzD,OAAT,GAAmB8W,6BAAnB,GAAmD,EAH9C,EAIL;WACS,IAAIjW,KAAJ,CAAU0C,EAAEE,MAAF,CAASmP,MAAnB,EAA2B9R,IAA3B,CAAgC,CAAhC,CADT;qBAEmB,IAAID,KAAJ,CAAU0C,EAAEE,MAAF,CAASmP,MAAnB,EAA2B9R,IAA3B,CAAgC,CAAhC;GANd,EAQLuW,KARK,EAAP;;;AC5OF,MAAMC,qCAAqC,GAA3C;;;;;;;AAOA,MAAMC;;AAEN;;;;;;sBAMsB,KANtB;;;;;;;UAaU;UACAC,aAAa,KAAK/W,IAAL,EAAnB;SACKgD,MAAL,CAAYqP,KAAZ,GAAoB,IAAIjS,KAAJ,CAAU2W,UAAV,EAAsB1W,IAAtB,CAA2B,IAAI0W,UAA/B,CAApB;SACK/T,MAAL,CAAYyP,UAAZ,GAAyBrS,MAAMQ,IAAN,CACvB,IAAIR,KAAJ,CAAU2W,UAAV,CADuB,EAEvB,MAAM,IAAI3W,KAAJ,CAAU2W,UAAV,EAAsB1W,IAAtB,CAA2B,IAAI0W,UAA/B,CAFiB,CAAzB;SAIK/T,MAAL,CAAYgU,cAAZ,GAA6B,IAAI5W,KAAJ,CAAU2W,UAAV,EAAsB1W,IAAtB,CAA2B,GAA3B,CAA7B;WACO0P,MAAP,CAAc,KAAK5B,MAAnB,EAA2BvM,OAA3B,CAAoCgE,KAAD,IAAW;YACtC0K,IAAI1K,KAAV;QACEmQ,cAAF,GAAmB,IAAnB;KAFF;SAIKkB,uBAAL;WACO,IAAP;GA1BJ;;;;;;;;0BAmC0BC,oBAAoBpV,SAA5C,EAAuD;UAC/CqV,WAAYD,sBAAsBpV,SAAvB,GACfoV,iBADe,GAEf,IAAI9W,KAAJ,CAAU,KAAK4C,MAAL,CAAYmP,MAAZ,GAAqB,CAA/B,EAAkC9R,IAAlC,CAAuC,CAAvC,EACGT,MADH,CACU,CAACiX,kCAAD,CADV,CAFF;WAIOvV,IAAP,CAAY,KAAK6M,MAAjB,EAAyBvM,OAAzB,CAAkCC,KAAD,IAAW;WACrCsM,MAAL,CAAYtM,KAAZ,EAAmBmB,MAAnB,CAA0BkU,iBAA1B,GAA8CC,SAASpX,KAAT,EAA9C;KADF;GAxCJ;;;;;;UAiDU;WACCgQ,MAAP,CAAc,KAAK5B,MAAnB,EAA2BvM,OAA3B,CAAmC0O,KAAKA,EAAEI,KAAF,EAAxC;SACKnE,OAAL,GAAe;cACL,EADK;0BAEO,EAFP;2BAGQ,EAHR;8BAIW,EAJX;qCAKkB,EALlB;sBAMG,EANH;iBAOF,IAPE;eAQJ;KARX;QAUI,KAAKvJ,MAAL,CAAYzD,OAAhB,EAAyB;WAClBoR,YAAL;;SAEG4B,kBAAL,GAA0B,KAA1B;GAhEJ;;;;;;UAuEU1S,WAAR,EAAqB;QACf,KAAK0S,kBAAT,EAA6B;WACtBkD,sBAAL,CAA4B5V,WAA5B;KADF,MAEO;WACAiV,0BAAL,CAAgCjV,WAAhC;;WAEKyB,IAAP,CAAY,KAAK6M,MAAjB,EAAyB0C,IAAzB,GAAgCjP,OAAhC,CAAyCC,KAAD,IAAW;YAC3C+D,QAAQ,KAAKuI,MAAL,CAAYtM,KAAZ,CAAd;YACM6T,iBAAN;YACMC,cAAN;YACMrG,aAAN,CAAoB1J,MAAM2G,OAAN,CAAcgD,iBAAlC;KAJF;SAMKD,aAAL;;QAEI,KAAKtM,MAAL,CAAYzD,OAAhB,EAAyB;aAChBwQ,MAAP,CAAc,KAAK5B,MAAnB,EAA2BvM,OAA3B,CAAmC0O,KAAKA,EAAE5D,UAAF,CAAa7M,WAAb,CAAxC;;UAEI,KAAKmD,MAAL,CAAY0O,6BAAZ,KAA8C,WAAlD,EAA+D;aACxDnF,OAAL,CAAaC,YAAb,GACE,KAAK2B,MAAL,CAAY,KAAK5B,OAAL,CAAa8E,SAAzB,EAAoC9E,OAApC,CAA4CC,YAD9C;aAEKD,OAAL,CAAarC,gBAAb,GACE,KAAKiE,MAAL,CAAY,KAAK5B,OAAL,CAAa8E,SAAzB,EAAoC9E,OAApC,CAA4CrC,gBAD9C;OAHF,MAKO;aACAqC,OAAL,CAAaC,YAAb,GAA4B,IAAIpM,KAAJ,CAAU,KAAKF,eAAf,EAAgCG,IAAhC,CAAqC,CAArC,CAA5B;aACKkM,OAAL,CAAarC,gBAAb,GACE,IAAI9J,KAAJ,CAAU,KAAK4C,MAAL,CAAYwE,cAAZ,KAA+B,MAA/B,GACR,KAAKtH,eAAL,IAAwB,CADhB,GAER,KAAKA,eAFP,EAEwBG,IAFxB,CAE6B,CAF7B,CADF;;YAKI+W,aAAa,CAAjB;eACOrH,MAAP,CAAc,KAAK5B,MAAnB,EAA2BvM,OAA3B,CAAoCgE,KAAD,IAAW;eACvC,IAAItF,IAAI,CAAb,EAAgBA,IAAI,KAAKJ,eAAzB,EAA0CI,KAAK,CAA/C,EAAkD;iBAC3CiM,OAAL,CAAaC,YAAb,CAA0BlM,CAA1B,KACE,KAAKiM,OAAL,CAAa+E,6BAAb,CAA2C8F,UAA3C,IACAxR,MAAMyR,MAAN,CAAa9K,OAAb,CAAqBC,YAArB,CAAkClM,CAAlC,CAFF;;gBAII,KAAK0C,MAAL,CAAYwE,cAAZ,KAA+B,MAAnC,EAA2C;mBACpC,IAAIuC,KAAK,CAAd,EAAiBA,KAAK,KAAK7J,eAA3B,EAA4C6J,MAAM,CAAlD,EAAqD;qBAC9CwC,OAAL,CAAarC,gBAAb,CAA+B5J,IAAI,KAAKJ,eAAV,GAA6B6J,EAA3D,KACE,KAAKwC,OAAL,CAAa+E,6BAAb,CAA2C8F,UAA3C,IACAxR,MAAM2G,OAAN,CAAcrC,gBAAd,CAAgC5J,IAAI,KAAKJ,eAAV,GAA6B6J,EAA5D,CAFF;;aAFJ,MAMO;mBACAwC,OAAL,CAAarC,gBAAb,CAA8B5J,CAA9B,KACE,KAAKiM,OAAL,CAAa+E,6BAAb,CAA2C8F,UAA3C,IACAxR,MAAMyR,MAAN,CAAa9K,OAAb,CAAqBrC,gBAArB,CAAsC5J,CAAtC,CAFF;;;wBAKU,CAAd;SAlBF;;;GArGR;;;;;;;6BAkI6BT,WAA3B,EAAwC;QAClCsM,YAAY,CAAhB;QACIiL,aAAa,CAAjB;UACM5I,UAAUvN,OAAOK,IAAP,CAAY,KAAK6M,MAAjB,EAAyB0C,IAAzB,EAAhB;YACQjP,OAAR,CAAiBC,KAAD,IAAW;YACnB+D,QAAQ,KAAKuI,MAAL,CAAYtM,KAAZ,CAAd;YACMyV,IAAI1R,MAAM5C,MAAN,CAAamP,MAAvB;YACM6D,MAAN,GAAe,IAAI5V,KAAJ,CAAUkX,CAAV,EAAajX,IAAb,CAAkB,CAAlB,CAAf;YACM4V,MAAN,GAAe,IAAI7V,KAAJ,CAAUkX,CAAV,EAAajX,IAAb,CAAkB,CAAlB,CAAf;;;;UAIIuF,MAAM5C,MAAN,CAAakP,cAAb,KAAgC,SAApC,EAA+C;cACvC3F,OAAN,CAAcgD,iBAAd,GAAkC,CAAlC;aACK,IAAIrN,IAAI,CAAb,EAAgBA,IAAIoV,CAApB,EAAuBpV,KAAK,CAA5B,EAA+B;gBACvBkQ,KAAN,CAAYlQ,CAAZ,IAAiB,KAAKc,MAAL,CAAYqP,KAAZ,CAAkB+E,UAAlB,IACfxR,MAAM5C,MAAN,CAAaqP,KAAb,CAAmBnQ,CAAnB,CADe,GAEf0D,MAAM5C,MAAN,CAAasP,OAAb,CAAqBpQ,CAArB,EAAwB8J,UAAxB,CAAmCnM,WAAnC,CAFF;gBAGM0M,OAAN,CAAcgD,iBAAd,IAAmC3J,MAAMwM,KAAN,CAAYlQ,CAAZ,CAAnC;;OANJ,MAQO;cACCkQ,KAAN,CAAY,CAAZ,IAAiB,KAAKpP,MAAL,CAAYqP,KAAZ,CAAkB+E,UAAlB,IACfxR,MAAM5C,MAAN,CAAasP,OAAb,CAAqB,CAArB,EAAwBtG,UAAxB,CAAmCnM,WAAnC,CADF;SAEC+F,MAAM2G,OAAN,CAAcgD,iBAAf,IAAoC3J,MAAMwM,KAA1C;;mBAEWxM,MAAM2G,OAAN,CAAcgD,iBAA3B;oBACc,CAAd;KAtBF;;YAyBQ3N,OAAR,CAAiBC,KAAD,IAAW;YACnB+D,QAAQ,KAAKuI,MAAL,CAAYtM,KAAZ,CAAd;YACMyV,IAAI1R,MAAM5C,MAAN,CAAamP,MAAvB;WACK,IAAIjQ,IAAI,CAAb,EAAgBA,IAAIoV,CAApB,EAAuBpV,KAAK,CAA5B,EAA+B;cACvBkQ,KAAN,CAAYlQ,CAAZ,KAAkBiK,SAAlB;;KAJJ;;SASKoL,UAAL,GAAkB,IAAInX,KAAJ,CAAU,KAAKJ,IAAf,EAAqBK,IAArB,CAA0B,CAA1B,CAAlB;SACKmX,UAAL,GAAkB,IAAIpX,KAAJ,CAAU,KAAKJ,IAAf,EAAqBK,IAArB,CAA0B,CAA1B,CAAlB;SACKkS,kBAAL,GAA0B,IAA1B;GA1KJ;;;;;;;yBAkLyB1S,WAAvB,EAAoC;QAC9BsM,YAAY,CAAhB;;;QAGI9E,MAAM,CAAV;;;;SAIKkQ,UAAL,GAAkB,KAAKE,eAAL,CAAqB,CAArB,CAAlB;SACKD,UAAL,GAAkB,KAAKC,eAAL,CAAqB,CAArB,CAAlB;;;;QAIIC,gBAAgB,CAApB;UACMlJ,UAAUvN,OAAOK,IAAP,CAAY,KAAK6M,MAAjB,EAAyB0C,IAAzB,EAAhB;YACQjP,OAAR,CAAiBC,KAAD,IAAW;YACnB8V,WAAW,KAAKxJ,MAAL,CAAYtM,KAAZ,CAAjB;YACMyV,IAAIK,SAAS3U,MAAT,CAAgBmP,MAA1B;;;;;YAKMyF,QAAQ,IAAIxX,KAAJ,CAAUkX,CAAV,EAAajX,IAAb,CAAkB,CAAlB,CAAd;;UAEIsX,SAAS3U,MAAT,CAAgBkP,cAAhB,KAAmC,SAAvC,EAAkD;aAC3C,IAAI3N,IAAI,CAAb,EAAgBA,IAAI+S,CAApB,EAAuB/S,KAAK,CAA5B,EAA+B;eACxB,IAAI+B,IAAI,CAAb,EAAgBA,IAAIgR,CAApB,EAAuBhR,KAAK,CAA5B,EAA+B;kBACvB/B,CAAN,KAAaoT,SAAS3U,MAAT,CAAgByP,UAAhB,CAA2BnM,CAA3B,EAA8B/B,CAA9B,KACV,IAAIoT,SAAS3U,MAAT,CAAgBkU,iBAAhB,CAAkC5Q,CAAlC,CADM,CAAD,GAERqR,SAASvF,KAAT,CAAe9L,CAAf,CAFJ;;;eAMA,IAAIuR,gBAAgB,CADtB,EAEEA,gBAAgB,KAAK7X,IAAL,EAFlB,EAGE6X,iBAAiB,CAHnB,EAIE;kBACMtT,CAAN,KAAYoT,SAAS3U,MAAT,CAAgBqP,KAAhB,CAAsB9N,CAAtB,KACT,KAAKgT,UAAL,CAAgBM,aAAhB,IACD,KAAK7U,MAAL,CAAYyP,UAAZ,CAAuBoF,aAAvB,EAAsCH,aAAtC,CADA,GAEC,KAAK1U,MAAL,CAAYqP,KAAZ,CAAkBqF,aAAlB,IACD,KAAKF,UAAL,CAAgBK,aAAhB,CAJU,CAAZ;;;OAbN,MAqBO;;cAEC,CAAN,IAAWF,SAAS3U,MAAT,CAAgByP,UAAhB,CAA2B,CAA3B,IAAgCkF,SAASvF,KAAT,CAAe,CAAf,CAA3C;;aAGE,IAAIyF,gBAAgB,CADtB,EAEEA,gBAAgB,KAAK7X,IAAL,EAFlB,EAGE6X,iBAAiB,CAHnB,EAIE;gBACM,CAAN,KAAa,KAAKN,UAAL,CAAgBM,aAAhB,IACX,KAAK7U,MAAL,CAAYyP,UAAZ,CAAuBoF,aAAvB,EAAsCH,aAAtC,CADU,GAET,KAAK1U,MAAL,CAAYqP,KAAZ,CAAkBqF,aAAlB,IACC,KAAKF,UAAL,CAAgBK,aAAhB,CAHJ;;;;aAOG,IAAItT,IAAI,CAAb,EAAgBA,IAAI+S,CAApB,EAAuB/S,KAAK,CAA5B,EAA+B;gBACvBA,CAAN,KAAaoT,SAAS3U,MAAT,CAAgByP,UAAhB,CAA2BlO,IAAI,CAA/B,KACV,IAAIoT,SAAS3U,MAAT,CAAgBkU,iBAAhB,CAAkC3S,CAAlC,CADM,CAAD,GAEVoT,SAASvF,KAAT,CAAe7N,CAAf,CAFF;gBAGMA,CAAN,KAAaoT,SAAS3U,MAAT,CAAgByP,UAAhB,CAA4B,CAAClO,IAAI,CAAL,IAAU,CAAX,GAAgB,CAA3C,KACV,IAAIoT,SAAS3U,MAAT,CAAgBkU,iBAAhB,CAAkC3S,IAAI,CAAtC,CADM,CAAD,GAEVoT,SAASvF,KAAT,CAAe7N,IAAI,CAAnB,CAFF;;;aAKG,IAAIA,IAAI,CAAb,EAAgBA,IAAI+S,CAApB,EAAuB/S,KAAK,CAA5B,EAA+B;mBACpB6N,KAAT,CAAe7N,CAAf,IAAoB,CAApB;mBACSyR,MAAT,CAAgBzR,CAAhB,IAAqB,CAArB;mBACS0R,MAAT,CAAgB1R,CAAhB,IAAqB,CAArB;;;;;;eAMKgI,OAAT,CAAiBuL,cAAjB,GAAkC,GAAlC;eACSvL,OAAT,CAAiBgD,iBAAjB,GAAqC,GAArC;;;WAGK,IAAIhL,IAAI,CAAb,EAAgBA,IAAI+S,CAApB,EAAuB/S,KAAK,CAA5B,EAA+B;cACvBoT,SAAS3U,MAAT,CAAgBsP,OAAhB,CAAwB/N,CAAxB,EAA2ByH,UAA3B,CAAsCnM,WAAtC,IAAqD+X,MAAMrT,CAAN,CAA3D;iBACS0R,MAAT,CAAgB1R,CAAhB,IAAqB,KAAKvB,MAAL,CAAYgU,cAAZ,CAA2BU,aAA3B,IACnBC,SAAS3U,MAAT,CAAgBkU,iBAAhB,CAAkC3S,CAAlC,CADmB,GACoB8C,GADzC;iBAES2O,MAAT,CAAgBzR,CAAhB,IAAqB,CAAC,IAAI,KAAKvB,MAAL,CAAYgU,cAAZ,CAA2BU,aAA3B,CAAL,IACnBC,SAAS3U,MAAT,CAAgBkU,iBAAhB,CAAkC3S,CAAlC,CADmB,GACoB8C,GADzC;iBAES+K,KAAT,CAAe7N,CAAf,IAAoB,CAAC,IAAIoT,SAAS3U,MAAT,CAAgBkU,iBAAhB,CAAkC3S,CAAlC,CAAL,IAA6C8C,GAAjE;;iBAESkF,OAAT,CAAiBuL,cAAjB,IAAmCH,SAAS3B,MAAT,CAAgBzR,CAAhB,IAAqBoT,SAAS1B,MAAT,CAAgB1R,CAAhB,CAAxD;iBACSgI,OAAT,CAAiBgD,iBAAjB,IAAsCoI,SAASvF,KAAT,CAAe7N,CAAf,IACpCoT,SAAS3B,MAAT,CAAgBzR,CAAhB,CADoC,GACfoT,SAAS1B,MAAT,CAAgB1R,CAAhB,CADvB;qBAEa8C,GAAb;;;eAGOkF,OAAT,CAAiBwL,SAAjB,GAA6BJ,SAASpL,OAAT,CAAiBuL,cAAjB,GAC3BH,SAASpL,OAAT,CAAiBgD,iBADnB;;uBAGiB,CAAjB;KArFF;;YAwFQ3N,OAAR,CAAiBC,KAAD,IAAW;YACnB+D,QAAQ,KAAKuI,MAAL,CAAYtM,KAAZ,CAAd;YACMyV,IAAI1R,MAAM5C,MAAN,CAAamP,MAAvB;WACK,IAAI5N,IAAI,CAAb,EAAgBA,IAAI+S,CAApB,EAAuB/S,KAAK,CAA5B,EAA+B;cACvB6N,KAAN,CAAY7N,CAAZ,KAAkB4H,SAAlB;cACM6J,MAAN,CAAazR,CAAb,KAAmB4H,SAAnB;cACM8J,MAAN,CAAa1R,CAAb,KAAmB4H,SAAnB;;KANJ;GAzRJ;;;;;;;kBAySkB6L,OAAhB,EAAyB;UACjBC,mBAAmB,IAAI7X,KAAJ,CAAU,KAAKJ,IAAL,EAAV,EAAuBK,IAAvB,CAA4B,CAA5B,CAAzB;QACI2X,UAAU,CAAd,EAAiB;;UAEXZ,aAAa,CAAjB;aACO9V,IAAP,CAAY,KAAK6M,MAAjB,EAAyB0C,IAAzB,GAAgCjP,OAAhC,CAAyCC,KAAD,IAAW;cAC3C+D,QAAQ,KAAKuI,MAAL,CAAYtM,KAAZ,CAAd;yBACiBuV,UAAjB,IAA+B,GAA/B;aACK,IAAI7S,IAAI,CAAb,EAAgBA,IAAIqB,MAAM5C,MAAN,CAAamP,MAAjC,EAAyC5N,KAAK,CAA9C,EAAiD;2BAC9B6S,UAAjB,KAAgCxR,MAAMyR,MAAN,CAAajF,KAAb,CAAmB7N,CAAnB,IAC9BqB,MAAMyR,MAAN,CAAarB,MAAb,CAAoBzR,CAApB,CAD8B,GAE9BqB,MAAMyR,MAAN,CAAapB,MAAb,CAAoB1R,CAApB,CAFF;;sBAIY,CAAd;OARF;KAHF,MAaO;;UAED6S,aAAa,CAAjB;aACO9V,IAAP,CAAY,KAAK6M,MAAjB,EAAyB0C,IAAzB,GAAgCjP,OAAhC,CAAyCC,KAAD,IAAW;cAC3C+D,QAAQ,KAAKuI,MAAL,CAAYtM,KAAZ,CAAd;yBACiBuV,UAAjB,IAA+B,CAA/B;YACI,EAAEhF,KAAF,KAAYxM,KAAhB;YACIoS,YAAY,CAAhB,EAAmB;kBACTpS,MAAMoQ,MAAd;;YAEEgC,YAAY,CAAhB,EAAmB;kBACTpS,MAAMqQ,MAAd;;aAEG,IAAI1R,IAAI,CAAb,EAAgBA,IAAIqB,MAAM5C,MAAN,CAAamP,MAAjC,EAAyC5N,KAAK,CAA9C,EAAiD;2BAC9B6S,UAAjB,KAAgChF,MAAM7N,CAAN,CAAhC;;sBAEY,CAAd;OAbF;;WAgBK0T,gBAAP;;CA7UJ;;;;;;;;;;;;;;;;AA+VA,AAAe,SAASC,6BAAT,CAAuCpV,CAAvC,EAA0C;MACnD,CAACD,YAAYC,CAAZ,CAAL,EAAqB;UACb,IAAIzD,KAAJ,CAAU,6FAAV,CAAN;;;;;;;SAOK4B,OAAOC,MAAP,CACL4B,CADK,EAELgU,kCAFK,EAGL;;;GAHK,EAOLF,KAPK,EAAP;;;ACtWF;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,AAAO,SAASuB,QAAT,CACL3U,WADK,EAELmO,aAFK,EAGLpG,sBAAsBzJ,SAHjB,EAIL;QACM,EAAEtC,cAAF,EAAkBU,eAAlB,KAAsCsD,WAA5C;QACM;UAAA;aAAA;kBAAA;kBAAA;;MAMFmO,aANJ;QAOM/L,QAAQ0P,gBACZ5J,eACEgH,YAAY/P;kBAAA;;KAGPgP,aAHO,EAAZ,CADF,EAMEpG,mBANF,CADY,EASZ4G,MATY,EAUZtG,SAVY,EAWZ1D,cAXY,EAYZ+J,cAZY,EAaZ1K,cAbY,CAAd;SAeO5B,MAAME,KAAN,CAAYtC,WAAZ,CAAP;;;;;;;;;;;;;;AAcF,AAAO,SAAS4U,kBAAT,CACL5U,WADK,EAELmO,aAFK,EAGLpG,sBAAsBzJ,SAHjB,EAIL;QACM,EAAEtC,cAAF,EAAkBU,eAAlB,KAAsCsD,WAA5C;QACMoC,QAAQyI,uBACZD,+BAAsB5O,cAAtB,EAAsCU,eAAtC,IAA0DyR,aAA1D,EADY,EAEZrP,MAAM6V,SAAS7V,EAAT,EAAaqP,aAAb,EAA4BpG,mBAA5B,CAFM,CAAd;SAIO3F,MAAME,KAAN,CAAYtC,WAAZ,CAAP;;;;;;;;;AASF,AAAO,SAAS6U,YAAT,CACLrV,MADK,EAELoM,mBAAmBtN,SAFd,EAGL;QACM8D,QAAQ+Q,kBAAkBlH,sBAC9BiD,YAAY/P,UAAUK,MAAV,CAAZ,CAD8B,EAE9BoM,gBAF8B,CAAlB,CAAd;QAIMsB,KAAN;SACO9K,KAAP;;;;;;;;;;AAUF,AAAO,SAAS0S,sBAAT,CACLtV,MADK,EAELoM,mBAAmBtN,SAFd,EAGL;QACM8D,QAAQgM,yBAAyBxD,oBAAoBpL,MAApB,CAAzB,CAAd;QACMmL,MAAN,GAAe,EAAf;SACO7M,IAAP,CAAY0B,OAAOwL,OAAnB,EAA4B5M,OAA5B,CAAqCC,KAAD,IAAW;UACvCsM,MAAN,CAAatM,KAAb,IAAsBwW,aAAarV,OAAOwL,OAAP,CAAe3M,KAAf,CAAb,EAAoCuN,gBAApC,CAAtB;GADF;QAGMsB,KAAN;SACO9K,KAAP;;;;;;;;;;AAUF,AAAO,SAAS2S,wBAAT,CACLvV,MADK,EAELoM,mBAAmBtN,SAFd,EAGL;MACI8D,QAAQwI,oBAAoBpL,MAApB,CAAZ;QACMmL,MAAN,GAAe,EAAf;SACO7M,IAAP,CAAY0B,OAAOwL,OAAnB,EAA4B5M,OAA5B,CAAqCC,KAAD,IAAW;UACvCsM,MAAN,CAAatM,KAAb,IAAsBwW,aAAarV,OAAOwL,OAAP,CAAe3M,KAAf,CAAb,EAAoCuN,gBAApC,CAAtB;GADF;UAGQ8I,8BAA8BtG,yBAAyBhM,KAAzB,CAA9B,CAAR;QACM8K,KAAN;SACO9K,KAAP;;;;;"}